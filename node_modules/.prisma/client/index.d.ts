
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model categoria
 * 
 */
export type categoria = $Result.DefaultSelection<Prisma.$categoriaPayload>
/**
 * Model sub_categoria
 * 
 */
export type sub_categoria = $Result.DefaultSelection<Prisma.$sub_categoriaPayload>
/**
 * Model imagem
 * 
 */
export type imagem = $Result.DefaultSelection<Prisma.$imagemPayload>
/**
 * Model imagem_item
 * 
 */
export type imagem_item = $Result.DefaultSelection<Prisma.$imagem_itemPayload>
/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model Pedido
 * 
 */
export type Pedido = $Result.DefaultSelection<Prisma.$PedidoPayload>
/**
 * Model Pedido_item
 * 
 */
export type Pedido_item = $Result.DefaultSelection<Prisma.$Pedido_itemPayload>
/**
 * Model Tipo_Pagamento
 * 
 */
export type Tipo_Pagamento = $Result.DefaultSelection<Prisma.$Tipo_PagamentoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.categoria`: Exposes CRUD operations for the **categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.categoriaDelegate<ExtArgs>;

  /**
   * `prisma.sub_categoria`: Exposes CRUD operations for the **sub_categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sub_categorias
    * const sub_categorias = await prisma.sub_categoria.findMany()
    * ```
    */
  get sub_categoria(): Prisma.sub_categoriaDelegate<ExtArgs>;

  /**
   * `prisma.imagem`: Exposes CRUD operations for the **imagem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Imagems
    * const imagems = await prisma.imagem.findMany()
    * ```
    */
  get imagem(): Prisma.imagemDelegate<ExtArgs>;

  /**
   * `prisma.imagem_item`: Exposes CRUD operations for the **imagem_item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Imagem_items
    * const imagem_items = await prisma.imagem_item.findMany()
    * ```
    */
  get imagem_item(): Prisma.imagem_itemDelegate<ExtArgs>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs>;

  /**
   * `prisma.pedido`: Exposes CRUD operations for the **Pedido** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pedidos
    * const pedidos = await prisma.pedido.findMany()
    * ```
    */
  get pedido(): Prisma.PedidoDelegate<ExtArgs>;

  /**
   * `prisma.pedido_item`: Exposes CRUD operations for the **Pedido_item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pedido_items
    * const pedido_items = await prisma.pedido_item.findMany()
    * ```
    */
  get pedido_item(): Prisma.Pedido_itemDelegate<ExtArgs>;

  /**
   * `prisma.tipo_Pagamento`: Exposes CRUD operations for the **Tipo_Pagamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tipo_Pagamentos
    * const tipo_Pagamentos = await prisma.tipo_Pagamento.findMany()
    * ```
    */
  get tipo_Pagamento(): Prisma.Tipo_PagamentoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Product: 'Product',
    categoria: 'categoria',
    sub_categoria: 'sub_categoria',
    imagem: 'imagem',
    imagem_item: 'imagem_item',
    Cliente: 'Cliente',
    Pedido: 'Pedido',
    Pedido_item: 'Pedido_item',
    Tipo_Pagamento: 'Tipo_Pagamento'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'product' | 'categoria' | 'sub_categoria' | 'imagem' | 'imagem_item' | 'cliente' | 'pedido' | 'pedido_item' | 'tipo_Pagamento'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      categoria: {
        payload: Prisma.$categoriaPayload<ExtArgs>
        fields: Prisma.categoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          findFirst: {
            args: Prisma.categoriaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          findMany: {
            args: Prisma.categoriaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>[]
          }
          create: {
            args: Prisma.categoriaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          createMany: {
            args: Prisma.categoriaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoriaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          update: {
            args: Prisma.categoriaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          deleteMany: {
            args: Prisma.categoriaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoriaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoriaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          aggregate: {
            args: Prisma.CategoriaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategoria>
          }
          groupBy: {
            args: Prisma.categoriaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriaCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaCountAggregateOutputType> | number
          }
        }
      }
      sub_categoria: {
        payload: Prisma.$sub_categoriaPayload<ExtArgs>
        fields: Prisma.sub_categoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sub_categoriaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sub_categoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sub_categoriaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sub_categoriaPayload>
          }
          findFirst: {
            args: Prisma.sub_categoriaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sub_categoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sub_categoriaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sub_categoriaPayload>
          }
          findMany: {
            args: Prisma.sub_categoriaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sub_categoriaPayload>[]
          }
          create: {
            args: Prisma.sub_categoriaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sub_categoriaPayload>
          }
          createMany: {
            args: Prisma.sub_categoriaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.sub_categoriaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sub_categoriaPayload>
          }
          update: {
            args: Prisma.sub_categoriaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sub_categoriaPayload>
          }
          deleteMany: {
            args: Prisma.sub_categoriaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.sub_categoriaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.sub_categoriaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sub_categoriaPayload>
          }
          aggregate: {
            args: Prisma.Sub_categoriaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSub_categoria>
          }
          groupBy: {
            args: Prisma.sub_categoriaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Sub_categoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.sub_categoriaCountArgs<ExtArgs>,
            result: $Utils.Optional<Sub_categoriaCountAggregateOutputType> | number
          }
        }
      }
      imagem: {
        payload: Prisma.$imagemPayload<ExtArgs>
        fields: Prisma.imagemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.imagemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.imagemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>
          }
          findFirst: {
            args: Prisma.imagemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.imagemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>
          }
          findMany: {
            args: Prisma.imagemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>[]
          }
          create: {
            args: Prisma.imagemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>
          }
          createMany: {
            args: Prisma.imagemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.imagemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>
          }
          update: {
            args: Prisma.imagemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>
          }
          deleteMany: {
            args: Prisma.imagemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.imagemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.imagemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>
          }
          aggregate: {
            args: Prisma.ImagemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateImagem>
          }
          groupBy: {
            args: Prisma.imagemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ImagemGroupByOutputType>[]
          }
          count: {
            args: Prisma.imagemCountArgs<ExtArgs>,
            result: $Utils.Optional<ImagemCountAggregateOutputType> | number
          }
        }
      }
      imagem_item: {
        payload: Prisma.$imagem_itemPayload<ExtArgs>
        fields: Prisma.imagem_itemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.imagem_itemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagem_itemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.imagem_itemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagem_itemPayload>
          }
          findFirst: {
            args: Prisma.imagem_itemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagem_itemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.imagem_itemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagem_itemPayload>
          }
          findMany: {
            args: Prisma.imagem_itemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagem_itemPayload>[]
          }
          create: {
            args: Prisma.imagem_itemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagem_itemPayload>
          }
          createMany: {
            args: Prisma.imagem_itemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.imagem_itemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagem_itemPayload>
          }
          update: {
            args: Prisma.imagem_itemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagem_itemPayload>
          }
          deleteMany: {
            args: Prisma.imagem_itemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.imagem_itemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.imagem_itemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$imagem_itemPayload>
          }
          aggregate: {
            args: Prisma.Imagem_itemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateImagem_item>
          }
          groupBy: {
            args: Prisma.imagem_itemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Imagem_itemGroupByOutputType>[]
          }
          count: {
            args: Prisma.imagem_itemCountArgs<ExtArgs>,
            result: $Utils.Optional<Imagem_itemCountAggregateOutputType> | number
          }
        }
      }
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>,
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Pedido: {
        payload: Prisma.$PedidoPayload<ExtArgs>
        fields: Prisma.PedidoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PedidoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PedidoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          findFirst: {
            args: Prisma.PedidoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PedidoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          findMany: {
            args: Prisma.PedidoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>[]
          }
          create: {
            args: Prisma.PedidoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          createMany: {
            args: Prisma.PedidoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PedidoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          update: {
            args: Prisma.PedidoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          deleteMany: {
            args: Prisma.PedidoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PedidoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PedidoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          aggregate: {
            args: Prisma.PedidoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePedido>
          }
          groupBy: {
            args: Prisma.PedidoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PedidoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PedidoCountArgs<ExtArgs>,
            result: $Utils.Optional<PedidoCountAggregateOutputType> | number
          }
        }
      }
      Pedido_item: {
        payload: Prisma.$Pedido_itemPayload<ExtArgs>
        fields: Prisma.Pedido_itemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Pedido_itemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Pedido_itemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Pedido_itemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Pedido_itemPayload>
          }
          findFirst: {
            args: Prisma.Pedido_itemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Pedido_itemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Pedido_itemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Pedido_itemPayload>
          }
          findMany: {
            args: Prisma.Pedido_itemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Pedido_itemPayload>[]
          }
          create: {
            args: Prisma.Pedido_itemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Pedido_itemPayload>
          }
          createMany: {
            args: Prisma.Pedido_itemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Pedido_itemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Pedido_itemPayload>
          }
          update: {
            args: Prisma.Pedido_itemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Pedido_itemPayload>
          }
          deleteMany: {
            args: Prisma.Pedido_itemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Pedido_itemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Pedido_itemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Pedido_itemPayload>
          }
          aggregate: {
            args: Prisma.Pedido_itemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePedido_item>
          }
          groupBy: {
            args: Prisma.Pedido_itemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Pedido_itemGroupByOutputType>[]
          }
          count: {
            args: Prisma.Pedido_itemCountArgs<ExtArgs>,
            result: $Utils.Optional<Pedido_itemCountAggregateOutputType> | number
          }
        }
      }
      Tipo_Pagamento: {
        payload: Prisma.$Tipo_PagamentoPayload<ExtArgs>
        fields: Prisma.Tipo_PagamentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Tipo_PagamentoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Tipo_PagamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Tipo_PagamentoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Tipo_PagamentoPayload>
          }
          findFirst: {
            args: Prisma.Tipo_PagamentoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Tipo_PagamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Tipo_PagamentoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Tipo_PagamentoPayload>
          }
          findMany: {
            args: Prisma.Tipo_PagamentoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Tipo_PagamentoPayload>[]
          }
          create: {
            args: Prisma.Tipo_PagamentoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Tipo_PagamentoPayload>
          }
          createMany: {
            args: Prisma.Tipo_PagamentoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Tipo_PagamentoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Tipo_PagamentoPayload>
          }
          update: {
            args: Prisma.Tipo_PagamentoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Tipo_PagamentoPayload>
          }
          deleteMany: {
            args: Prisma.Tipo_PagamentoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Tipo_PagamentoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Tipo_PagamentoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Tipo_PagamentoPayload>
          }
          aggregate: {
            args: Prisma.Tipo_PagamentoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTipo_Pagamento>
          }
          groupBy: {
            args: Prisma.Tipo_PagamentoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Tipo_PagamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.Tipo_PagamentoCountArgs<ExtArgs>,
            result: $Utils.Optional<Tipo_PagamentoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    Pedido_item: number
    imagem_item: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Pedido_item?: boolean | ProductCountOutputTypeCountPedido_itemArgs
    imagem_item?: boolean | ProductCountOutputTypeCountImagem_itemArgs
  }

  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountPedido_itemArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Pedido_itemWhereInput
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountImagem_itemArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: imagem_itemWhereInput
  }



  /**
   * Count Type CategoriaCountOutputType
   */

  export type CategoriaCountOutputType = {
    sub_categorias: number
  }

  export type CategoriaCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    sub_categorias?: boolean | CategoriaCountOutputTypeCountSub_categoriasArgs
  }

  // Custom InputTypes

  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaCountOutputType
     */
    select?: CategoriaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeCountSub_categoriasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: sub_categoriaWhereInput
  }



  /**
   * Count Type Sub_categoriaCountOutputType
   */

  export type Sub_categoriaCountOutputType = {
    produtos: number
  }

  export type Sub_categoriaCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    produtos?: boolean | Sub_categoriaCountOutputTypeCountProdutosArgs
  }

  // Custom InputTypes

  /**
   * Sub_categoriaCountOutputType without action
   */
  export type Sub_categoriaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sub_categoriaCountOutputType
     */
    select?: Sub_categoriaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * Sub_categoriaCountOutputType without action
   */
  export type Sub_categoriaCountOutputTypeCountProdutosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }



  /**
   * Count Type ImagemCountOutputType
   */

  export type ImagemCountOutputType = {
    imagem_item: number
  }

  export type ImagemCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    imagem_item?: boolean | ImagemCountOutputTypeCountImagem_itemArgs
  }

  // Custom InputTypes

  /**
   * ImagemCountOutputType without action
   */
  export type ImagemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImagemCountOutputType
     */
    select?: ImagemCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ImagemCountOutputType without action
   */
  export type ImagemCountOutputTypeCountImagem_itemArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: imagem_itemWhereInput
  }



  /**
   * Count Type ClienteCountOutputType
   */

  export type ClienteCountOutputType = {
    Pedido: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Pedido?: boolean | ClienteCountOutputTypeCountPedidoArgs
  }

  // Custom InputTypes

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountPedidoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PedidoWhereInput
  }



  /**
   * Count Type PedidoCountOutputType
   */

  export type PedidoCountOutputType = {
    Pedido_item: number
  }

  export type PedidoCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Pedido_item?: boolean | PedidoCountOutputTypeCountPedido_itemArgs
  }

  // Custom InputTypes

  /**
   * PedidoCountOutputType without action
   */
  export type PedidoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PedidoCountOutputType
     */
    select?: PedidoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PedidoCountOutputType without action
   */
  export type PedidoCountOutputTypeCountPedido_itemArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Pedido_itemWhereInput
  }



  /**
   * Count Type Tipo_PagamentoCountOutputType
   */

  export type Tipo_PagamentoCountOutputType = {
    Pedido: number
  }

  export type Tipo_PagamentoCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Pedido?: boolean | Tipo_PagamentoCountOutputTypeCountPedidoArgs
  }

  // Custom InputTypes

  /**
   * Tipo_PagamentoCountOutputType without action
   */
  export type Tipo_PagamentoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tipo_PagamentoCountOutputType
     */
    select?: Tipo_PagamentoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * Tipo_PagamentoCountOutputType without action
   */
  export type Tipo_PagamentoCountOutputTypeCountPedidoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PedidoWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    user_id: number | null
    user_typeuser: number | null
  }

  export type UserSumAggregateOutputType = {
    user_id: number | null
    user_typeuser: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: number | null
    user_name: string | null
    user_email: string | null
    user_cpf: string | null
    user_password: string | null
    user_phone: string | null
    user_typeuser: number | null
    user_createdAt: Date | null
    user_updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: number | null
    user_name: string | null
    user_email: string | null
    user_cpf: string | null
    user_password: string | null
    user_phone: string | null
    user_typeuser: number | null
    user_createdAt: Date | null
    user_updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    user_name: number
    user_email: number
    user_cpf: number
    user_password: number
    user_phone: number
    user_typeuser: number
    user_createdAt: number
    user_updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    user_id?: true
    user_typeuser?: true
  }

  export type UserSumAggregateInputType = {
    user_id?: true
    user_typeuser?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    user_name?: true
    user_email?: true
    user_cpf?: true
    user_password?: true
    user_phone?: true
    user_typeuser?: true
    user_createdAt?: true
    user_updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    user_name?: true
    user_email?: true
    user_cpf?: true
    user_password?: true
    user_phone?: true
    user_typeuser?: true
    user_createdAt?: true
    user_updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    user_name?: true
    user_email?: true
    user_cpf?: true
    user_password?: true
    user_phone?: true
    user_typeuser?: true
    user_createdAt?: true
    user_updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: number
    user_name: string
    user_email: string
    user_cpf: string
    user_password: string
    user_phone: string
    user_typeuser: number
    user_createdAt: Date
    user_updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    user_name?: boolean
    user_email?: boolean
    user_cpf?: boolean
    user_password?: boolean
    user_phone?: boolean
    user_typeuser?: boolean
    user_createdAt?: boolean
    user_updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    user_id?: boolean
    user_name?: boolean
    user_email?: boolean
    user_cpf?: boolean
    user_password?: boolean
    user_phone?: boolean
    user_typeuser?: boolean
    user_createdAt?: boolean
    user_updatedAt?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetResult<{
      user_id: number
      user_name: string
      user_email: string
      user_cpf: string
      user_password: string
      user_phone: string
      user_typeuser: number
      user_createdAt: Date
      user_updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly user_id: FieldRef<"User", 'Int'>
    readonly user_name: FieldRef<"User", 'String'>
    readonly user_email: FieldRef<"User", 'String'>
    readonly user_cpf: FieldRef<"User", 'String'>
    readonly user_password: FieldRef<"User", 'String'>
    readonly user_phone: FieldRef<"User", 'String'>
    readonly user_typeuser: FieldRef<"User", 'Int'>
    readonly user_createdAt: FieldRef<"User", 'DateTime'>
    readonly user_updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }



  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    product_id: number | null
    product_sub_id: number | null
    product_valor: number | null
    product_imagem_id: number | null
    product_marca: number | null
  }

  export type ProductSumAggregateOutputType = {
    product_id: number | null
    product_sub_id: number | null
    product_valor: number | null
    product_imagem_id: number | null
    product_marca: number | null
  }

  export type ProductMinAggregateOutputType = {
    product_id: number | null
    product_sub_id: number | null
    product_nome: string | null
    product_valor: number | null
    product_imagem_id: number | null
    product_marca: number | null
    product_descricao: string | null
    user_createdAt: Date | null
    user_updatedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    product_id: number | null
    product_sub_id: number | null
    product_nome: string | null
    product_valor: number | null
    product_imagem_id: number | null
    product_marca: number | null
    product_descricao: string | null
    user_createdAt: Date | null
    user_updatedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    product_id: number
    product_sub_id: number
    product_nome: number
    product_valor: number
    product_imagem_id: number
    product_marca: number
    product_descricao: number
    user_createdAt: number
    user_updatedAt: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    product_id?: true
    product_sub_id?: true
    product_valor?: true
    product_imagem_id?: true
    product_marca?: true
  }

  export type ProductSumAggregateInputType = {
    product_id?: true
    product_sub_id?: true
    product_valor?: true
    product_imagem_id?: true
    product_marca?: true
  }

  export type ProductMinAggregateInputType = {
    product_id?: true
    product_sub_id?: true
    product_nome?: true
    product_valor?: true
    product_imagem_id?: true
    product_marca?: true
    product_descricao?: true
    user_createdAt?: true
    user_updatedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    product_id?: true
    product_sub_id?: true
    product_nome?: true
    product_valor?: true
    product_imagem_id?: true
    product_marca?: true
    product_descricao?: true
    user_createdAt?: true
    user_updatedAt?: true
  }

  export type ProductCountAggregateInputType = {
    product_id?: true
    product_sub_id?: true
    product_nome?: true
    product_valor?: true
    product_imagem_id?: true
    product_marca?: true
    product_descricao?: true
    user_createdAt?: true
    user_updatedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    product_id: number
    product_sub_id: number
    product_nome: string
    product_valor: number
    product_imagem_id: number
    product_marca: number
    product_descricao: string
    user_createdAt: Date
    user_updatedAt: Date
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_id?: boolean
    product_sub_id?: boolean
    product_nome?: boolean
    product_valor?: boolean
    product_imagem_id?: boolean
    product_marca?: boolean
    product_descricao?: boolean
    user_createdAt?: boolean
    user_updatedAt?: boolean
    sub_categoria?: boolean | sub_categoriaDefaultArgs<ExtArgs>
    Pedido_item?: boolean | Product$Pedido_itemArgs<ExtArgs>
    imagem_item?: boolean | Product$imagem_itemArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    product_id?: boolean
    product_sub_id?: boolean
    product_nome?: boolean
    product_valor?: boolean
    product_imagem_id?: boolean
    product_marca?: boolean
    product_descricao?: boolean
    user_createdAt?: boolean
    user_updatedAt?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    sub_categoria?: boolean | sub_categoriaDefaultArgs<ExtArgs>
    Pedido_item?: boolean | Product$Pedido_itemArgs<ExtArgs>
    imagem_item?: boolean | Product$imagem_itemArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProductPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      sub_categoria: Prisma.$sub_categoriaPayload<ExtArgs>
      Pedido_item: Prisma.$Pedido_itemPayload<ExtArgs>[]
      imagem_item: Prisma.$imagem_itemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      product_id: number
      product_sub_id: number
      product_nome: string
      product_valor: number
      product_imagem_id: number
      product_marca: number
      product_descricao: string
      user_createdAt: Date
      user_updatedAt: Date
    }, ExtArgs["result"]["product"]>
    composites: {}
  }


  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `product_id`
     * const productWithProduct_idOnly = await prisma.product.findMany({ select: { product_id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCreateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    sub_categoria<T extends sub_categoriaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, sub_categoriaDefaultArgs<ExtArgs>>): Prisma__sub_categoriaClient<$Result.GetResult<Prisma.$sub_categoriaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Pedido_item<T extends Product$Pedido_itemArgs<ExtArgs> = {}>(args?: Subset<T, Product$Pedido_itemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Pedido_itemPayload<ExtArgs>, T, 'findMany'> | Null>;

    imagem_item<T extends Product$imagem_itemArgs<ExtArgs> = {}>(args?: Subset<T, Product$imagem_itemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imagem_itemPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly product_id: FieldRef<"Product", 'Int'>
    readonly product_sub_id: FieldRef<"Product", 'Int'>
    readonly product_nome: FieldRef<"Product", 'String'>
    readonly product_valor: FieldRef<"Product", 'Float'>
    readonly product_imagem_id: FieldRef<"Product", 'Int'>
    readonly product_marca: FieldRef<"Product", 'Int'>
    readonly product_descricao: FieldRef<"Product", 'String'>
    readonly user_createdAt: FieldRef<"Product", 'DateTime'>
    readonly user_updatedAt: FieldRef<"Product", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }


  /**
   * Product.Pedido_item
   */
  export type Product$Pedido_itemArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido_item
     */
    select?: Pedido_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Pedido_itemInclude<ExtArgs> | null
    where?: Pedido_itemWhereInput
    orderBy?: Pedido_itemOrderByWithRelationInput | Pedido_itemOrderByWithRelationInput[]
    cursor?: Pedido_itemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Pedido_itemScalarFieldEnum | Pedido_itemScalarFieldEnum[]
  }


  /**
   * Product.imagem_item
   */
  export type Product$imagem_itemArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem_item
     */
    select?: imagem_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagem_itemInclude<ExtArgs> | null
    where?: imagem_itemWhereInput
    orderBy?: imagem_itemOrderByWithRelationInput | imagem_itemOrderByWithRelationInput[]
    cursor?: imagem_itemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Imagem_itemScalarFieldEnum | Imagem_itemScalarFieldEnum[]
  }


  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
  }



  /**
   * Model categoria
   */

  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    categoria_id: number | null
  }

  export type CategoriaSumAggregateOutputType = {
    categoria_id: number | null
  }

  export type CategoriaMinAggregateOutputType = {
    categoria_id: number | null
    categoria_nome: string | null
    categoria_createdAt: Date | null
    categoria_updatedAt: Date | null
  }

  export type CategoriaMaxAggregateOutputType = {
    categoria_id: number | null
    categoria_nome: string | null
    categoria_createdAt: Date | null
    categoria_updatedAt: Date | null
  }

  export type CategoriaCountAggregateOutputType = {
    categoria_id: number
    categoria_nome: number
    categoria_createdAt: number
    categoria_updatedAt: number
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    categoria_id?: true
  }

  export type CategoriaSumAggregateInputType = {
    categoria_id?: true
  }

  export type CategoriaMinAggregateInputType = {
    categoria_id?: true
    categoria_nome?: true
    categoria_createdAt?: true
    categoria_updatedAt?: true
  }

  export type CategoriaMaxAggregateInputType = {
    categoria_id?: true
    categoria_nome?: true
    categoria_createdAt?: true
    categoria_updatedAt?: true
  }

  export type CategoriaCountAggregateInputType = {
    categoria_id?: true
    categoria_nome?: true
    categoria_createdAt?: true
    categoria_updatedAt?: true
    _all?: true
  }

  export type CategoriaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which categoria to aggregate.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type categoriaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: categoriaWhereInput
    orderBy?: categoriaOrderByWithAggregationInput | categoriaOrderByWithAggregationInput[]
    by: CategoriaScalarFieldEnum[] | CategoriaScalarFieldEnum
    having?: categoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _avg?: CategoriaAvgAggregateInputType
    _sum?: CategoriaSumAggregateInputType
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }

  export type CategoriaGroupByOutputType = {
    categoria_id: number
    categoria_nome: string
    categoria_createdAt: Date
    categoria_updatedAt: Date
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends categoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type categoriaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    categoria_id?: boolean
    categoria_nome?: boolean
    categoria_createdAt?: boolean
    categoria_updatedAt?: boolean
    sub_categorias?: boolean | categoria$sub_categoriasArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoria"]>

  export type categoriaSelectScalar = {
    categoria_id?: boolean
    categoria_nome?: boolean
    categoria_createdAt?: boolean
    categoria_updatedAt?: boolean
  }

  export type categoriaInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    sub_categorias?: boolean | categoria$sub_categoriasArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $categoriaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "categoria"
    objects: {
      sub_categorias: Prisma.$sub_categoriaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      categoria_id: number
      categoria_nome: string
      categoria_createdAt: Date
      categoria_updatedAt: Date
    }, ExtArgs["result"]["categoria"]>
    composites: {}
  }


  type categoriaGetPayload<S extends boolean | null | undefined | categoriaDefaultArgs> = $Result.GetResult<Prisma.$categoriaPayload, S>

  type categoriaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<categoriaFindManyArgs, 'select' | 'include'> & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface categoriaDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categoria'], meta: { name: 'categoria' } }
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {categoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaFindUniqueArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categoria that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoriaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindFirstArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoriaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `categoria_id`
     * const categoriaWithCategoria_idOnly = await prisma.categoria.findMany({ select: { categoria_id: true } })
     * 
    **/
    findMany<T extends categoriaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categoria.
     * @param {categoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
    **/
    create<T extends categoriaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaCreateArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categorias.
     *     @param {categoriaCreateManyArgs} args - Arguments to create many Categorias.
     *     @example
     *     // Create many Categorias
     *     const categoria = await prisma.categoria.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categoria.
     * @param {categoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
    **/
    delete<T extends categoriaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaDeleteArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categoria.
     * @param {categoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaUpdateArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {categoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {categoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
    **/
    upsert<T extends categoriaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaUpsertArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends categoriaCountArgs>(
      args?: Subset<T, categoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriaGroupByArgs['orderBy'] }
        : { orderBy?: categoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categoria model
   */
  readonly fields: categoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    sub_categorias<T extends categoria$sub_categoriasArgs<ExtArgs> = {}>(args?: Subset<T, categoria$sub_categoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sub_categoriaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the categoria model
   */ 
  interface categoriaFieldRefs {
    readonly categoria_id: FieldRef<"categoria", 'Int'>
    readonly categoria_nome: FieldRef<"categoria", 'String'>
    readonly categoria_createdAt: FieldRef<"categoria", 'DateTime'>
    readonly categoria_updatedAt: FieldRef<"categoria", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * categoria findUnique
   */
  export type categoriaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria findUniqueOrThrow
   */
  export type categoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria findFirst
   */
  export type categoriaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * categoria findFirstOrThrow
   */
  export type categoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * categoria findMany
   */
  export type categoriaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categorias.
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * categoria create
   */
  export type categoriaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a categoria.
     */
    data: XOR<categoriaCreateInput, categoriaUncheckedCreateInput>
  }


  /**
   * categoria createMany
   */
  export type categoriaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categorias.
     */
    data: categoriaCreateManyInput | categoriaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * categoria update
   */
  export type categoriaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a categoria.
     */
    data: XOR<categoriaUpdateInput, categoriaUncheckedUpdateInput>
    /**
     * Choose, which categoria to update.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria updateMany
   */
  export type categoriaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categorias.
     */
    data: XOR<categoriaUpdateManyMutationInput, categoriaUncheckedUpdateManyInput>
    /**
     * Filter which categorias to update
     */
    where?: categoriaWhereInput
  }


  /**
   * categoria upsert
   */
  export type categoriaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the categoria to update in case it exists.
     */
    where: categoriaWhereUniqueInput
    /**
     * In case the categoria found by the `where` argument doesn't exist, create a new categoria with this data.
     */
    create: XOR<categoriaCreateInput, categoriaUncheckedCreateInput>
    /**
     * In case the categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriaUpdateInput, categoriaUncheckedUpdateInput>
  }


  /**
   * categoria delete
   */
  export type categoriaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter which categoria to delete.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria deleteMany
   */
  export type categoriaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which categorias to delete
     */
    where?: categoriaWhereInput
  }


  /**
   * categoria.sub_categorias
   */
  export type categoria$sub_categoriasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_categoria
     */
    select?: sub_categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_categoriaInclude<ExtArgs> | null
    where?: sub_categoriaWhereInput
    orderBy?: sub_categoriaOrderByWithRelationInput | sub_categoriaOrderByWithRelationInput[]
    cursor?: sub_categoriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Sub_categoriaScalarFieldEnum | Sub_categoriaScalarFieldEnum[]
  }


  /**
   * categoria without action
   */
  export type categoriaDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
  }



  /**
   * Model sub_categoria
   */

  export type AggregateSub_categoria = {
    _count: Sub_categoriaCountAggregateOutputType | null
    _avg: Sub_categoriaAvgAggregateOutputType | null
    _sum: Sub_categoriaSumAggregateOutputType | null
    _min: Sub_categoriaMinAggregateOutputType | null
    _max: Sub_categoriaMaxAggregateOutputType | null
  }

  export type Sub_categoriaAvgAggregateOutputType = {
    sub_categoria_id: number | null
    categoria_id: number | null
  }

  export type Sub_categoriaSumAggregateOutputType = {
    sub_categoria_id: number | null
    categoria_id: number | null
  }

  export type Sub_categoriaMinAggregateOutputType = {
    sub_categoria_id: number | null
    categoria_id: number | null
    sub_categoria_nome: string | null
    sub_categoria_createdAt: Date | null
    sub_categoria_updatedAt: Date | null
  }

  export type Sub_categoriaMaxAggregateOutputType = {
    sub_categoria_id: number | null
    categoria_id: number | null
    sub_categoria_nome: string | null
    sub_categoria_createdAt: Date | null
    sub_categoria_updatedAt: Date | null
  }

  export type Sub_categoriaCountAggregateOutputType = {
    sub_categoria_id: number
    categoria_id: number
    sub_categoria_nome: number
    sub_categoria_createdAt: number
    sub_categoria_updatedAt: number
    _all: number
  }


  export type Sub_categoriaAvgAggregateInputType = {
    sub_categoria_id?: true
    categoria_id?: true
  }

  export type Sub_categoriaSumAggregateInputType = {
    sub_categoria_id?: true
    categoria_id?: true
  }

  export type Sub_categoriaMinAggregateInputType = {
    sub_categoria_id?: true
    categoria_id?: true
    sub_categoria_nome?: true
    sub_categoria_createdAt?: true
    sub_categoria_updatedAt?: true
  }

  export type Sub_categoriaMaxAggregateInputType = {
    sub_categoria_id?: true
    categoria_id?: true
    sub_categoria_nome?: true
    sub_categoria_createdAt?: true
    sub_categoria_updatedAt?: true
  }

  export type Sub_categoriaCountAggregateInputType = {
    sub_categoria_id?: true
    categoria_id?: true
    sub_categoria_nome?: true
    sub_categoria_createdAt?: true
    sub_categoria_updatedAt?: true
    _all?: true
  }

  export type Sub_categoriaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which sub_categoria to aggregate.
     */
    where?: sub_categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sub_categorias to fetch.
     */
    orderBy?: sub_categoriaOrderByWithRelationInput | sub_categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sub_categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sub_categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sub_categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sub_categorias
    **/
    _count?: true | Sub_categoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Sub_categoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Sub_categoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Sub_categoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Sub_categoriaMaxAggregateInputType
  }

  export type GetSub_categoriaAggregateType<T extends Sub_categoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateSub_categoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSub_categoria[P]>
      : GetScalarType<T[P], AggregateSub_categoria[P]>
  }




  export type sub_categoriaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: sub_categoriaWhereInput
    orderBy?: sub_categoriaOrderByWithAggregationInput | sub_categoriaOrderByWithAggregationInput[]
    by: Sub_categoriaScalarFieldEnum[] | Sub_categoriaScalarFieldEnum
    having?: sub_categoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Sub_categoriaCountAggregateInputType | true
    _avg?: Sub_categoriaAvgAggregateInputType
    _sum?: Sub_categoriaSumAggregateInputType
    _min?: Sub_categoriaMinAggregateInputType
    _max?: Sub_categoriaMaxAggregateInputType
  }

  export type Sub_categoriaGroupByOutputType = {
    sub_categoria_id: number
    categoria_id: number
    sub_categoria_nome: string
    sub_categoria_createdAt: Date
    sub_categoria_updatedAt: Date
    _count: Sub_categoriaCountAggregateOutputType | null
    _avg: Sub_categoriaAvgAggregateOutputType | null
    _sum: Sub_categoriaSumAggregateOutputType | null
    _min: Sub_categoriaMinAggregateOutputType | null
    _max: Sub_categoriaMaxAggregateOutputType | null
  }

  type GetSub_categoriaGroupByPayload<T extends sub_categoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Sub_categoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Sub_categoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Sub_categoriaGroupByOutputType[P]>
            : GetScalarType<T[P], Sub_categoriaGroupByOutputType[P]>
        }
      >
    >


  export type sub_categoriaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sub_categoria_id?: boolean
    categoria_id?: boolean
    sub_categoria_nome?: boolean
    sub_categoria_createdAt?: boolean
    sub_categoria_updatedAt?: boolean
    categoria?: boolean | categoriaDefaultArgs<ExtArgs>
    produtos?: boolean | sub_categoria$produtosArgs<ExtArgs>
    _count?: boolean | Sub_categoriaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sub_categoria"]>

  export type sub_categoriaSelectScalar = {
    sub_categoria_id?: boolean
    categoria_id?: boolean
    sub_categoria_nome?: boolean
    sub_categoria_createdAt?: boolean
    sub_categoria_updatedAt?: boolean
  }

  export type sub_categoriaInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    categoria?: boolean | categoriaDefaultArgs<ExtArgs>
    produtos?: boolean | sub_categoria$produtosArgs<ExtArgs>
    _count?: boolean | Sub_categoriaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $sub_categoriaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "sub_categoria"
    objects: {
      categoria: Prisma.$categoriaPayload<ExtArgs>
      produtos: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      sub_categoria_id: number
      categoria_id: number
      sub_categoria_nome: string
      sub_categoria_createdAt: Date
      sub_categoria_updatedAt: Date
    }, ExtArgs["result"]["sub_categoria"]>
    composites: {}
  }


  type sub_categoriaGetPayload<S extends boolean | null | undefined | sub_categoriaDefaultArgs> = $Result.GetResult<Prisma.$sub_categoriaPayload, S>

  type sub_categoriaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<sub_categoriaFindManyArgs, 'select' | 'include'> & {
      select?: Sub_categoriaCountAggregateInputType | true
    }

  export interface sub_categoriaDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sub_categoria'], meta: { name: 'sub_categoria' } }
    /**
     * Find zero or one Sub_categoria that matches the filter.
     * @param {sub_categoriaFindUniqueArgs} args - Arguments to find a Sub_categoria
     * @example
     * // Get one Sub_categoria
     * const sub_categoria = await prisma.sub_categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sub_categoriaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, sub_categoriaFindUniqueArgs<ExtArgs>>
    ): Prisma__sub_categoriaClient<$Result.GetResult<Prisma.$sub_categoriaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sub_categoria that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {sub_categoriaFindUniqueOrThrowArgs} args - Arguments to find a Sub_categoria
     * @example
     * // Get one Sub_categoria
     * const sub_categoria = await prisma.sub_categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sub_categoriaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sub_categoriaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__sub_categoriaClient<$Result.GetResult<Prisma.$sub_categoriaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sub_categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sub_categoriaFindFirstArgs} args - Arguments to find a Sub_categoria
     * @example
     * // Get one Sub_categoria
     * const sub_categoria = await prisma.sub_categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sub_categoriaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, sub_categoriaFindFirstArgs<ExtArgs>>
    ): Prisma__sub_categoriaClient<$Result.GetResult<Prisma.$sub_categoriaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sub_categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sub_categoriaFindFirstOrThrowArgs} args - Arguments to find a Sub_categoria
     * @example
     * // Get one Sub_categoria
     * const sub_categoria = await prisma.sub_categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sub_categoriaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sub_categoriaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__sub_categoriaClient<$Result.GetResult<Prisma.$sub_categoriaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sub_categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sub_categoriaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sub_categorias
     * const sub_categorias = await prisma.sub_categoria.findMany()
     * 
     * // Get first 10 Sub_categorias
     * const sub_categorias = await prisma.sub_categoria.findMany({ take: 10 })
     * 
     * // Only select the `sub_categoria_id`
     * const sub_categoriaWithSub_categoria_idOnly = await prisma.sub_categoria.findMany({ select: { sub_categoria_id: true } })
     * 
    **/
    findMany<T extends sub_categoriaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sub_categoriaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sub_categoriaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sub_categoria.
     * @param {sub_categoriaCreateArgs} args - Arguments to create a Sub_categoria.
     * @example
     * // Create one Sub_categoria
     * const Sub_categoria = await prisma.sub_categoria.create({
     *   data: {
     *     // ... data to create a Sub_categoria
     *   }
     * })
     * 
    **/
    create<T extends sub_categoriaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, sub_categoriaCreateArgs<ExtArgs>>
    ): Prisma__sub_categoriaClient<$Result.GetResult<Prisma.$sub_categoriaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sub_categorias.
     *     @param {sub_categoriaCreateManyArgs} args - Arguments to create many Sub_categorias.
     *     @example
     *     // Create many Sub_categorias
     *     const sub_categoria = await prisma.sub_categoria.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sub_categoriaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sub_categoriaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sub_categoria.
     * @param {sub_categoriaDeleteArgs} args - Arguments to delete one Sub_categoria.
     * @example
     * // Delete one Sub_categoria
     * const Sub_categoria = await prisma.sub_categoria.delete({
     *   where: {
     *     // ... filter to delete one Sub_categoria
     *   }
     * })
     * 
    **/
    delete<T extends sub_categoriaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, sub_categoriaDeleteArgs<ExtArgs>>
    ): Prisma__sub_categoriaClient<$Result.GetResult<Prisma.$sub_categoriaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sub_categoria.
     * @param {sub_categoriaUpdateArgs} args - Arguments to update one Sub_categoria.
     * @example
     * // Update one Sub_categoria
     * const sub_categoria = await prisma.sub_categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sub_categoriaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, sub_categoriaUpdateArgs<ExtArgs>>
    ): Prisma__sub_categoriaClient<$Result.GetResult<Prisma.$sub_categoriaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sub_categorias.
     * @param {sub_categoriaDeleteManyArgs} args - Arguments to filter Sub_categorias to delete.
     * @example
     * // Delete a few Sub_categorias
     * const { count } = await prisma.sub_categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sub_categoriaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sub_categoriaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sub_categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sub_categoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sub_categorias
     * const sub_categoria = await prisma.sub_categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sub_categoriaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, sub_categoriaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sub_categoria.
     * @param {sub_categoriaUpsertArgs} args - Arguments to update or create a Sub_categoria.
     * @example
     * // Update or create a Sub_categoria
     * const sub_categoria = await prisma.sub_categoria.upsert({
     *   create: {
     *     // ... data to create a Sub_categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sub_categoria we want to update
     *   }
     * })
    **/
    upsert<T extends sub_categoriaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, sub_categoriaUpsertArgs<ExtArgs>>
    ): Prisma__sub_categoriaClient<$Result.GetResult<Prisma.$sub_categoriaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sub_categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sub_categoriaCountArgs} args - Arguments to filter Sub_categorias to count.
     * @example
     * // Count the number of Sub_categorias
     * const count = await prisma.sub_categoria.count({
     *   where: {
     *     // ... the filter for the Sub_categorias we want to count
     *   }
     * })
    **/
    count<T extends sub_categoriaCountArgs>(
      args?: Subset<T, sub_categoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Sub_categoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sub_categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Sub_categoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Sub_categoriaAggregateArgs>(args: Subset<T, Sub_categoriaAggregateArgs>): Prisma.PrismaPromise<GetSub_categoriaAggregateType<T>>

    /**
     * Group by Sub_categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sub_categoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sub_categoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sub_categoriaGroupByArgs['orderBy'] }
        : { orderBy?: sub_categoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sub_categoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSub_categoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sub_categoria model
   */
  readonly fields: sub_categoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sub_categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sub_categoriaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    categoria<T extends categoriaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoriaDefaultArgs<ExtArgs>>): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    produtos<T extends sub_categoria$produtosArgs<ExtArgs> = {}>(args?: Subset<T, sub_categoria$produtosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the sub_categoria model
   */ 
  interface sub_categoriaFieldRefs {
    readonly sub_categoria_id: FieldRef<"sub_categoria", 'Int'>
    readonly categoria_id: FieldRef<"sub_categoria", 'Int'>
    readonly sub_categoria_nome: FieldRef<"sub_categoria", 'String'>
    readonly sub_categoria_createdAt: FieldRef<"sub_categoria", 'DateTime'>
    readonly sub_categoria_updatedAt: FieldRef<"sub_categoria", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * sub_categoria findUnique
   */
  export type sub_categoriaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_categoria
     */
    select?: sub_categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_categoriaInclude<ExtArgs> | null
    /**
     * Filter, which sub_categoria to fetch.
     */
    where: sub_categoriaWhereUniqueInput
  }


  /**
   * sub_categoria findUniqueOrThrow
   */
  export type sub_categoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_categoria
     */
    select?: sub_categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_categoriaInclude<ExtArgs> | null
    /**
     * Filter, which sub_categoria to fetch.
     */
    where: sub_categoriaWhereUniqueInput
  }


  /**
   * sub_categoria findFirst
   */
  export type sub_categoriaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_categoria
     */
    select?: sub_categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_categoriaInclude<ExtArgs> | null
    /**
     * Filter, which sub_categoria to fetch.
     */
    where?: sub_categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sub_categorias to fetch.
     */
    orderBy?: sub_categoriaOrderByWithRelationInput | sub_categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sub_categorias.
     */
    cursor?: sub_categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sub_categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sub_categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sub_categorias.
     */
    distinct?: Sub_categoriaScalarFieldEnum | Sub_categoriaScalarFieldEnum[]
  }


  /**
   * sub_categoria findFirstOrThrow
   */
  export type sub_categoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_categoria
     */
    select?: sub_categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_categoriaInclude<ExtArgs> | null
    /**
     * Filter, which sub_categoria to fetch.
     */
    where?: sub_categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sub_categorias to fetch.
     */
    orderBy?: sub_categoriaOrderByWithRelationInput | sub_categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sub_categorias.
     */
    cursor?: sub_categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sub_categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sub_categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sub_categorias.
     */
    distinct?: Sub_categoriaScalarFieldEnum | Sub_categoriaScalarFieldEnum[]
  }


  /**
   * sub_categoria findMany
   */
  export type sub_categoriaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_categoria
     */
    select?: sub_categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_categoriaInclude<ExtArgs> | null
    /**
     * Filter, which sub_categorias to fetch.
     */
    where?: sub_categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sub_categorias to fetch.
     */
    orderBy?: sub_categoriaOrderByWithRelationInput | sub_categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sub_categorias.
     */
    cursor?: sub_categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sub_categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sub_categorias.
     */
    skip?: number
    distinct?: Sub_categoriaScalarFieldEnum | Sub_categoriaScalarFieldEnum[]
  }


  /**
   * sub_categoria create
   */
  export type sub_categoriaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_categoria
     */
    select?: sub_categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_categoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a sub_categoria.
     */
    data: XOR<sub_categoriaCreateInput, sub_categoriaUncheckedCreateInput>
  }


  /**
   * sub_categoria createMany
   */
  export type sub_categoriaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sub_categorias.
     */
    data: sub_categoriaCreateManyInput | sub_categoriaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * sub_categoria update
   */
  export type sub_categoriaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_categoria
     */
    select?: sub_categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_categoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a sub_categoria.
     */
    data: XOR<sub_categoriaUpdateInput, sub_categoriaUncheckedUpdateInput>
    /**
     * Choose, which sub_categoria to update.
     */
    where: sub_categoriaWhereUniqueInput
  }


  /**
   * sub_categoria updateMany
   */
  export type sub_categoriaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sub_categorias.
     */
    data: XOR<sub_categoriaUpdateManyMutationInput, sub_categoriaUncheckedUpdateManyInput>
    /**
     * Filter which sub_categorias to update
     */
    where?: sub_categoriaWhereInput
  }


  /**
   * sub_categoria upsert
   */
  export type sub_categoriaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_categoria
     */
    select?: sub_categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_categoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the sub_categoria to update in case it exists.
     */
    where: sub_categoriaWhereUniqueInput
    /**
     * In case the sub_categoria found by the `where` argument doesn't exist, create a new sub_categoria with this data.
     */
    create: XOR<sub_categoriaCreateInput, sub_categoriaUncheckedCreateInput>
    /**
     * In case the sub_categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sub_categoriaUpdateInput, sub_categoriaUncheckedUpdateInput>
  }


  /**
   * sub_categoria delete
   */
  export type sub_categoriaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_categoria
     */
    select?: sub_categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_categoriaInclude<ExtArgs> | null
    /**
     * Filter which sub_categoria to delete.
     */
    where: sub_categoriaWhereUniqueInput
  }


  /**
   * sub_categoria deleteMany
   */
  export type sub_categoriaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which sub_categorias to delete
     */
    where?: sub_categoriaWhereInput
  }


  /**
   * sub_categoria.produtos
   */
  export type sub_categoria$produtosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * sub_categoria without action
   */
  export type sub_categoriaDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_categoria
     */
    select?: sub_categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_categoriaInclude<ExtArgs> | null
  }



  /**
   * Model imagem
   */

  export type AggregateImagem = {
    _count: ImagemCountAggregateOutputType | null
    _avg: ImagemAvgAggregateOutputType | null
    _sum: ImagemSumAggregateOutputType | null
    _min: ImagemMinAggregateOutputType | null
    _max: ImagemMaxAggregateOutputType | null
  }

  export type ImagemAvgAggregateOutputType = {
    imagem_id: number | null
  }

  export type ImagemSumAggregateOutputType = {
    imagem_id: number | null
  }

  export type ImagemMinAggregateOutputType = {
    imagem_id: number | null
    imagem_path: string | null
    categoria_createdAt: Date | null
    categoria_updatedAt: Date | null
  }

  export type ImagemMaxAggregateOutputType = {
    imagem_id: number | null
    imagem_path: string | null
    categoria_createdAt: Date | null
    categoria_updatedAt: Date | null
  }

  export type ImagemCountAggregateOutputType = {
    imagem_id: number
    imagem_path: number
    categoria_createdAt: number
    categoria_updatedAt: number
    _all: number
  }


  export type ImagemAvgAggregateInputType = {
    imagem_id?: true
  }

  export type ImagemSumAggregateInputType = {
    imagem_id?: true
  }

  export type ImagemMinAggregateInputType = {
    imagem_id?: true
    imagem_path?: true
    categoria_createdAt?: true
    categoria_updatedAt?: true
  }

  export type ImagemMaxAggregateInputType = {
    imagem_id?: true
    imagem_path?: true
    categoria_createdAt?: true
    categoria_updatedAt?: true
  }

  export type ImagemCountAggregateInputType = {
    imagem_id?: true
    imagem_path?: true
    categoria_createdAt?: true
    categoria_updatedAt?: true
    _all?: true
  }

  export type ImagemAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which imagem to aggregate.
     */
    where?: imagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagems to fetch.
     */
    orderBy?: imagemOrderByWithRelationInput | imagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: imagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned imagems
    **/
    _count?: true | ImagemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImagemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImagemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImagemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImagemMaxAggregateInputType
  }

  export type GetImagemAggregateType<T extends ImagemAggregateArgs> = {
        [P in keyof T & keyof AggregateImagem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImagem[P]>
      : GetScalarType<T[P], AggregateImagem[P]>
  }




  export type imagemGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: imagemWhereInput
    orderBy?: imagemOrderByWithAggregationInput | imagemOrderByWithAggregationInput[]
    by: ImagemScalarFieldEnum[] | ImagemScalarFieldEnum
    having?: imagemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImagemCountAggregateInputType | true
    _avg?: ImagemAvgAggregateInputType
    _sum?: ImagemSumAggregateInputType
    _min?: ImagemMinAggregateInputType
    _max?: ImagemMaxAggregateInputType
  }

  export type ImagemGroupByOutputType = {
    imagem_id: number
    imagem_path: string
    categoria_createdAt: Date
    categoria_updatedAt: Date
    _count: ImagemCountAggregateOutputType | null
    _avg: ImagemAvgAggregateOutputType | null
    _sum: ImagemSumAggregateOutputType | null
    _min: ImagemMinAggregateOutputType | null
    _max: ImagemMaxAggregateOutputType | null
  }

  type GetImagemGroupByPayload<T extends imagemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImagemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImagemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImagemGroupByOutputType[P]>
            : GetScalarType<T[P], ImagemGroupByOutputType[P]>
        }
      >
    >


  export type imagemSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    imagem_id?: boolean
    imagem_path?: boolean
    categoria_createdAt?: boolean
    categoria_updatedAt?: boolean
    imagem_item?: boolean | imagem$imagem_itemArgs<ExtArgs>
    _count?: boolean | ImagemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["imagem"]>

  export type imagemSelectScalar = {
    imagem_id?: boolean
    imagem_path?: boolean
    categoria_createdAt?: boolean
    categoria_updatedAt?: boolean
  }

  export type imagemInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    imagem_item?: boolean | imagem$imagem_itemArgs<ExtArgs>
    _count?: boolean | ImagemCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $imagemPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "imagem"
    objects: {
      imagem_item: Prisma.$imagem_itemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      imagem_id: number
      imagem_path: string
      categoria_createdAt: Date
      categoria_updatedAt: Date
    }, ExtArgs["result"]["imagem"]>
    composites: {}
  }


  type imagemGetPayload<S extends boolean | null | undefined | imagemDefaultArgs> = $Result.GetResult<Prisma.$imagemPayload, S>

  type imagemCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<imagemFindManyArgs, 'select' | 'include'> & {
      select?: ImagemCountAggregateInputType | true
    }

  export interface imagemDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['imagem'], meta: { name: 'imagem' } }
    /**
     * Find zero or one Imagem that matches the filter.
     * @param {imagemFindUniqueArgs} args - Arguments to find a Imagem
     * @example
     * // Get one Imagem
     * const imagem = await prisma.imagem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends imagemFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, imagemFindUniqueArgs<ExtArgs>>
    ): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Imagem that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {imagemFindUniqueOrThrowArgs} args - Arguments to find a Imagem
     * @example
     * // Get one Imagem
     * const imagem = await prisma.imagem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends imagemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, imagemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Imagem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagemFindFirstArgs} args - Arguments to find a Imagem
     * @example
     * // Get one Imagem
     * const imagem = await prisma.imagem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends imagemFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, imagemFindFirstArgs<ExtArgs>>
    ): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Imagem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagemFindFirstOrThrowArgs} args - Arguments to find a Imagem
     * @example
     * // Get one Imagem
     * const imagem = await prisma.imagem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends imagemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, imagemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Imagems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Imagems
     * const imagems = await prisma.imagem.findMany()
     * 
     * // Get first 10 Imagems
     * const imagems = await prisma.imagem.findMany({ take: 10 })
     * 
     * // Only select the `imagem_id`
     * const imagemWithImagem_idOnly = await prisma.imagem.findMany({ select: { imagem_id: true } })
     * 
    **/
    findMany<T extends imagemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, imagemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Imagem.
     * @param {imagemCreateArgs} args - Arguments to create a Imagem.
     * @example
     * // Create one Imagem
     * const Imagem = await prisma.imagem.create({
     *   data: {
     *     // ... data to create a Imagem
     *   }
     * })
     * 
    **/
    create<T extends imagemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, imagemCreateArgs<ExtArgs>>
    ): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Imagems.
     *     @param {imagemCreateManyArgs} args - Arguments to create many Imagems.
     *     @example
     *     // Create many Imagems
     *     const imagem = await prisma.imagem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends imagemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, imagemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Imagem.
     * @param {imagemDeleteArgs} args - Arguments to delete one Imagem.
     * @example
     * // Delete one Imagem
     * const Imagem = await prisma.imagem.delete({
     *   where: {
     *     // ... filter to delete one Imagem
     *   }
     * })
     * 
    **/
    delete<T extends imagemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, imagemDeleteArgs<ExtArgs>>
    ): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Imagem.
     * @param {imagemUpdateArgs} args - Arguments to update one Imagem.
     * @example
     * // Update one Imagem
     * const imagem = await prisma.imagem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends imagemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, imagemUpdateArgs<ExtArgs>>
    ): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Imagems.
     * @param {imagemDeleteManyArgs} args - Arguments to filter Imagems to delete.
     * @example
     * // Delete a few Imagems
     * const { count } = await prisma.imagem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends imagemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, imagemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Imagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Imagems
     * const imagem = await prisma.imagem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends imagemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, imagemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Imagem.
     * @param {imagemUpsertArgs} args - Arguments to update or create a Imagem.
     * @example
     * // Update or create a Imagem
     * const imagem = await prisma.imagem.upsert({
     *   create: {
     *     // ... data to create a Imagem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Imagem we want to update
     *   }
     * })
    **/
    upsert<T extends imagemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, imagemUpsertArgs<ExtArgs>>
    ): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Imagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagemCountArgs} args - Arguments to filter Imagems to count.
     * @example
     * // Count the number of Imagems
     * const count = await prisma.imagem.count({
     *   where: {
     *     // ... the filter for the Imagems we want to count
     *   }
     * })
    **/
    count<T extends imagemCountArgs>(
      args?: Subset<T, imagemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImagemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Imagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImagemAggregateArgs>(args: Subset<T, ImagemAggregateArgs>): Prisma.PrismaPromise<GetImagemAggregateType<T>>

    /**
     * Group by Imagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends imagemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: imagemGroupByArgs['orderBy'] }
        : { orderBy?: imagemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, imagemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImagemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the imagem model
   */
  readonly fields: imagemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for imagem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__imagemClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    imagem_item<T extends imagem$imagem_itemArgs<ExtArgs> = {}>(args?: Subset<T, imagem$imagem_itemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imagem_itemPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the imagem model
   */ 
  interface imagemFieldRefs {
    readonly imagem_id: FieldRef<"imagem", 'Int'>
    readonly imagem_path: FieldRef<"imagem", 'String'>
    readonly categoria_createdAt: FieldRef<"imagem", 'DateTime'>
    readonly categoria_updatedAt: FieldRef<"imagem", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * imagem findUnique
   */
  export type imagemFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * Filter, which imagem to fetch.
     */
    where: imagemWhereUniqueInput
  }


  /**
   * imagem findUniqueOrThrow
   */
  export type imagemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * Filter, which imagem to fetch.
     */
    where: imagemWhereUniqueInput
  }


  /**
   * imagem findFirst
   */
  export type imagemFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * Filter, which imagem to fetch.
     */
    where?: imagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagems to fetch.
     */
    orderBy?: imagemOrderByWithRelationInput | imagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imagems.
     */
    cursor?: imagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imagems.
     */
    distinct?: ImagemScalarFieldEnum | ImagemScalarFieldEnum[]
  }


  /**
   * imagem findFirstOrThrow
   */
  export type imagemFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * Filter, which imagem to fetch.
     */
    where?: imagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagems to fetch.
     */
    orderBy?: imagemOrderByWithRelationInput | imagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imagems.
     */
    cursor?: imagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imagems.
     */
    distinct?: ImagemScalarFieldEnum | ImagemScalarFieldEnum[]
  }


  /**
   * imagem findMany
   */
  export type imagemFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * Filter, which imagems to fetch.
     */
    where?: imagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagems to fetch.
     */
    orderBy?: imagemOrderByWithRelationInput | imagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing imagems.
     */
    cursor?: imagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagems.
     */
    skip?: number
    distinct?: ImagemScalarFieldEnum | ImagemScalarFieldEnum[]
  }


  /**
   * imagem create
   */
  export type imagemCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * The data needed to create a imagem.
     */
    data: XOR<imagemCreateInput, imagemUncheckedCreateInput>
  }


  /**
   * imagem createMany
   */
  export type imagemCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many imagems.
     */
    data: imagemCreateManyInput | imagemCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * imagem update
   */
  export type imagemUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * The data needed to update a imagem.
     */
    data: XOR<imagemUpdateInput, imagemUncheckedUpdateInput>
    /**
     * Choose, which imagem to update.
     */
    where: imagemWhereUniqueInput
  }


  /**
   * imagem updateMany
   */
  export type imagemUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update imagems.
     */
    data: XOR<imagemUpdateManyMutationInput, imagemUncheckedUpdateManyInput>
    /**
     * Filter which imagems to update
     */
    where?: imagemWhereInput
  }


  /**
   * imagem upsert
   */
  export type imagemUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * The filter to search for the imagem to update in case it exists.
     */
    where: imagemWhereUniqueInput
    /**
     * In case the imagem found by the `where` argument doesn't exist, create a new imagem with this data.
     */
    create: XOR<imagemCreateInput, imagemUncheckedCreateInput>
    /**
     * In case the imagem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<imagemUpdateInput, imagemUncheckedUpdateInput>
  }


  /**
   * imagem delete
   */
  export type imagemDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * Filter which imagem to delete.
     */
    where: imagemWhereUniqueInput
  }


  /**
   * imagem deleteMany
   */
  export type imagemDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which imagems to delete
     */
    where?: imagemWhereInput
  }


  /**
   * imagem.imagem_item
   */
  export type imagem$imagem_itemArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem_item
     */
    select?: imagem_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagem_itemInclude<ExtArgs> | null
    where?: imagem_itemWhereInput
    orderBy?: imagem_itemOrderByWithRelationInput | imagem_itemOrderByWithRelationInput[]
    cursor?: imagem_itemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Imagem_itemScalarFieldEnum | Imagem_itemScalarFieldEnum[]
  }


  /**
   * imagem without action
   */
  export type imagemDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagemInclude<ExtArgs> | null
  }



  /**
   * Model imagem_item
   */

  export type AggregateImagem_item = {
    _count: Imagem_itemCountAggregateOutputType | null
    _avg: Imagem_itemAvgAggregateOutputType | null
    _sum: Imagem_itemSumAggregateOutputType | null
    _min: Imagem_itemMinAggregateOutputType | null
    _max: Imagem_itemMaxAggregateOutputType | null
  }

  export type Imagem_itemAvgAggregateOutputType = {
    imagem_item_id: number | null
    imagem_id: number | null
    product_id: number | null
  }

  export type Imagem_itemSumAggregateOutputType = {
    imagem_item_id: number | null
    imagem_id: number | null
    product_id: number | null
  }

  export type Imagem_itemMinAggregateOutputType = {
    imagem_item_id: number | null
    imagem_id: number | null
    product_id: number | null
    sub_categoria_nome: string | null
    sub_categoria_createdAt: Date | null
    sub_categoria_updatedAt: Date | null
  }

  export type Imagem_itemMaxAggregateOutputType = {
    imagem_item_id: number | null
    imagem_id: number | null
    product_id: number | null
    sub_categoria_nome: string | null
    sub_categoria_createdAt: Date | null
    sub_categoria_updatedAt: Date | null
  }

  export type Imagem_itemCountAggregateOutputType = {
    imagem_item_id: number
    imagem_id: number
    product_id: number
    sub_categoria_nome: number
    sub_categoria_createdAt: number
    sub_categoria_updatedAt: number
    _all: number
  }


  export type Imagem_itemAvgAggregateInputType = {
    imagem_item_id?: true
    imagem_id?: true
    product_id?: true
  }

  export type Imagem_itemSumAggregateInputType = {
    imagem_item_id?: true
    imagem_id?: true
    product_id?: true
  }

  export type Imagem_itemMinAggregateInputType = {
    imagem_item_id?: true
    imagem_id?: true
    product_id?: true
    sub_categoria_nome?: true
    sub_categoria_createdAt?: true
    sub_categoria_updatedAt?: true
  }

  export type Imagem_itemMaxAggregateInputType = {
    imagem_item_id?: true
    imagem_id?: true
    product_id?: true
    sub_categoria_nome?: true
    sub_categoria_createdAt?: true
    sub_categoria_updatedAt?: true
  }

  export type Imagem_itemCountAggregateInputType = {
    imagem_item_id?: true
    imagem_id?: true
    product_id?: true
    sub_categoria_nome?: true
    sub_categoria_createdAt?: true
    sub_categoria_updatedAt?: true
    _all?: true
  }

  export type Imagem_itemAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which imagem_item to aggregate.
     */
    where?: imagem_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagem_items to fetch.
     */
    orderBy?: imagem_itemOrderByWithRelationInput | imagem_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: imagem_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagem_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagem_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned imagem_items
    **/
    _count?: true | Imagem_itemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Imagem_itemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Imagem_itemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Imagem_itemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Imagem_itemMaxAggregateInputType
  }

  export type GetImagem_itemAggregateType<T extends Imagem_itemAggregateArgs> = {
        [P in keyof T & keyof AggregateImagem_item]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImagem_item[P]>
      : GetScalarType<T[P], AggregateImagem_item[P]>
  }




  export type imagem_itemGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: imagem_itemWhereInput
    orderBy?: imagem_itemOrderByWithAggregationInput | imagem_itemOrderByWithAggregationInput[]
    by: Imagem_itemScalarFieldEnum[] | Imagem_itemScalarFieldEnum
    having?: imagem_itemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Imagem_itemCountAggregateInputType | true
    _avg?: Imagem_itemAvgAggregateInputType
    _sum?: Imagem_itemSumAggregateInputType
    _min?: Imagem_itemMinAggregateInputType
    _max?: Imagem_itemMaxAggregateInputType
  }

  export type Imagem_itemGroupByOutputType = {
    imagem_item_id: number
    imagem_id: number
    product_id: number
    sub_categoria_nome: string
    sub_categoria_createdAt: Date
    sub_categoria_updatedAt: Date
    _count: Imagem_itemCountAggregateOutputType | null
    _avg: Imagem_itemAvgAggregateOutputType | null
    _sum: Imagem_itemSumAggregateOutputType | null
    _min: Imagem_itemMinAggregateOutputType | null
    _max: Imagem_itemMaxAggregateOutputType | null
  }

  type GetImagem_itemGroupByPayload<T extends imagem_itemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Imagem_itemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Imagem_itemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Imagem_itemGroupByOutputType[P]>
            : GetScalarType<T[P], Imagem_itemGroupByOutputType[P]>
        }
      >
    >


  export type imagem_itemSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    imagem_item_id?: boolean
    imagem_id?: boolean
    product_id?: boolean
    sub_categoria_nome?: boolean
    sub_categoria_createdAt?: boolean
    sub_categoria_updatedAt?: boolean
    imagem?: boolean | imagemDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["imagem_item"]>

  export type imagem_itemSelectScalar = {
    imagem_item_id?: boolean
    imagem_id?: boolean
    product_id?: boolean
    sub_categoria_nome?: boolean
    sub_categoria_createdAt?: boolean
    sub_categoria_updatedAt?: boolean
  }

  export type imagem_itemInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    imagem?: boolean | imagemDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }


  export type $imagem_itemPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "imagem_item"
    objects: {
      imagem: Prisma.$imagemPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      imagem_item_id: number
      imagem_id: number
      product_id: number
      sub_categoria_nome: string
      sub_categoria_createdAt: Date
      sub_categoria_updatedAt: Date
    }, ExtArgs["result"]["imagem_item"]>
    composites: {}
  }


  type imagem_itemGetPayload<S extends boolean | null | undefined | imagem_itemDefaultArgs> = $Result.GetResult<Prisma.$imagem_itemPayload, S>

  type imagem_itemCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<imagem_itemFindManyArgs, 'select' | 'include'> & {
      select?: Imagem_itemCountAggregateInputType | true
    }

  export interface imagem_itemDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['imagem_item'], meta: { name: 'imagem_item' } }
    /**
     * Find zero or one Imagem_item that matches the filter.
     * @param {imagem_itemFindUniqueArgs} args - Arguments to find a Imagem_item
     * @example
     * // Get one Imagem_item
     * const imagem_item = await prisma.imagem_item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends imagem_itemFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, imagem_itemFindUniqueArgs<ExtArgs>>
    ): Prisma__imagem_itemClient<$Result.GetResult<Prisma.$imagem_itemPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Imagem_item that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {imagem_itemFindUniqueOrThrowArgs} args - Arguments to find a Imagem_item
     * @example
     * // Get one Imagem_item
     * const imagem_item = await prisma.imagem_item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends imagem_itemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, imagem_itemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__imagem_itemClient<$Result.GetResult<Prisma.$imagem_itemPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Imagem_item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagem_itemFindFirstArgs} args - Arguments to find a Imagem_item
     * @example
     * // Get one Imagem_item
     * const imagem_item = await prisma.imagem_item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends imagem_itemFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, imagem_itemFindFirstArgs<ExtArgs>>
    ): Prisma__imagem_itemClient<$Result.GetResult<Prisma.$imagem_itemPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Imagem_item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagem_itemFindFirstOrThrowArgs} args - Arguments to find a Imagem_item
     * @example
     * // Get one Imagem_item
     * const imagem_item = await prisma.imagem_item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends imagem_itemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, imagem_itemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__imagem_itemClient<$Result.GetResult<Prisma.$imagem_itemPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Imagem_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagem_itemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Imagem_items
     * const imagem_items = await prisma.imagem_item.findMany()
     * 
     * // Get first 10 Imagem_items
     * const imagem_items = await prisma.imagem_item.findMany({ take: 10 })
     * 
     * // Only select the `imagem_item_id`
     * const imagem_itemWithImagem_item_idOnly = await prisma.imagem_item.findMany({ select: { imagem_item_id: true } })
     * 
    **/
    findMany<T extends imagem_itemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, imagem_itemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imagem_itemPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Imagem_item.
     * @param {imagem_itemCreateArgs} args - Arguments to create a Imagem_item.
     * @example
     * // Create one Imagem_item
     * const Imagem_item = await prisma.imagem_item.create({
     *   data: {
     *     // ... data to create a Imagem_item
     *   }
     * })
     * 
    **/
    create<T extends imagem_itemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, imagem_itemCreateArgs<ExtArgs>>
    ): Prisma__imagem_itemClient<$Result.GetResult<Prisma.$imagem_itemPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Imagem_items.
     *     @param {imagem_itemCreateManyArgs} args - Arguments to create many Imagem_items.
     *     @example
     *     // Create many Imagem_items
     *     const imagem_item = await prisma.imagem_item.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends imagem_itemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, imagem_itemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Imagem_item.
     * @param {imagem_itemDeleteArgs} args - Arguments to delete one Imagem_item.
     * @example
     * // Delete one Imagem_item
     * const Imagem_item = await prisma.imagem_item.delete({
     *   where: {
     *     // ... filter to delete one Imagem_item
     *   }
     * })
     * 
    **/
    delete<T extends imagem_itemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, imagem_itemDeleteArgs<ExtArgs>>
    ): Prisma__imagem_itemClient<$Result.GetResult<Prisma.$imagem_itemPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Imagem_item.
     * @param {imagem_itemUpdateArgs} args - Arguments to update one Imagem_item.
     * @example
     * // Update one Imagem_item
     * const imagem_item = await prisma.imagem_item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends imagem_itemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, imagem_itemUpdateArgs<ExtArgs>>
    ): Prisma__imagem_itemClient<$Result.GetResult<Prisma.$imagem_itemPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Imagem_items.
     * @param {imagem_itemDeleteManyArgs} args - Arguments to filter Imagem_items to delete.
     * @example
     * // Delete a few Imagem_items
     * const { count } = await prisma.imagem_item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends imagem_itemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, imagem_itemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Imagem_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagem_itemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Imagem_items
     * const imagem_item = await prisma.imagem_item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends imagem_itemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, imagem_itemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Imagem_item.
     * @param {imagem_itemUpsertArgs} args - Arguments to update or create a Imagem_item.
     * @example
     * // Update or create a Imagem_item
     * const imagem_item = await prisma.imagem_item.upsert({
     *   create: {
     *     // ... data to create a Imagem_item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Imagem_item we want to update
     *   }
     * })
    **/
    upsert<T extends imagem_itemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, imagem_itemUpsertArgs<ExtArgs>>
    ): Prisma__imagem_itemClient<$Result.GetResult<Prisma.$imagem_itemPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Imagem_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagem_itemCountArgs} args - Arguments to filter Imagem_items to count.
     * @example
     * // Count the number of Imagem_items
     * const count = await prisma.imagem_item.count({
     *   where: {
     *     // ... the filter for the Imagem_items we want to count
     *   }
     * })
    **/
    count<T extends imagem_itemCountArgs>(
      args?: Subset<T, imagem_itemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Imagem_itemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Imagem_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Imagem_itemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Imagem_itemAggregateArgs>(args: Subset<T, Imagem_itemAggregateArgs>): Prisma.PrismaPromise<GetImagem_itemAggregateType<T>>

    /**
     * Group by Imagem_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagem_itemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends imagem_itemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: imagem_itemGroupByArgs['orderBy'] }
        : { orderBy?: imagem_itemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, imagem_itemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImagem_itemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the imagem_item model
   */
  readonly fields: imagem_itemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for imagem_item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__imagem_itemClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    imagem<T extends imagemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, imagemDefaultArgs<ExtArgs>>): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the imagem_item model
   */ 
  interface imagem_itemFieldRefs {
    readonly imagem_item_id: FieldRef<"imagem_item", 'Int'>
    readonly imagem_id: FieldRef<"imagem_item", 'Int'>
    readonly product_id: FieldRef<"imagem_item", 'Int'>
    readonly sub_categoria_nome: FieldRef<"imagem_item", 'String'>
    readonly sub_categoria_createdAt: FieldRef<"imagem_item", 'DateTime'>
    readonly sub_categoria_updatedAt: FieldRef<"imagem_item", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * imagem_item findUnique
   */
  export type imagem_itemFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem_item
     */
    select?: imagem_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagem_itemInclude<ExtArgs> | null
    /**
     * Filter, which imagem_item to fetch.
     */
    where: imagem_itemWhereUniqueInput
  }


  /**
   * imagem_item findUniqueOrThrow
   */
  export type imagem_itemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem_item
     */
    select?: imagem_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagem_itemInclude<ExtArgs> | null
    /**
     * Filter, which imagem_item to fetch.
     */
    where: imagem_itemWhereUniqueInput
  }


  /**
   * imagem_item findFirst
   */
  export type imagem_itemFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem_item
     */
    select?: imagem_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagem_itemInclude<ExtArgs> | null
    /**
     * Filter, which imagem_item to fetch.
     */
    where?: imagem_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagem_items to fetch.
     */
    orderBy?: imagem_itemOrderByWithRelationInput | imagem_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imagem_items.
     */
    cursor?: imagem_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagem_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagem_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imagem_items.
     */
    distinct?: Imagem_itemScalarFieldEnum | Imagem_itemScalarFieldEnum[]
  }


  /**
   * imagem_item findFirstOrThrow
   */
  export type imagem_itemFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem_item
     */
    select?: imagem_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagem_itemInclude<ExtArgs> | null
    /**
     * Filter, which imagem_item to fetch.
     */
    where?: imagem_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagem_items to fetch.
     */
    orderBy?: imagem_itemOrderByWithRelationInput | imagem_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imagem_items.
     */
    cursor?: imagem_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagem_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagem_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imagem_items.
     */
    distinct?: Imagem_itemScalarFieldEnum | Imagem_itemScalarFieldEnum[]
  }


  /**
   * imagem_item findMany
   */
  export type imagem_itemFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem_item
     */
    select?: imagem_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagem_itemInclude<ExtArgs> | null
    /**
     * Filter, which imagem_items to fetch.
     */
    where?: imagem_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagem_items to fetch.
     */
    orderBy?: imagem_itemOrderByWithRelationInput | imagem_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing imagem_items.
     */
    cursor?: imagem_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagem_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagem_items.
     */
    skip?: number
    distinct?: Imagem_itemScalarFieldEnum | Imagem_itemScalarFieldEnum[]
  }


  /**
   * imagem_item create
   */
  export type imagem_itemCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem_item
     */
    select?: imagem_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagem_itemInclude<ExtArgs> | null
    /**
     * The data needed to create a imagem_item.
     */
    data: XOR<imagem_itemCreateInput, imagem_itemUncheckedCreateInput>
  }


  /**
   * imagem_item createMany
   */
  export type imagem_itemCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many imagem_items.
     */
    data: imagem_itemCreateManyInput | imagem_itemCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * imagem_item update
   */
  export type imagem_itemUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem_item
     */
    select?: imagem_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagem_itemInclude<ExtArgs> | null
    /**
     * The data needed to update a imagem_item.
     */
    data: XOR<imagem_itemUpdateInput, imagem_itemUncheckedUpdateInput>
    /**
     * Choose, which imagem_item to update.
     */
    where: imagem_itemWhereUniqueInput
  }


  /**
   * imagem_item updateMany
   */
  export type imagem_itemUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update imagem_items.
     */
    data: XOR<imagem_itemUpdateManyMutationInput, imagem_itemUncheckedUpdateManyInput>
    /**
     * Filter which imagem_items to update
     */
    where?: imagem_itemWhereInput
  }


  /**
   * imagem_item upsert
   */
  export type imagem_itemUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem_item
     */
    select?: imagem_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagem_itemInclude<ExtArgs> | null
    /**
     * The filter to search for the imagem_item to update in case it exists.
     */
    where: imagem_itemWhereUniqueInput
    /**
     * In case the imagem_item found by the `where` argument doesn't exist, create a new imagem_item with this data.
     */
    create: XOR<imagem_itemCreateInput, imagem_itemUncheckedCreateInput>
    /**
     * In case the imagem_item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<imagem_itemUpdateInput, imagem_itemUncheckedUpdateInput>
  }


  /**
   * imagem_item delete
   */
  export type imagem_itemDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem_item
     */
    select?: imagem_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagem_itemInclude<ExtArgs> | null
    /**
     * Filter which imagem_item to delete.
     */
    where: imagem_itemWhereUniqueInput
  }


  /**
   * imagem_item deleteMany
   */
  export type imagem_itemDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which imagem_items to delete
     */
    where?: imagem_itemWhereInput
  }


  /**
   * imagem_item without action
   */
  export type imagem_itemDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem_item
     */
    select?: imagem_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagem_itemInclude<ExtArgs> | null
  }



  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    cliente_id: number | null
  }

  export type ClienteSumAggregateOutputType = {
    cliente_id: number | null
  }

  export type ClienteMinAggregateOutputType = {
    cliente_id: number | null
    cliente_name: string | null
    cliente_email: string | null
    cliente_cpf: string | null
    cliente_phone: string | null
    cliente_createdAt: Date | null
    cliente_updatedAt: Date | null
  }

  export type ClienteMaxAggregateOutputType = {
    cliente_id: number | null
    cliente_name: string | null
    cliente_email: string | null
    cliente_cpf: string | null
    cliente_phone: string | null
    cliente_createdAt: Date | null
    cliente_updatedAt: Date | null
  }

  export type ClienteCountAggregateOutputType = {
    cliente_id: number
    cliente_name: number
    cliente_email: number
    cliente_cpf: number
    cliente_phone: number
    cliente_createdAt: number
    cliente_updatedAt: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    cliente_id?: true
  }

  export type ClienteSumAggregateInputType = {
    cliente_id?: true
  }

  export type ClienteMinAggregateInputType = {
    cliente_id?: true
    cliente_name?: true
    cliente_email?: true
    cliente_cpf?: true
    cliente_phone?: true
    cliente_createdAt?: true
    cliente_updatedAt?: true
  }

  export type ClienteMaxAggregateInputType = {
    cliente_id?: true
    cliente_name?: true
    cliente_email?: true
    cliente_cpf?: true
    cliente_phone?: true
    cliente_createdAt?: true
    cliente_updatedAt?: true
  }

  export type ClienteCountAggregateInputType = {
    cliente_id?: true
    cliente_name?: true
    cliente_email?: true
    cliente_cpf?: true
    cliente_phone?: true
    cliente_createdAt?: true
    cliente_updatedAt?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    cliente_id: number
    cliente_name: string
    cliente_email: string
    cliente_cpf: string
    cliente_phone: string
    cliente_createdAt: Date
    cliente_updatedAt: Date
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cliente_id?: boolean
    cliente_name?: boolean
    cliente_email?: boolean
    cliente_cpf?: boolean
    cliente_phone?: boolean
    cliente_createdAt?: boolean
    cliente_updatedAt?: boolean
    Pedido?: boolean | Cliente$PedidoArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectScalar = {
    cliente_id?: boolean
    cliente_name?: boolean
    cliente_email?: boolean
    cliente_cpf?: boolean
    cliente_phone?: boolean
    cliente_createdAt?: boolean
    cliente_updatedAt?: boolean
  }

  export type ClienteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Pedido?: boolean | Cliente$PedidoArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ClientePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      Pedido: Prisma.$PedidoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      cliente_id: number
      cliente_name: string
      cliente_email: string
      cliente_cpf: string
      cliente_phone: string
      cliente_createdAt: Date
      cliente_updatedAt: Date
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }


  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ClienteFindManyArgs, 'select' | 'include'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClienteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cliente that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClienteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `cliente_id`
     * const clienteWithCliente_idOnly = await prisma.cliente.findMany({ select: { cliente_id: true } })
     * 
    **/
    findMany<T extends ClienteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
    **/
    create<T extends ClienteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Clientes.
     *     @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const cliente = await prisma.cliente.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClienteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
    **/
    delete<T extends ClienteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClienteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClienteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClienteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
    **/
    upsert<T extends ClienteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Pedido<T extends Cliente$PedidoArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$PedidoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Cliente model
   */ 
  interface ClienteFieldRefs {
    readonly cliente_id: FieldRef<"Cliente", 'Int'>
    readonly cliente_name: FieldRef<"Cliente", 'String'>
    readonly cliente_email: FieldRef<"Cliente", 'String'>
    readonly cliente_cpf: FieldRef<"Cliente", 'String'>
    readonly cliente_phone: FieldRef<"Cliente", 'String'>
    readonly cliente_createdAt: FieldRef<"Cliente", 'DateTime'>
    readonly cliente_updatedAt: FieldRef<"Cliente", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }


  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }


  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }


  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }


  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
  }


  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }


  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
  }


  /**
   * Cliente.Pedido
   */
  export type Cliente$PedidoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    where?: PedidoWhereInput
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    cursor?: PedidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PedidoScalarFieldEnum | PedidoScalarFieldEnum[]
  }


  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
  }



  /**
   * Model Pedido
   */

  export type AggregatePedido = {
    _count: PedidoCountAggregateOutputType | null
    _avg: PedidoAvgAggregateOutputType | null
    _sum: PedidoSumAggregateOutputType | null
    _min: PedidoMinAggregateOutputType | null
    _max: PedidoMaxAggregateOutputType | null
  }

  export type PedidoAvgAggregateOutputType = {
    pedido_id: number | null
    cliente_id: number | null
    pedido_valor_total: number | null
    pedido_frete_total: number | null
    tipo_pagamento_id: number | null
  }

  export type PedidoSumAggregateOutputType = {
    pedido_id: number | null
    cliente_id: number | null
    pedido_valor_total: number | null
    pedido_frete_total: number | null
    tipo_pagamento_id: number | null
  }

  export type PedidoMinAggregateOutputType = {
    pedido_id: number | null
    cliente_id: number | null
    pedido_status: string | null
    pedido_valor_total: number | null
    pedido_frete_total: number | null
    pedido_data: Date | null
    tipo_pagamento_id: number | null
  }

  export type PedidoMaxAggregateOutputType = {
    pedido_id: number | null
    cliente_id: number | null
    pedido_status: string | null
    pedido_valor_total: number | null
    pedido_frete_total: number | null
    pedido_data: Date | null
    tipo_pagamento_id: number | null
  }

  export type PedidoCountAggregateOutputType = {
    pedido_id: number
    cliente_id: number
    pedido_status: number
    pedido_valor_total: number
    pedido_frete_total: number
    pedido_data: number
    tipo_pagamento_id: number
    _all: number
  }


  export type PedidoAvgAggregateInputType = {
    pedido_id?: true
    cliente_id?: true
    pedido_valor_total?: true
    pedido_frete_total?: true
    tipo_pagamento_id?: true
  }

  export type PedidoSumAggregateInputType = {
    pedido_id?: true
    cliente_id?: true
    pedido_valor_total?: true
    pedido_frete_total?: true
    tipo_pagamento_id?: true
  }

  export type PedidoMinAggregateInputType = {
    pedido_id?: true
    cliente_id?: true
    pedido_status?: true
    pedido_valor_total?: true
    pedido_frete_total?: true
    pedido_data?: true
    tipo_pagamento_id?: true
  }

  export type PedidoMaxAggregateInputType = {
    pedido_id?: true
    cliente_id?: true
    pedido_status?: true
    pedido_valor_total?: true
    pedido_frete_total?: true
    pedido_data?: true
    tipo_pagamento_id?: true
  }

  export type PedidoCountAggregateInputType = {
    pedido_id?: true
    cliente_id?: true
    pedido_status?: true
    pedido_valor_total?: true
    pedido_frete_total?: true
    pedido_data?: true
    tipo_pagamento_id?: true
    _all?: true
  }

  export type PedidoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pedido to aggregate.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pedidos
    **/
    _count?: true | PedidoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PedidoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PedidoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PedidoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PedidoMaxAggregateInputType
  }

  export type GetPedidoAggregateType<T extends PedidoAggregateArgs> = {
        [P in keyof T & keyof AggregatePedido]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePedido[P]>
      : GetScalarType<T[P], AggregatePedido[P]>
  }




  export type PedidoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PedidoWhereInput
    orderBy?: PedidoOrderByWithAggregationInput | PedidoOrderByWithAggregationInput[]
    by: PedidoScalarFieldEnum[] | PedidoScalarFieldEnum
    having?: PedidoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PedidoCountAggregateInputType | true
    _avg?: PedidoAvgAggregateInputType
    _sum?: PedidoSumAggregateInputType
    _min?: PedidoMinAggregateInputType
    _max?: PedidoMaxAggregateInputType
  }

  export type PedidoGroupByOutputType = {
    pedido_id: number
    cliente_id: number
    pedido_status: string
    pedido_valor_total: number
    pedido_frete_total: number
    pedido_data: Date
    tipo_pagamento_id: number
    _count: PedidoCountAggregateOutputType | null
    _avg: PedidoAvgAggregateOutputType | null
    _sum: PedidoSumAggregateOutputType | null
    _min: PedidoMinAggregateOutputType | null
    _max: PedidoMaxAggregateOutputType | null
  }

  type GetPedidoGroupByPayload<T extends PedidoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PedidoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PedidoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PedidoGroupByOutputType[P]>
            : GetScalarType<T[P], PedidoGroupByOutputType[P]>
        }
      >
    >


  export type PedidoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pedido_id?: boolean
    cliente_id?: boolean
    pedido_status?: boolean
    pedido_valor_total?: boolean
    pedido_frete_total?: boolean
    pedido_data?: boolean
    tipo_pagamento_id?: boolean
    Cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    Tipo_Pagamento?: boolean | Tipo_PagamentoDefaultArgs<ExtArgs>
    Pedido_item?: boolean | Pedido$Pedido_itemArgs<ExtArgs>
    _count?: boolean | PedidoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pedido"]>

  export type PedidoSelectScalar = {
    pedido_id?: boolean
    cliente_id?: boolean
    pedido_status?: boolean
    pedido_valor_total?: boolean
    pedido_frete_total?: boolean
    pedido_data?: boolean
    tipo_pagamento_id?: boolean
  }

  export type PedidoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    Tipo_Pagamento?: boolean | Tipo_PagamentoDefaultArgs<ExtArgs>
    Pedido_item?: boolean | Pedido$Pedido_itemArgs<ExtArgs>
    _count?: boolean | PedidoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PedidoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Pedido"
    objects: {
      Cliente: Prisma.$ClientePayload<ExtArgs>
      Tipo_Pagamento: Prisma.$Tipo_PagamentoPayload<ExtArgs>
      Pedido_item: Prisma.$Pedido_itemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      pedido_id: number
      cliente_id: number
      pedido_status: string
      pedido_valor_total: number
      pedido_frete_total: number
      pedido_data: Date
      tipo_pagamento_id: number
    }, ExtArgs["result"]["pedido"]>
    composites: {}
  }


  type PedidoGetPayload<S extends boolean | null | undefined | PedidoDefaultArgs> = $Result.GetResult<Prisma.$PedidoPayload, S>

  type PedidoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PedidoFindManyArgs, 'select' | 'include'> & {
      select?: PedidoCountAggregateInputType | true
    }

  export interface PedidoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pedido'], meta: { name: 'Pedido' } }
    /**
     * Find zero or one Pedido that matches the filter.
     * @param {PedidoFindUniqueArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PedidoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PedidoFindUniqueArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pedido that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PedidoFindUniqueOrThrowArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PedidoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PedidoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pedido that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindFirstArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PedidoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PedidoFindFirstArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pedido that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindFirstOrThrowArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PedidoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PedidoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pedidos
     * const pedidos = await prisma.pedido.findMany()
     * 
     * // Get first 10 Pedidos
     * const pedidos = await prisma.pedido.findMany({ take: 10 })
     * 
     * // Only select the `pedido_id`
     * const pedidoWithPedido_idOnly = await prisma.pedido.findMany({ select: { pedido_id: true } })
     * 
    **/
    findMany<T extends PedidoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PedidoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pedido.
     * @param {PedidoCreateArgs} args - Arguments to create a Pedido.
     * @example
     * // Create one Pedido
     * const Pedido = await prisma.pedido.create({
     *   data: {
     *     // ... data to create a Pedido
     *   }
     * })
     * 
    **/
    create<T extends PedidoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PedidoCreateArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pedidos.
     *     @param {PedidoCreateManyArgs} args - Arguments to create many Pedidos.
     *     @example
     *     // Create many Pedidos
     *     const pedido = await prisma.pedido.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PedidoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PedidoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pedido.
     * @param {PedidoDeleteArgs} args - Arguments to delete one Pedido.
     * @example
     * // Delete one Pedido
     * const Pedido = await prisma.pedido.delete({
     *   where: {
     *     // ... filter to delete one Pedido
     *   }
     * })
     * 
    **/
    delete<T extends PedidoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PedidoDeleteArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pedido.
     * @param {PedidoUpdateArgs} args - Arguments to update one Pedido.
     * @example
     * // Update one Pedido
     * const pedido = await prisma.pedido.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PedidoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PedidoUpdateArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pedidos.
     * @param {PedidoDeleteManyArgs} args - Arguments to filter Pedidos to delete.
     * @example
     * // Delete a few Pedidos
     * const { count } = await prisma.pedido.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PedidoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PedidoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pedidos
     * const pedido = await prisma.pedido.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PedidoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PedidoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pedido.
     * @param {PedidoUpsertArgs} args - Arguments to update or create a Pedido.
     * @example
     * // Update or create a Pedido
     * const pedido = await prisma.pedido.upsert({
     *   create: {
     *     // ... data to create a Pedido
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pedido we want to update
     *   }
     * })
    **/
    upsert<T extends PedidoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PedidoUpsertArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoCountArgs} args - Arguments to filter Pedidos to count.
     * @example
     * // Count the number of Pedidos
     * const count = await prisma.pedido.count({
     *   where: {
     *     // ... the filter for the Pedidos we want to count
     *   }
     * })
    **/
    count<T extends PedidoCountArgs>(
      args?: Subset<T, PedidoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PedidoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PedidoAggregateArgs>(args: Subset<T, PedidoAggregateArgs>): Prisma.PrismaPromise<GetPedidoAggregateType<T>>

    /**
     * Group by Pedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PedidoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PedidoGroupByArgs['orderBy'] }
        : { orderBy?: PedidoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PedidoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPedidoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pedido model
   */
  readonly fields: PedidoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pedido.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PedidoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Tipo_Pagamento<T extends Tipo_PagamentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Tipo_PagamentoDefaultArgs<ExtArgs>>): Prisma__Tipo_PagamentoClient<$Result.GetResult<Prisma.$Tipo_PagamentoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Pedido_item<T extends Pedido$Pedido_itemArgs<ExtArgs> = {}>(args?: Subset<T, Pedido$Pedido_itemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Pedido_itemPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pedido model
   */ 
  interface PedidoFieldRefs {
    readonly pedido_id: FieldRef<"Pedido", 'Int'>
    readonly cliente_id: FieldRef<"Pedido", 'Int'>
    readonly pedido_status: FieldRef<"Pedido", 'String'>
    readonly pedido_valor_total: FieldRef<"Pedido", 'Float'>
    readonly pedido_frete_total: FieldRef<"Pedido", 'Float'>
    readonly pedido_data: FieldRef<"Pedido", 'DateTime'>
    readonly tipo_pagamento_id: FieldRef<"Pedido", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Pedido findUnique
   */
  export type PedidoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedido to fetch.
     */
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido findUniqueOrThrow
   */
  export type PedidoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedido to fetch.
     */
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido findFirst
   */
  export type PedidoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedido to fetch.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     */
    distinct?: PedidoScalarFieldEnum | PedidoScalarFieldEnum[]
  }


  /**
   * Pedido findFirstOrThrow
   */
  export type PedidoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedido to fetch.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     */
    distinct?: PedidoScalarFieldEnum | PedidoScalarFieldEnum[]
  }


  /**
   * Pedido findMany
   */
  export type PedidoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedidos to fetch.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pedidos.
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    distinct?: PedidoScalarFieldEnum | PedidoScalarFieldEnum[]
  }


  /**
   * Pedido create
   */
  export type PedidoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * The data needed to create a Pedido.
     */
    data: XOR<PedidoCreateInput, PedidoUncheckedCreateInput>
  }


  /**
   * Pedido createMany
   */
  export type PedidoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pedidos.
     */
    data: PedidoCreateManyInput | PedidoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Pedido update
   */
  export type PedidoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * The data needed to update a Pedido.
     */
    data: XOR<PedidoUpdateInput, PedidoUncheckedUpdateInput>
    /**
     * Choose, which Pedido to update.
     */
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido updateMany
   */
  export type PedidoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pedidos.
     */
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyInput>
    /**
     * Filter which Pedidos to update
     */
    where?: PedidoWhereInput
  }


  /**
   * Pedido upsert
   */
  export type PedidoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * The filter to search for the Pedido to update in case it exists.
     */
    where: PedidoWhereUniqueInput
    /**
     * In case the Pedido found by the `where` argument doesn't exist, create a new Pedido with this data.
     */
    create: XOR<PedidoCreateInput, PedidoUncheckedCreateInput>
    /**
     * In case the Pedido was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PedidoUpdateInput, PedidoUncheckedUpdateInput>
  }


  /**
   * Pedido delete
   */
  export type PedidoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter which Pedido to delete.
     */
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido deleteMany
   */
  export type PedidoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pedidos to delete
     */
    where?: PedidoWhereInput
  }


  /**
   * Pedido.Pedido_item
   */
  export type Pedido$Pedido_itemArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido_item
     */
    select?: Pedido_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Pedido_itemInclude<ExtArgs> | null
    where?: Pedido_itemWhereInput
    orderBy?: Pedido_itemOrderByWithRelationInput | Pedido_itemOrderByWithRelationInput[]
    cursor?: Pedido_itemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Pedido_itemScalarFieldEnum | Pedido_itemScalarFieldEnum[]
  }


  /**
   * Pedido without action
   */
  export type PedidoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
  }



  /**
   * Model Pedido_item
   */

  export type AggregatePedido_item = {
    _count: Pedido_itemCountAggregateOutputType | null
    _avg: Pedido_itemAvgAggregateOutputType | null
    _sum: Pedido_itemSumAggregateOutputType | null
    _min: Pedido_itemMinAggregateOutputType | null
    _max: Pedido_itemMaxAggregateOutputType | null
  }

  export type Pedido_itemAvgAggregateOutputType = {
    Pedido_item_id: number | null
    pedido_id: number | null
    product_id: number | null
    Pedido_item_valor: number | null
    Pedido_item_qtd: number | null
  }

  export type Pedido_itemSumAggregateOutputType = {
    Pedido_item_id: number | null
    pedido_id: number | null
    product_id: number | null
    Pedido_item_valor: number | null
    Pedido_item_qtd: number | null
  }

  export type Pedido_itemMinAggregateOutputType = {
    Pedido_item_id: number | null
    pedido_id: number | null
    product_id: number | null
    Pedido_item_valor: number | null
    Pedido_item_qtd: number | null
  }

  export type Pedido_itemMaxAggregateOutputType = {
    Pedido_item_id: number | null
    pedido_id: number | null
    product_id: number | null
    Pedido_item_valor: number | null
    Pedido_item_qtd: number | null
  }

  export type Pedido_itemCountAggregateOutputType = {
    Pedido_item_id: number
    pedido_id: number
    product_id: number
    Pedido_item_valor: number
    Pedido_item_qtd: number
    _all: number
  }


  export type Pedido_itemAvgAggregateInputType = {
    Pedido_item_id?: true
    pedido_id?: true
    product_id?: true
    Pedido_item_valor?: true
    Pedido_item_qtd?: true
  }

  export type Pedido_itemSumAggregateInputType = {
    Pedido_item_id?: true
    pedido_id?: true
    product_id?: true
    Pedido_item_valor?: true
    Pedido_item_qtd?: true
  }

  export type Pedido_itemMinAggregateInputType = {
    Pedido_item_id?: true
    pedido_id?: true
    product_id?: true
    Pedido_item_valor?: true
    Pedido_item_qtd?: true
  }

  export type Pedido_itemMaxAggregateInputType = {
    Pedido_item_id?: true
    pedido_id?: true
    product_id?: true
    Pedido_item_valor?: true
    Pedido_item_qtd?: true
  }

  export type Pedido_itemCountAggregateInputType = {
    Pedido_item_id?: true
    pedido_id?: true
    product_id?: true
    Pedido_item_valor?: true
    Pedido_item_qtd?: true
    _all?: true
  }

  export type Pedido_itemAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pedido_item to aggregate.
     */
    where?: Pedido_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedido_items to fetch.
     */
    orderBy?: Pedido_itemOrderByWithRelationInput | Pedido_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Pedido_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedido_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedido_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pedido_items
    **/
    _count?: true | Pedido_itemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Pedido_itemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Pedido_itemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Pedido_itemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Pedido_itemMaxAggregateInputType
  }

  export type GetPedido_itemAggregateType<T extends Pedido_itemAggregateArgs> = {
        [P in keyof T & keyof AggregatePedido_item]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePedido_item[P]>
      : GetScalarType<T[P], AggregatePedido_item[P]>
  }




  export type Pedido_itemGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Pedido_itemWhereInput
    orderBy?: Pedido_itemOrderByWithAggregationInput | Pedido_itemOrderByWithAggregationInput[]
    by: Pedido_itemScalarFieldEnum[] | Pedido_itemScalarFieldEnum
    having?: Pedido_itemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Pedido_itemCountAggregateInputType | true
    _avg?: Pedido_itemAvgAggregateInputType
    _sum?: Pedido_itemSumAggregateInputType
    _min?: Pedido_itemMinAggregateInputType
    _max?: Pedido_itemMaxAggregateInputType
  }

  export type Pedido_itemGroupByOutputType = {
    Pedido_item_id: number
    pedido_id: number
    product_id: number
    Pedido_item_valor: number
    Pedido_item_qtd: number
    _count: Pedido_itemCountAggregateOutputType | null
    _avg: Pedido_itemAvgAggregateOutputType | null
    _sum: Pedido_itemSumAggregateOutputType | null
    _min: Pedido_itemMinAggregateOutputType | null
    _max: Pedido_itemMaxAggregateOutputType | null
  }

  type GetPedido_itemGroupByPayload<T extends Pedido_itemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Pedido_itemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Pedido_itemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Pedido_itemGroupByOutputType[P]>
            : GetScalarType<T[P], Pedido_itemGroupByOutputType[P]>
        }
      >
    >


  export type Pedido_itemSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Pedido_item_id?: boolean
    pedido_id?: boolean
    product_id?: boolean
    Pedido_item_valor?: boolean
    Pedido_item_qtd?: boolean
    Pedido?: boolean | PedidoDefaultArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pedido_item"]>

  export type Pedido_itemSelectScalar = {
    Pedido_item_id?: boolean
    pedido_id?: boolean
    product_id?: boolean
    Pedido_item_valor?: boolean
    Pedido_item_qtd?: boolean
  }

  export type Pedido_itemInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Pedido?: boolean | PedidoDefaultArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }


  export type $Pedido_itemPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Pedido_item"
    objects: {
      Pedido: Prisma.$PedidoPayload<ExtArgs>
      Product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      Pedido_item_id: number
      pedido_id: number
      product_id: number
      Pedido_item_valor: number
      Pedido_item_qtd: number
    }, ExtArgs["result"]["pedido_item"]>
    composites: {}
  }


  type Pedido_itemGetPayload<S extends boolean | null | undefined | Pedido_itemDefaultArgs> = $Result.GetResult<Prisma.$Pedido_itemPayload, S>

  type Pedido_itemCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Pedido_itemFindManyArgs, 'select' | 'include'> & {
      select?: Pedido_itemCountAggregateInputType | true
    }

  export interface Pedido_itemDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pedido_item'], meta: { name: 'Pedido_item' } }
    /**
     * Find zero or one Pedido_item that matches the filter.
     * @param {Pedido_itemFindUniqueArgs} args - Arguments to find a Pedido_item
     * @example
     * // Get one Pedido_item
     * const pedido_item = await prisma.pedido_item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Pedido_itemFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Pedido_itemFindUniqueArgs<ExtArgs>>
    ): Prisma__Pedido_itemClient<$Result.GetResult<Prisma.$Pedido_itemPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pedido_item that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Pedido_itemFindUniqueOrThrowArgs} args - Arguments to find a Pedido_item
     * @example
     * // Get one Pedido_item
     * const pedido_item = await prisma.pedido_item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Pedido_itemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Pedido_itemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Pedido_itemClient<$Result.GetResult<Prisma.$Pedido_itemPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pedido_item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Pedido_itemFindFirstArgs} args - Arguments to find a Pedido_item
     * @example
     * // Get one Pedido_item
     * const pedido_item = await prisma.pedido_item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Pedido_itemFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Pedido_itemFindFirstArgs<ExtArgs>>
    ): Prisma__Pedido_itemClient<$Result.GetResult<Prisma.$Pedido_itemPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pedido_item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Pedido_itemFindFirstOrThrowArgs} args - Arguments to find a Pedido_item
     * @example
     * // Get one Pedido_item
     * const pedido_item = await prisma.pedido_item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Pedido_itemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Pedido_itemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Pedido_itemClient<$Result.GetResult<Prisma.$Pedido_itemPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pedido_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Pedido_itemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pedido_items
     * const pedido_items = await prisma.pedido_item.findMany()
     * 
     * // Get first 10 Pedido_items
     * const pedido_items = await prisma.pedido_item.findMany({ take: 10 })
     * 
     * // Only select the `Pedido_item_id`
     * const pedido_itemWithPedido_item_idOnly = await prisma.pedido_item.findMany({ select: { Pedido_item_id: true } })
     * 
    **/
    findMany<T extends Pedido_itemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Pedido_itemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Pedido_itemPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pedido_item.
     * @param {Pedido_itemCreateArgs} args - Arguments to create a Pedido_item.
     * @example
     * // Create one Pedido_item
     * const Pedido_item = await prisma.pedido_item.create({
     *   data: {
     *     // ... data to create a Pedido_item
     *   }
     * })
     * 
    **/
    create<T extends Pedido_itemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Pedido_itemCreateArgs<ExtArgs>>
    ): Prisma__Pedido_itemClient<$Result.GetResult<Prisma.$Pedido_itemPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pedido_items.
     *     @param {Pedido_itemCreateManyArgs} args - Arguments to create many Pedido_items.
     *     @example
     *     // Create many Pedido_items
     *     const pedido_item = await prisma.pedido_item.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Pedido_itemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Pedido_itemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pedido_item.
     * @param {Pedido_itemDeleteArgs} args - Arguments to delete one Pedido_item.
     * @example
     * // Delete one Pedido_item
     * const Pedido_item = await prisma.pedido_item.delete({
     *   where: {
     *     // ... filter to delete one Pedido_item
     *   }
     * })
     * 
    **/
    delete<T extends Pedido_itemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Pedido_itemDeleteArgs<ExtArgs>>
    ): Prisma__Pedido_itemClient<$Result.GetResult<Prisma.$Pedido_itemPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pedido_item.
     * @param {Pedido_itemUpdateArgs} args - Arguments to update one Pedido_item.
     * @example
     * // Update one Pedido_item
     * const pedido_item = await prisma.pedido_item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Pedido_itemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Pedido_itemUpdateArgs<ExtArgs>>
    ): Prisma__Pedido_itemClient<$Result.GetResult<Prisma.$Pedido_itemPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pedido_items.
     * @param {Pedido_itemDeleteManyArgs} args - Arguments to filter Pedido_items to delete.
     * @example
     * // Delete a few Pedido_items
     * const { count } = await prisma.pedido_item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Pedido_itemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Pedido_itemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pedido_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Pedido_itemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pedido_items
     * const pedido_item = await prisma.pedido_item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Pedido_itemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Pedido_itemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pedido_item.
     * @param {Pedido_itemUpsertArgs} args - Arguments to update or create a Pedido_item.
     * @example
     * // Update or create a Pedido_item
     * const pedido_item = await prisma.pedido_item.upsert({
     *   create: {
     *     // ... data to create a Pedido_item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pedido_item we want to update
     *   }
     * })
    **/
    upsert<T extends Pedido_itemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Pedido_itemUpsertArgs<ExtArgs>>
    ): Prisma__Pedido_itemClient<$Result.GetResult<Prisma.$Pedido_itemPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pedido_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Pedido_itemCountArgs} args - Arguments to filter Pedido_items to count.
     * @example
     * // Count the number of Pedido_items
     * const count = await prisma.pedido_item.count({
     *   where: {
     *     // ... the filter for the Pedido_items we want to count
     *   }
     * })
    **/
    count<T extends Pedido_itemCountArgs>(
      args?: Subset<T, Pedido_itemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Pedido_itemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pedido_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Pedido_itemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Pedido_itemAggregateArgs>(args: Subset<T, Pedido_itemAggregateArgs>): Prisma.PrismaPromise<GetPedido_itemAggregateType<T>>

    /**
     * Group by Pedido_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Pedido_itemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Pedido_itemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Pedido_itemGroupByArgs['orderBy'] }
        : { orderBy?: Pedido_itemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Pedido_itemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPedido_itemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pedido_item model
   */
  readonly fields: Pedido_itemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pedido_item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Pedido_itemClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Pedido<T extends PedidoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PedidoDefaultArgs<ExtArgs>>): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pedido_item model
   */ 
  interface Pedido_itemFieldRefs {
    readonly Pedido_item_id: FieldRef<"Pedido_item", 'Int'>
    readonly pedido_id: FieldRef<"Pedido_item", 'Int'>
    readonly product_id: FieldRef<"Pedido_item", 'Int'>
    readonly Pedido_item_valor: FieldRef<"Pedido_item", 'Float'>
    readonly Pedido_item_qtd: FieldRef<"Pedido_item", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Pedido_item findUnique
   */
  export type Pedido_itemFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido_item
     */
    select?: Pedido_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Pedido_itemInclude<ExtArgs> | null
    /**
     * Filter, which Pedido_item to fetch.
     */
    where: Pedido_itemWhereUniqueInput
  }


  /**
   * Pedido_item findUniqueOrThrow
   */
  export type Pedido_itemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido_item
     */
    select?: Pedido_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Pedido_itemInclude<ExtArgs> | null
    /**
     * Filter, which Pedido_item to fetch.
     */
    where: Pedido_itemWhereUniqueInput
  }


  /**
   * Pedido_item findFirst
   */
  export type Pedido_itemFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido_item
     */
    select?: Pedido_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Pedido_itemInclude<ExtArgs> | null
    /**
     * Filter, which Pedido_item to fetch.
     */
    where?: Pedido_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedido_items to fetch.
     */
    orderBy?: Pedido_itemOrderByWithRelationInput | Pedido_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedido_items.
     */
    cursor?: Pedido_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedido_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedido_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedido_items.
     */
    distinct?: Pedido_itemScalarFieldEnum | Pedido_itemScalarFieldEnum[]
  }


  /**
   * Pedido_item findFirstOrThrow
   */
  export type Pedido_itemFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido_item
     */
    select?: Pedido_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Pedido_itemInclude<ExtArgs> | null
    /**
     * Filter, which Pedido_item to fetch.
     */
    where?: Pedido_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedido_items to fetch.
     */
    orderBy?: Pedido_itemOrderByWithRelationInput | Pedido_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedido_items.
     */
    cursor?: Pedido_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedido_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedido_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedido_items.
     */
    distinct?: Pedido_itemScalarFieldEnum | Pedido_itemScalarFieldEnum[]
  }


  /**
   * Pedido_item findMany
   */
  export type Pedido_itemFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido_item
     */
    select?: Pedido_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Pedido_itemInclude<ExtArgs> | null
    /**
     * Filter, which Pedido_items to fetch.
     */
    where?: Pedido_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedido_items to fetch.
     */
    orderBy?: Pedido_itemOrderByWithRelationInput | Pedido_itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pedido_items.
     */
    cursor?: Pedido_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedido_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedido_items.
     */
    skip?: number
    distinct?: Pedido_itemScalarFieldEnum | Pedido_itemScalarFieldEnum[]
  }


  /**
   * Pedido_item create
   */
  export type Pedido_itemCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido_item
     */
    select?: Pedido_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Pedido_itemInclude<ExtArgs> | null
    /**
     * The data needed to create a Pedido_item.
     */
    data: XOR<Pedido_itemCreateInput, Pedido_itemUncheckedCreateInput>
  }


  /**
   * Pedido_item createMany
   */
  export type Pedido_itemCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pedido_items.
     */
    data: Pedido_itemCreateManyInput | Pedido_itemCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Pedido_item update
   */
  export type Pedido_itemUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido_item
     */
    select?: Pedido_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Pedido_itemInclude<ExtArgs> | null
    /**
     * The data needed to update a Pedido_item.
     */
    data: XOR<Pedido_itemUpdateInput, Pedido_itemUncheckedUpdateInput>
    /**
     * Choose, which Pedido_item to update.
     */
    where: Pedido_itemWhereUniqueInput
  }


  /**
   * Pedido_item updateMany
   */
  export type Pedido_itemUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pedido_items.
     */
    data: XOR<Pedido_itemUpdateManyMutationInput, Pedido_itemUncheckedUpdateManyInput>
    /**
     * Filter which Pedido_items to update
     */
    where?: Pedido_itemWhereInput
  }


  /**
   * Pedido_item upsert
   */
  export type Pedido_itemUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido_item
     */
    select?: Pedido_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Pedido_itemInclude<ExtArgs> | null
    /**
     * The filter to search for the Pedido_item to update in case it exists.
     */
    where: Pedido_itemWhereUniqueInput
    /**
     * In case the Pedido_item found by the `where` argument doesn't exist, create a new Pedido_item with this data.
     */
    create: XOR<Pedido_itemCreateInput, Pedido_itemUncheckedCreateInput>
    /**
     * In case the Pedido_item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Pedido_itemUpdateInput, Pedido_itemUncheckedUpdateInput>
  }


  /**
   * Pedido_item delete
   */
  export type Pedido_itemDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido_item
     */
    select?: Pedido_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Pedido_itemInclude<ExtArgs> | null
    /**
     * Filter which Pedido_item to delete.
     */
    where: Pedido_itemWhereUniqueInput
  }


  /**
   * Pedido_item deleteMany
   */
  export type Pedido_itemDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pedido_items to delete
     */
    where?: Pedido_itemWhereInput
  }


  /**
   * Pedido_item without action
   */
  export type Pedido_itemDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido_item
     */
    select?: Pedido_itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Pedido_itemInclude<ExtArgs> | null
  }



  /**
   * Model Tipo_Pagamento
   */

  export type AggregateTipo_Pagamento = {
    _count: Tipo_PagamentoCountAggregateOutputType | null
    _avg: Tipo_PagamentoAvgAggregateOutputType | null
    _sum: Tipo_PagamentoSumAggregateOutputType | null
    _min: Tipo_PagamentoMinAggregateOutputType | null
    _max: Tipo_PagamentoMaxAggregateOutputType | null
  }

  export type Tipo_PagamentoAvgAggregateOutputType = {
    tipo_pagamento_id: number | null
  }

  export type Tipo_PagamentoSumAggregateOutputType = {
    tipo_pagamento_id: number | null
  }

  export type Tipo_PagamentoMinAggregateOutputType = {
    tipo_pagamento_id: number | null
    tipo_pagamento_name: string | null
    tipo_pagamento_createdAt: Date | null
    tipo_pagamento_updatedAt: Date | null
  }

  export type Tipo_PagamentoMaxAggregateOutputType = {
    tipo_pagamento_id: number | null
    tipo_pagamento_name: string | null
    tipo_pagamento_createdAt: Date | null
    tipo_pagamento_updatedAt: Date | null
  }

  export type Tipo_PagamentoCountAggregateOutputType = {
    tipo_pagamento_id: number
    tipo_pagamento_name: number
    tipo_pagamento_createdAt: number
    tipo_pagamento_updatedAt: number
    _all: number
  }


  export type Tipo_PagamentoAvgAggregateInputType = {
    tipo_pagamento_id?: true
  }

  export type Tipo_PagamentoSumAggregateInputType = {
    tipo_pagamento_id?: true
  }

  export type Tipo_PagamentoMinAggregateInputType = {
    tipo_pagamento_id?: true
    tipo_pagamento_name?: true
    tipo_pagamento_createdAt?: true
    tipo_pagamento_updatedAt?: true
  }

  export type Tipo_PagamentoMaxAggregateInputType = {
    tipo_pagamento_id?: true
    tipo_pagamento_name?: true
    tipo_pagamento_createdAt?: true
    tipo_pagamento_updatedAt?: true
  }

  export type Tipo_PagamentoCountAggregateInputType = {
    tipo_pagamento_id?: true
    tipo_pagamento_name?: true
    tipo_pagamento_createdAt?: true
    tipo_pagamento_updatedAt?: true
    _all?: true
  }

  export type Tipo_PagamentoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tipo_Pagamento to aggregate.
     */
    where?: Tipo_PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tipo_Pagamentos to fetch.
     */
    orderBy?: Tipo_PagamentoOrderByWithRelationInput | Tipo_PagamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Tipo_PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tipo_Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tipo_Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tipo_Pagamentos
    **/
    _count?: true | Tipo_PagamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tipo_PagamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tipo_PagamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tipo_PagamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tipo_PagamentoMaxAggregateInputType
  }

  export type GetTipo_PagamentoAggregateType<T extends Tipo_PagamentoAggregateArgs> = {
        [P in keyof T & keyof AggregateTipo_Pagamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipo_Pagamento[P]>
      : GetScalarType<T[P], AggregateTipo_Pagamento[P]>
  }




  export type Tipo_PagamentoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Tipo_PagamentoWhereInput
    orderBy?: Tipo_PagamentoOrderByWithAggregationInput | Tipo_PagamentoOrderByWithAggregationInput[]
    by: Tipo_PagamentoScalarFieldEnum[] | Tipo_PagamentoScalarFieldEnum
    having?: Tipo_PagamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tipo_PagamentoCountAggregateInputType | true
    _avg?: Tipo_PagamentoAvgAggregateInputType
    _sum?: Tipo_PagamentoSumAggregateInputType
    _min?: Tipo_PagamentoMinAggregateInputType
    _max?: Tipo_PagamentoMaxAggregateInputType
  }

  export type Tipo_PagamentoGroupByOutputType = {
    tipo_pagamento_id: number
    tipo_pagamento_name: string
    tipo_pagamento_createdAt: Date
    tipo_pagamento_updatedAt: Date
    _count: Tipo_PagamentoCountAggregateOutputType | null
    _avg: Tipo_PagamentoAvgAggregateOutputType | null
    _sum: Tipo_PagamentoSumAggregateOutputType | null
    _min: Tipo_PagamentoMinAggregateOutputType | null
    _max: Tipo_PagamentoMaxAggregateOutputType | null
  }

  type GetTipo_PagamentoGroupByPayload<T extends Tipo_PagamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Tipo_PagamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tipo_PagamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tipo_PagamentoGroupByOutputType[P]>
            : GetScalarType<T[P], Tipo_PagamentoGroupByOutputType[P]>
        }
      >
    >


  export type Tipo_PagamentoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tipo_pagamento_id?: boolean
    tipo_pagamento_name?: boolean
    tipo_pagamento_createdAt?: boolean
    tipo_pagamento_updatedAt?: boolean
    Pedido?: boolean | Tipo_Pagamento$PedidoArgs<ExtArgs>
    _count?: boolean | Tipo_PagamentoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tipo_Pagamento"]>

  export type Tipo_PagamentoSelectScalar = {
    tipo_pagamento_id?: boolean
    tipo_pagamento_name?: boolean
    tipo_pagamento_createdAt?: boolean
    tipo_pagamento_updatedAt?: boolean
  }

  export type Tipo_PagamentoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Pedido?: boolean | Tipo_Pagamento$PedidoArgs<ExtArgs>
    _count?: boolean | Tipo_PagamentoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $Tipo_PagamentoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Tipo_Pagamento"
    objects: {
      Pedido: Prisma.$PedidoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      tipo_pagamento_id: number
      tipo_pagamento_name: string
      tipo_pagamento_createdAt: Date
      tipo_pagamento_updatedAt: Date
    }, ExtArgs["result"]["tipo_Pagamento"]>
    composites: {}
  }


  type Tipo_PagamentoGetPayload<S extends boolean | null | undefined | Tipo_PagamentoDefaultArgs> = $Result.GetResult<Prisma.$Tipo_PagamentoPayload, S>

  type Tipo_PagamentoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Tipo_PagamentoFindManyArgs, 'select' | 'include'> & {
      select?: Tipo_PagamentoCountAggregateInputType | true
    }

  export interface Tipo_PagamentoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tipo_Pagamento'], meta: { name: 'Tipo_Pagamento' } }
    /**
     * Find zero or one Tipo_Pagamento that matches the filter.
     * @param {Tipo_PagamentoFindUniqueArgs} args - Arguments to find a Tipo_Pagamento
     * @example
     * // Get one Tipo_Pagamento
     * const tipo_Pagamento = await prisma.tipo_Pagamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Tipo_PagamentoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Tipo_PagamentoFindUniqueArgs<ExtArgs>>
    ): Prisma__Tipo_PagamentoClient<$Result.GetResult<Prisma.$Tipo_PagamentoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tipo_Pagamento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Tipo_PagamentoFindUniqueOrThrowArgs} args - Arguments to find a Tipo_Pagamento
     * @example
     * // Get one Tipo_Pagamento
     * const tipo_Pagamento = await prisma.tipo_Pagamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Tipo_PagamentoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Tipo_PagamentoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Tipo_PagamentoClient<$Result.GetResult<Prisma.$Tipo_PagamentoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tipo_Pagamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tipo_PagamentoFindFirstArgs} args - Arguments to find a Tipo_Pagamento
     * @example
     * // Get one Tipo_Pagamento
     * const tipo_Pagamento = await prisma.tipo_Pagamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Tipo_PagamentoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Tipo_PagamentoFindFirstArgs<ExtArgs>>
    ): Prisma__Tipo_PagamentoClient<$Result.GetResult<Prisma.$Tipo_PagamentoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tipo_Pagamento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tipo_PagamentoFindFirstOrThrowArgs} args - Arguments to find a Tipo_Pagamento
     * @example
     * // Get one Tipo_Pagamento
     * const tipo_Pagamento = await prisma.tipo_Pagamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Tipo_PagamentoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Tipo_PagamentoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Tipo_PagamentoClient<$Result.GetResult<Prisma.$Tipo_PagamentoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tipo_Pagamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tipo_PagamentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tipo_Pagamentos
     * const tipo_Pagamentos = await prisma.tipo_Pagamento.findMany()
     * 
     * // Get first 10 Tipo_Pagamentos
     * const tipo_Pagamentos = await prisma.tipo_Pagamento.findMany({ take: 10 })
     * 
     * // Only select the `tipo_pagamento_id`
     * const tipo_PagamentoWithTipo_pagamento_idOnly = await prisma.tipo_Pagamento.findMany({ select: { tipo_pagamento_id: true } })
     * 
    **/
    findMany<T extends Tipo_PagamentoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Tipo_PagamentoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Tipo_PagamentoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tipo_Pagamento.
     * @param {Tipo_PagamentoCreateArgs} args - Arguments to create a Tipo_Pagamento.
     * @example
     * // Create one Tipo_Pagamento
     * const Tipo_Pagamento = await prisma.tipo_Pagamento.create({
     *   data: {
     *     // ... data to create a Tipo_Pagamento
     *   }
     * })
     * 
    **/
    create<T extends Tipo_PagamentoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Tipo_PagamentoCreateArgs<ExtArgs>>
    ): Prisma__Tipo_PagamentoClient<$Result.GetResult<Prisma.$Tipo_PagamentoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tipo_Pagamentos.
     *     @param {Tipo_PagamentoCreateManyArgs} args - Arguments to create many Tipo_Pagamentos.
     *     @example
     *     // Create many Tipo_Pagamentos
     *     const tipo_Pagamento = await prisma.tipo_Pagamento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Tipo_PagamentoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Tipo_PagamentoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tipo_Pagamento.
     * @param {Tipo_PagamentoDeleteArgs} args - Arguments to delete one Tipo_Pagamento.
     * @example
     * // Delete one Tipo_Pagamento
     * const Tipo_Pagamento = await prisma.tipo_Pagamento.delete({
     *   where: {
     *     // ... filter to delete one Tipo_Pagamento
     *   }
     * })
     * 
    **/
    delete<T extends Tipo_PagamentoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Tipo_PagamentoDeleteArgs<ExtArgs>>
    ): Prisma__Tipo_PagamentoClient<$Result.GetResult<Prisma.$Tipo_PagamentoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tipo_Pagamento.
     * @param {Tipo_PagamentoUpdateArgs} args - Arguments to update one Tipo_Pagamento.
     * @example
     * // Update one Tipo_Pagamento
     * const tipo_Pagamento = await prisma.tipo_Pagamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Tipo_PagamentoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Tipo_PagamentoUpdateArgs<ExtArgs>>
    ): Prisma__Tipo_PagamentoClient<$Result.GetResult<Prisma.$Tipo_PagamentoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tipo_Pagamentos.
     * @param {Tipo_PagamentoDeleteManyArgs} args - Arguments to filter Tipo_Pagamentos to delete.
     * @example
     * // Delete a few Tipo_Pagamentos
     * const { count } = await prisma.tipo_Pagamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Tipo_PagamentoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Tipo_PagamentoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tipo_Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tipo_PagamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tipo_Pagamentos
     * const tipo_Pagamento = await prisma.tipo_Pagamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Tipo_PagamentoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Tipo_PagamentoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tipo_Pagamento.
     * @param {Tipo_PagamentoUpsertArgs} args - Arguments to update or create a Tipo_Pagamento.
     * @example
     * // Update or create a Tipo_Pagamento
     * const tipo_Pagamento = await prisma.tipo_Pagamento.upsert({
     *   create: {
     *     // ... data to create a Tipo_Pagamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tipo_Pagamento we want to update
     *   }
     * })
    **/
    upsert<T extends Tipo_PagamentoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Tipo_PagamentoUpsertArgs<ExtArgs>>
    ): Prisma__Tipo_PagamentoClient<$Result.GetResult<Prisma.$Tipo_PagamentoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tipo_Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tipo_PagamentoCountArgs} args - Arguments to filter Tipo_Pagamentos to count.
     * @example
     * // Count the number of Tipo_Pagamentos
     * const count = await prisma.tipo_Pagamento.count({
     *   where: {
     *     // ... the filter for the Tipo_Pagamentos we want to count
     *   }
     * })
    **/
    count<T extends Tipo_PagamentoCountArgs>(
      args?: Subset<T, Tipo_PagamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tipo_PagamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tipo_Pagamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tipo_PagamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tipo_PagamentoAggregateArgs>(args: Subset<T, Tipo_PagamentoAggregateArgs>): Prisma.PrismaPromise<GetTipo_PagamentoAggregateType<T>>

    /**
     * Group by Tipo_Pagamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tipo_PagamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tipo_PagamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tipo_PagamentoGroupByArgs['orderBy'] }
        : { orderBy?: Tipo_PagamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tipo_PagamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipo_PagamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tipo_Pagamento model
   */
  readonly fields: Tipo_PagamentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tipo_Pagamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Tipo_PagamentoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Pedido<T extends Tipo_Pagamento$PedidoArgs<ExtArgs> = {}>(args?: Subset<T, Tipo_Pagamento$PedidoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Tipo_Pagamento model
   */ 
  interface Tipo_PagamentoFieldRefs {
    readonly tipo_pagamento_id: FieldRef<"Tipo_Pagamento", 'Int'>
    readonly tipo_pagamento_name: FieldRef<"Tipo_Pagamento", 'String'>
    readonly tipo_pagamento_createdAt: FieldRef<"Tipo_Pagamento", 'DateTime'>
    readonly tipo_pagamento_updatedAt: FieldRef<"Tipo_Pagamento", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Tipo_Pagamento findUnique
   */
  export type Tipo_PagamentoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tipo_Pagamento
     */
    select?: Tipo_PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Tipo_PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Tipo_Pagamento to fetch.
     */
    where: Tipo_PagamentoWhereUniqueInput
  }


  /**
   * Tipo_Pagamento findUniqueOrThrow
   */
  export type Tipo_PagamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tipo_Pagamento
     */
    select?: Tipo_PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Tipo_PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Tipo_Pagamento to fetch.
     */
    where: Tipo_PagamentoWhereUniqueInput
  }


  /**
   * Tipo_Pagamento findFirst
   */
  export type Tipo_PagamentoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tipo_Pagamento
     */
    select?: Tipo_PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Tipo_PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Tipo_Pagamento to fetch.
     */
    where?: Tipo_PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tipo_Pagamentos to fetch.
     */
    orderBy?: Tipo_PagamentoOrderByWithRelationInput | Tipo_PagamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tipo_Pagamentos.
     */
    cursor?: Tipo_PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tipo_Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tipo_Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tipo_Pagamentos.
     */
    distinct?: Tipo_PagamentoScalarFieldEnum | Tipo_PagamentoScalarFieldEnum[]
  }


  /**
   * Tipo_Pagamento findFirstOrThrow
   */
  export type Tipo_PagamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tipo_Pagamento
     */
    select?: Tipo_PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Tipo_PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Tipo_Pagamento to fetch.
     */
    where?: Tipo_PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tipo_Pagamentos to fetch.
     */
    orderBy?: Tipo_PagamentoOrderByWithRelationInput | Tipo_PagamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tipo_Pagamentos.
     */
    cursor?: Tipo_PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tipo_Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tipo_Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tipo_Pagamentos.
     */
    distinct?: Tipo_PagamentoScalarFieldEnum | Tipo_PagamentoScalarFieldEnum[]
  }


  /**
   * Tipo_Pagamento findMany
   */
  export type Tipo_PagamentoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tipo_Pagamento
     */
    select?: Tipo_PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Tipo_PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Tipo_Pagamentos to fetch.
     */
    where?: Tipo_PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tipo_Pagamentos to fetch.
     */
    orderBy?: Tipo_PagamentoOrderByWithRelationInput | Tipo_PagamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tipo_Pagamentos.
     */
    cursor?: Tipo_PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tipo_Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tipo_Pagamentos.
     */
    skip?: number
    distinct?: Tipo_PagamentoScalarFieldEnum | Tipo_PagamentoScalarFieldEnum[]
  }


  /**
   * Tipo_Pagamento create
   */
  export type Tipo_PagamentoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tipo_Pagamento
     */
    select?: Tipo_PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Tipo_PagamentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Tipo_Pagamento.
     */
    data: XOR<Tipo_PagamentoCreateInput, Tipo_PagamentoUncheckedCreateInput>
  }


  /**
   * Tipo_Pagamento createMany
   */
  export type Tipo_PagamentoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tipo_Pagamentos.
     */
    data: Tipo_PagamentoCreateManyInput | Tipo_PagamentoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Tipo_Pagamento update
   */
  export type Tipo_PagamentoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tipo_Pagamento
     */
    select?: Tipo_PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Tipo_PagamentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Tipo_Pagamento.
     */
    data: XOR<Tipo_PagamentoUpdateInput, Tipo_PagamentoUncheckedUpdateInput>
    /**
     * Choose, which Tipo_Pagamento to update.
     */
    where: Tipo_PagamentoWhereUniqueInput
  }


  /**
   * Tipo_Pagamento updateMany
   */
  export type Tipo_PagamentoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tipo_Pagamentos.
     */
    data: XOR<Tipo_PagamentoUpdateManyMutationInput, Tipo_PagamentoUncheckedUpdateManyInput>
    /**
     * Filter which Tipo_Pagamentos to update
     */
    where?: Tipo_PagamentoWhereInput
  }


  /**
   * Tipo_Pagamento upsert
   */
  export type Tipo_PagamentoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tipo_Pagamento
     */
    select?: Tipo_PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Tipo_PagamentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Tipo_Pagamento to update in case it exists.
     */
    where: Tipo_PagamentoWhereUniqueInput
    /**
     * In case the Tipo_Pagamento found by the `where` argument doesn't exist, create a new Tipo_Pagamento with this data.
     */
    create: XOR<Tipo_PagamentoCreateInput, Tipo_PagamentoUncheckedCreateInput>
    /**
     * In case the Tipo_Pagamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Tipo_PagamentoUpdateInput, Tipo_PagamentoUncheckedUpdateInput>
  }


  /**
   * Tipo_Pagamento delete
   */
  export type Tipo_PagamentoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tipo_Pagamento
     */
    select?: Tipo_PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Tipo_PagamentoInclude<ExtArgs> | null
    /**
     * Filter which Tipo_Pagamento to delete.
     */
    where: Tipo_PagamentoWhereUniqueInput
  }


  /**
   * Tipo_Pagamento deleteMany
   */
  export type Tipo_PagamentoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tipo_Pagamentos to delete
     */
    where?: Tipo_PagamentoWhereInput
  }


  /**
   * Tipo_Pagamento.Pedido
   */
  export type Tipo_Pagamento$PedidoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    where?: PedidoWhereInput
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    cursor?: PedidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PedidoScalarFieldEnum | PedidoScalarFieldEnum[]
  }


  /**
   * Tipo_Pagamento without action
   */
  export type Tipo_PagamentoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tipo_Pagamento
     */
    select?: Tipo_PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Tipo_PagamentoInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    user_name: 'user_name',
    user_email: 'user_email',
    user_cpf: 'user_cpf',
    user_password: 'user_password',
    user_phone: 'user_phone',
    user_typeuser: 'user_typeuser',
    user_createdAt: 'user_createdAt',
    user_updatedAt: 'user_updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    product_id: 'product_id',
    product_sub_id: 'product_sub_id',
    product_nome: 'product_nome',
    product_valor: 'product_valor',
    product_imagem_id: 'product_imagem_id',
    product_marca: 'product_marca',
    product_descricao: 'product_descricao',
    user_createdAt: 'user_createdAt',
    user_updatedAt: 'user_updatedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const CategoriaScalarFieldEnum: {
    categoria_id: 'categoria_id',
    categoria_nome: 'categoria_nome',
    categoria_createdAt: 'categoria_createdAt',
    categoria_updatedAt: 'categoria_updatedAt'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const Sub_categoriaScalarFieldEnum: {
    sub_categoria_id: 'sub_categoria_id',
    categoria_id: 'categoria_id',
    sub_categoria_nome: 'sub_categoria_nome',
    sub_categoria_createdAt: 'sub_categoria_createdAt',
    sub_categoria_updatedAt: 'sub_categoria_updatedAt'
  };

  export type Sub_categoriaScalarFieldEnum = (typeof Sub_categoriaScalarFieldEnum)[keyof typeof Sub_categoriaScalarFieldEnum]


  export const ImagemScalarFieldEnum: {
    imagem_id: 'imagem_id',
    imagem_path: 'imagem_path',
    categoria_createdAt: 'categoria_createdAt',
    categoria_updatedAt: 'categoria_updatedAt'
  };

  export type ImagemScalarFieldEnum = (typeof ImagemScalarFieldEnum)[keyof typeof ImagemScalarFieldEnum]


  export const Imagem_itemScalarFieldEnum: {
    imagem_item_id: 'imagem_item_id',
    imagem_id: 'imagem_id',
    product_id: 'product_id',
    sub_categoria_nome: 'sub_categoria_nome',
    sub_categoria_createdAt: 'sub_categoria_createdAt',
    sub_categoria_updatedAt: 'sub_categoria_updatedAt'
  };

  export type Imagem_itemScalarFieldEnum = (typeof Imagem_itemScalarFieldEnum)[keyof typeof Imagem_itemScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    cliente_id: 'cliente_id',
    cliente_name: 'cliente_name',
    cliente_email: 'cliente_email',
    cliente_cpf: 'cliente_cpf',
    cliente_phone: 'cliente_phone',
    cliente_createdAt: 'cliente_createdAt',
    cliente_updatedAt: 'cliente_updatedAt'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const PedidoScalarFieldEnum: {
    pedido_id: 'pedido_id',
    cliente_id: 'cliente_id',
    pedido_status: 'pedido_status',
    pedido_valor_total: 'pedido_valor_total',
    pedido_frete_total: 'pedido_frete_total',
    pedido_data: 'pedido_data',
    tipo_pagamento_id: 'tipo_pagamento_id'
  };

  export type PedidoScalarFieldEnum = (typeof PedidoScalarFieldEnum)[keyof typeof PedidoScalarFieldEnum]


  export const Pedido_itemScalarFieldEnum: {
    Pedido_item_id: 'Pedido_item_id',
    pedido_id: 'pedido_id',
    product_id: 'product_id',
    Pedido_item_valor: 'Pedido_item_valor',
    Pedido_item_qtd: 'Pedido_item_qtd'
  };

  export type Pedido_itemScalarFieldEnum = (typeof Pedido_itemScalarFieldEnum)[keyof typeof Pedido_itemScalarFieldEnum]


  export const Tipo_PagamentoScalarFieldEnum: {
    tipo_pagamento_id: 'tipo_pagamento_id',
    tipo_pagamento_name: 'tipo_pagamento_name',
    tipo_pagamento_createdAt: 'tipo_pagamento_createdAt',
    tipo_pagamento_updatedAt: 'tipo_pagamento_updatedAt'
  };

  export type Tipo_PagamentoScalarFieldEnum = (typeof Tipo_PagamentoScalarFieldEnum)[keyof typeof Tipo_PagamentoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_id?: IntFilter<"User"> | number
    user_name?: StringFilter<"User"> | string
    user_email?: StringFilter<"User"> | string
    user_cpf?: StringFilter<"User"> | string
    user_password?: StringFilter<"User"> | string
    user_phone?: StringFilter<"User"> | string
    user_typeuser?: IntFilter<"User"> | number
    user_createdAt?: DateTimeFilter<"User"> | Date | string
    user_updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    user_email?: SortOrder
    user_cpf?: SortOrder
    user_password?: SortOrder
    user_phone?: SortOrder
    user_typeuser?: SortOrder
    user_createdAt?: SortOrder
    user_updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    user_email?: string
    user_cpf?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_name?: StringFilter<"User"> | string
    user_password?: StringFilter<"User"> | string
    user_phone?: StringFilter<"User"> | string
    user_typeuser?: IntFilter<"User"> | number
    user_createdAt?: DateTimeFilter<"User"> | Date | string
    user_updatedAt?: DateTimeFilter<"User"> | Date | string
  }, "user_id" | "user_email" | "user_cpf">

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    user_email?: SortOrder
    user_cpf?: SortOrder
    user_password?: SortOrder
    user_phone?: SortOrder
    user_typeuser?: SortOrder
    user_createdAt?: SortOrder
    user_updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"User"> | number
    user_name?: StringWithAggregatesFilter<"User"> | string
    user_email?: StringWithAggregatesFilter<"User"> | string
    user_cpf?: StringWithAggregatesFilter<"User"> | string
    user_password?: StringWithAggregatesFilter<"User"> | string
    user_phone?: StringWithAggregatesFilter<"User"> | string
    user_typeuser?: IntWithAggregatesFilter<"User"> | number
    user_createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    user_updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    product_id?: IntFilter<"Product"> | number
    product_sub_id?: IntFilter<"Product"> | number
    product_nome?: StringFilter<"Product"> | string
    product_valor?: FloatFilter<"Product"> | number
    product_imagem_id?: IntFilter<"Product"> | number
    product_marca?: IntFilter<"Product"> | number
    product_descricao?: StringFilter<"Product"> | string
    user_createdAt?: DateTimeFilter<"Product"> | Date | string
    user_updatedAt?: DateTimeFilter<"Product"> | Date | string
    sub_categoria?: XOR<Sub_categoriaRelationFilter, sub_categoriaWhereInput>
    Pedido_item?: Pedido_itemListRelationFilter
    imagem_item?: Imagem_itemListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    product_id?: SortOrder
    product_sub_id?: SortOrder
    product_nome?: SortOrder
    product_valor?: SortOrder
    product_imagem_id?: SortOrder
    product_marca?: SortOrder
    product_descricao?: SortOrder
    user_createdAt?: SortOrder
    user_updatedAt?: SortOrder
    sub_categoria?: sub_categoriaOrderByWithRelationInput
    Pedido_item?: Pedido_itemOrderByRelationAggregateInput
    imagem_item?: imagem_itemOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    product_id?: number
    product_nome?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    product_sub_id?: IntFilter<"Product"> | number
    product_valor?: FloatFilter<"Product"> | number
    product_imagem_id?: IntFilter<"Product"> | number
    product_marca?: IntFilter<"Product"> | number
    product_descricao?: StringFilter<"Product"> | string
    user_createdAt?: DateTimeFilter<"Product"> | Date | string
    user_updatedAt?: DateTimeFilter<"Product"> | Date | string
    sub_categoria?: XOR<Sub_categoriaRelationFilter, sub_categoriaWhereInput>
    Pedido_item?: Pedido_itemListRelationFilter
    imagem_item?: Imagem_itemListRelationFilter
  }, "product_id" | "product_nome">

  export type ProductOrderByWithAggregationInput = {
    product_id?: SortOrder
    product_sub_id?: SortOrder
    product_nome?: SortOrder
    product_valor?: SortOrder
    product_imagem_id?: SortOrder
    product_marca?: SortOrder
    product_descricao?: SortOrder
    user_createdAt?: SortOrder
    user_updatedAt?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    product_id?: IntWithAggregatesFilter<"Product"> | number
    product_sub_id?: IntWithAggregatesFilter<"Product"> | number
    product_nome?: StringWithAggregatesFilter<"Product"> | string
    product_valor?: FloatWithAggregatesFilter<"Product"> | number
    product_imagem_id?: IntWithAggregatesFilter<"Product"> | number
    product_marca?: IntWithAggregatesFilter<"Product"> | number
    product_descricao?: StringWithAggregatesFilter<"Product"> | string
    user_createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    user_updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
  }

  export type categoriaWhereInput = {
    AND?: categoriaWhereInput | categoriaWhereInput[]
    OR?: categoriaWhereInput[]
    NOT?: categoriaWhereInput | categoriaWhereInput[]
    categoria_id?: IntFilter<"categoria"> | number
    categoria_nome?: StringFilter<"categoria"> | string
    categoria_createdAt?: DateTimeFilter<"categoria"> | Date | string
    categoria_updatedAt?: DateTimeFilter<"categoria"> | Date | string
    sub_categorias?: Sub_categoriaListRelationFilter
  }

  export type categoriaOrderByWithRelationInput = {
    categoria_id?: SortOrder
    categoria_nome?: SortOrder
    categoria_createdAt?: SortOrder
    categoria_updatedAt?: SortOrder
    sub_categorias?: sub_categoriaOrderByRelationAggregateInput
  }

  export type categoriaWhereUniqueInput = Prisma.AtLeast<{
    categoria_id?: number
    categoria_nome?: string
    AND?: categoriaWhereInput | categoriaWhereInput[]
    OR?: categoriaWhereInput[]
    NOT?: categoriaWhereInput | categoriaWhereInput[]
    categoria_createdAt?: DateTimeFilter<"categoria"> | Date | string
    categoria_updatedAt?: DateTimeFilter<"categoria"> | Date | string
    sub_categorias?: Sub_categoriaListRelationFilter
  }, "categoria_id" | "categoria_nome">

  export type categoriaOrderByWithAggregationInput = {
    categoria_id?: SortOrder
    categoria_nome?: SortOrder
    categoria_createdAt?: SortOrder
    categoria_updatedAt?: SortOrder
    _count?: categoriaCountOrderByAggregateInput
    _avg?: categoriaAvgOrderByAggregateInput
    _max?: categoriaMaxOrderByAggregateInput
    _min?: categoriaMinOrderByAggregateInput
    _sum?: categoriaSumOrderByAggregateInput
  }

  export type categoriaScalarWhereWithAggregatesInput = {
    AND?: categoriaScalarWhereWithAggregatesInput | categoriaScalarWhereWithAggregatesInput[]
    OR?: categoriaScalarWhereWithAggregatesInput[]
    NOT?: categoriaScalarWhereWithAggregatesInput | categoriaScalarWhereWithAggregatesInput[]
    categoria_id?: IntWithAggregatesFilter<"categoria"> | number
    categoria_nome?: StringWithAggregatesFilter<"categoria"> | string
    categoria_createdAt?: DateTimeWithAggregatesFilter<"categoria"> | Date | string
    categoria_updatedAt?: DateTimeWithAggregatesFilter<"categoria"> | Date | string
  }

  export type sub_categoriaWhereInput = {
    AND?: sub_categoriaWhereInput | sub_categoriaWhereInput[]
    OR?: sub_categoriaWhereInput[]
    NOT?: sub_categoriaWhereInput | sub_categoriaWhereInput[]
    sub_categoria_id?: IntFilter<"sub_categoria"> | number
    categoria_id?: IntFilter<"sub_categoria"> | number
    sub_categoria_nome?: StringFilter<"sub_categoria"> | string
    sub_categoria_createdAt?: DateTimeFilter<"sub_categoria"> | Date | string
    sub_categoria_updatedAt?: DateTimeFilter<"sub_categoria"> | Date | string
    categoria?: XOR<CategoriaRelationFilter, categoriaWhereInput>
    produtos?: ProductListRelationFilter
  }

  export type sub_categoriaOrderByWithRelationInput = {
    sub_categoria_id?: SortOrder
    categoria_id?: SortOrder
    sub_categoria_nome?: SortOrder
    sub_categoria_createdAt?: SortOrder
    sub_categoria_updatedAt?: SortOrder
    categoria?: categoriaOrderByWithRelationInput
    produtos?: ProductOrderByRelationAggregateInput
  }

  export type sub_categoriaWhereUniqueInput = Prisma.AtLeast<{
    sub_categoria_id?: number
    sub_categoria_nome?: string
    AND?: sub_categoriaWhereInput | sub_categoriaWhereInput[]
    OR?: sub_categoriaWhereInput[]
    NOT?: sub_categoriaWhereInput | sub_categoriaWhereInput[]
    categoria_id?: IntFilter<"sub_categoria"> | number
    sub_categoria_createdAt?: DateTimeFilter<"sub_categoria"> | Date | string
    sub_categoria_updatedAt?: DateTimeFilter<"sub_categoria"> | Date | string
    categoria?: XOR<CategoriaRelationFilter, categoriaWhereInput>
    produtos?: ProductListRelationFilter
  }, "sub_categoria_id" | "sub_categoria_nome">

  export type sub_categoriaOrderByWithAggregationInput = {
    sub_categoria_id?: SortOrder
    categoria_id?: SortOrder
    sub_categoria_nome?: SortOrder
    sub_categoria_createdAt?: SortOrder
    sub_categoria_updatedAt?: SortOrder
    _count?: sub_categoriaCountOrderByAggregateInput
    _avg?: sub_categoriaAvgOrderByAggregateInput
    _max?: sub_categoriaMaxOrderByAggregateInput
    _min?: sub_categoriaMinOrderByAggregateInput
    _sum?: sub_categoriaSumOrderByAggregateInput
  }

  export type sub_categoriaScalarWhereWithAggregatesInput = {
    AND?: sub_categoriaScalarWhereWithAggregatesInput | sub_categoriaScalarWhereWithAggregatesInput[]
    OR?: sub_categoriaScalarWhereWithAggregatesInput[]
    NOT?: sub_categoriaScalarWhereWithAggregatesInput | sub_categoriaScalarWhereWithAggregatesInput[]
    sub_categoria_id?: IntWithAggregatesFilter<"sub_categoria"> | number
    categoria_id?: IntWithAggregatesFilter<"sub_categoria"> | number
    sub_categoria_nome?: StringWithAggregatesFilter<"sub_categoria"> | string
    sub_categoria_createdAt?: DateTimeWithAggregatesFilter<"sub_categoria"> | Date | string
    sub_categoria_updatedAt?: DateTimeWithAggregatesFilter<"sub_categoria"> | Date | string
  }

  export type imagemWhereInput = {
    AND?: imagemWhereInput | imagemWhereInput[]
    OR?: imagemWhereInput[]
    NOT?: imagemWhereInput | imagemWhereInput[]
    imagem_id?: IntFilter<"imagem"> | number
    imagem_path?: StringFilter<"imagem"> | string
    categoria_createdAt?: DateTimeFilter<"imagem"> | Date | string
    categoria_updatedAt?: DateTimeFilter<"imagem"> | Date | string
    imagem_item?: Imagem_itemListRelationFilter
  }

  export type imagemOrderByWithRelationInput = {
    imagem_id?: SortOrder
    imagem_path?: SortOrder
    categoria_createdAt?: SortOrder
    categoria_updatedAt?: SortOrder
    imagem_item?: imagem_itemOrderByRelationAggregateInput
  }

  export type imagemWhereUniqueInput = Prisma.AtLeast<{
    imagem_id?: number
    AND?: imagemWhereInput | imagemWhereInput[]
    OR?: imagemWhereInput[]
    NOT?: imagemWhereInput | imagemWhereInput[]
    imagem_path?: StringFilter<"imagem"> | string
    categoria_createdAt?: DateTimeFilter<"imagem"> | Date | string
    categoria_updatedAt?: DateTimeFilter<"imagem"> | Date | string
    imagem_item?: Imagem_itemListRelationFilter
  }, "imagem_id">

  export type imagemOrderByWithAggregationInput = {
    imagem_id?: SortOrder
    imagem_path?: SortOrder
    categoria_createdAt?: SortOrder
    categoria_updatedAt?: SortOrder
    _count?: imagemCountOrderByAggregateInput
    _avg?: imagemAvgOrderByAggregateInput
    _max?: imagemMaxOrderByAggregateInput
    _min?: imagemMinOrderByAggregateInput
    _sum?: imagemSumOrderByAggregateInput
  }

  export type imagemScalarWhereWithAggregatesInput = {
    AND?: imagemScalarWhereWithAggregatesInput | imagemScalarWhereWithAggregatesInput[]
    OR?: imagemScalarWhereWithAggregatesInput[]
    NOT?: imagemScalarWhereWithAggregatesInput | imagemScalarWhereWithAggregatesInput[]
    imagem_id?: IntWithAggregatesFilter<"imagem"> | number
    imagem_path?: StringWithAggregatesFilter<"imagem"> | string
    categoria_createdAt?: DateTimeWithAggregatesFilter<"imagem"> | Date | string
    categoria_updatedAt?: DateTimeWithAggregatesFilter<"imagem"> | Date | string
  }

  export type imagem_itemWhereInput = {
    AND?: imagem_itemWhereInput | imagem_itemWhereInput[]
    OR?: imagem_itemWhereInput[]
    NOT?: imagem_itemWhereInput | imagem_itemWhereInput[]
    imagem_item_id?: IntFilter<"imagem_item"> | number
    imagem_id?: IntFilter<"imagem_item"> | number
    product_id?: IntFilter<"imagem_item"> | number
    sub_categoria_nome?: StringFilter<"imagem_item"> | string
    sub_categoria_createdAt?: DateTimeFilter<"imagem_item"> | Date | string
    sub_categoria_updatedAt?: DateTimeFilter<"imagem_item"> | Date | string
    imagem?: XOR<ImagemRelationFilter, imagemWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type imagem_itemOrderByWithRelationInput = {
    imagem_item_id?: SortOrder
    imagem_id?: SortOrder
    product_id?: SortOrder
    sub_categoria_nome?: SortOrder
    sub_categoria_createdAt?: SortOrder
    sub_categoria_updatedAt?: SortOrder
    imagem?: imagemOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type imagem_itemWhereUniqueInput = Prisma.AtLeast<{
    imagem_item_id?: number
    sub_categoria_nome?: string
    AND?: imagem_itemWhereInput | imagem_itemWhereInput[]
    OR?: imagem_itemWhereInput[]
    NOT?: imagem_itemWhereInput | imagem_itemWhereInput[]
    imagem_id?: IntFilter<"imagem_item"> | number
    product_id?: IntFilter<"imagem_item"> | number
    sub_categoria_createdAt?: DateTimeFilter<"imagem_item"> | Date | string
    sub_categoria_updatedAt?: DateTimeFilter<"imagem_item"> | Date | string
    imagem?: XOR<ImagemRelationFilter, imagemWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "imagem_item_id" | "sub_categoria_nome">

  export type imagem_itemOrderByWithAggregationInput = {
    imagem_item_id?: SortOrder
    imagem_id?: SortOrder
    product_id?: SortOrder
    sub_categoria_nome?: SortOrder
    sub_categoria_createdAt?: SortOrder
    sub_categoria_updatedAt?: SortOrder
    _count?: imagem_itemCountOrderByAggregateInput
    _avg?: imagem_itemAvgOrderByAggregateInput
    _max?: imagem_itemMaxOrderByAggregateInput
    _min?: imagem_itemMinOrderByAggregateInput
    _sum?: imagem_itemSumOrderByAggregateInput
  }

  export type imagem_itemScalarWhereWithAggregatesInput = {
    AND?: imagem_itemScalarWhereWithAggregatesInput | imagem_itemScalarWhereWithAggregatesInput[]
    OR?: imagem_itemScalarWhereWithAggregatesInput[]
    NOT?: imagem_itemScalarWhereWithAggregatesInput | imagem_itemScalarWhereWithAggregatesInput[]
    imagem_item_id?: IntWithAggregatesFilter<"imagem_item"> | number
    imagem_id?: IntWithAggregatesFilter<"imagem_item"> | number
    product_id?: IntWithAggregatesFilter<"imagem_item"> | number
    sub_categoria_nome?: StringWithAggregatesFilter<"imagem_item"> | string
    sub_categoria_createdAt?: DateTimeWithAggregatesFilter<"imagem_item"> | Date | string
    sub_categoria_updatedAt?: DateTimeWithAggregatesFilter<"imagem_item"> | Date | string
  }

  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    cliente_id?: IntFilter<"Cliente"> | number
    cliente_name?: StringFilter<"Cliente"> | string
    cliente_email?: StringFilter<"Cliente"> | string
    cliente_cpf?: StringFilter<"Cliente"> | string
    cliente_phone?: StringFilter<"Cliente"> | string
    cliente_createdAt?: DateTimeFilter<"Cliente"> | Date | string
    cliente_updatedAt?: DateTimeFilter<"Cliente"> | Date | string
    Pedido?: PedidoListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    cliente_id?: SortOrder
    cliente_name?: SortOrder
    cliente_email?: SortOrder
    cliente_cpf?: SortOrder
    cliente_phone?: SortOrder
    cliente_createdAt?: SortOrder
    cliente_updatedAt?: SortOrder
    Pedido?: PedidoOrderByRelationAggregateInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    cliente_id?: number
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    cliente_name?: StringFilter<"Cliente"> | string
    cliente_email?: StringFilter<"Cliente"> | string
    cliente_cpf?: StringFilter<"Cliente"> | string
    cliente_phone?: StringFilter<"Cliente"> | string
    cliente_createdAt?: DateTimeFilter<"Cliente"> | Date | string
    cliente_updatedAt?: DateTimeFilter<"Cliente"> | Date | string
    Pedido?: PedidoListRelationFilter
  }, "cliente_id">

  export type ClienteOrderByWithAggregationInput = {
    cliente_id?: SortOrder
    cliente_name?: SortOrder
    cliente_email?: SortOrder
    cliente_cpf?: SortOrder
    cliente_phone?: SortOrder
    cliente_createdAt?: SortOrder
    cliente_updatedAt?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    cliente_id?: IntWithAggregatesFilter<"Cliente"> | number
    cliente_name?: StringWithAggregatesFilter<"Cliente"> | string
    cliente_email?: StringWithAggregatesFilter<"Cliente"> | string
    cliente_cpf?: StringWithAggregatesFilter<"Cliente"> | string
    cliente_phone?: StringWithAggregatesFilter<"Cliente"> | string
    cliente_createdAt?: DateTimeWithAggregatesFilter<"Cliente"> | Date | string
    cliente_updatedAt?: DateTimeWithAggregatesFilter<"Cliente"> | Date | string
  }

  export type PedidoWhereInput = {
    AND?: PedidoWhereInput | PedidoWhereInput[]
    OR?: PedidoWhereInput[]
    NOT?: PedidoWhereInput | PedidoWhereInput[]
    pedido_id?: IntFilter<"Pedido"> | number
    cliente_id?: IntFilter<"Pedido"> | number
    pedido_status?: StringFilter<"Pedido"> | string
    pedido_valor_total?: FloatFilter<"Pedido"> | number
    pedido_frete_total?: FloatFilter<"Pedido"> | number
    pedido_data?: DateTimeFilter<"Pedido"> | Date | string
    tipo_pagamento_id?: IntFilter<"Pedido"> | number
    Cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
    Tipo_Pagamento?: XOR<Tipo_PagamentoRelationFilter, Tipo_PagamentoWhereInput>
    Pedido_item?: Pedido_itemListRelationFilter
  }

  export type PedidoOrderByWithRelationInput = {
    pedido_id?: SortOrder
    cliente_id?: SortOrder
    pedido_status?: SortOrder
    pedido_valor_total?: SortOrder
    pedido_frete_total?: SortOrder
    pedido_data?: SortOrder
    tipo_pagamento_id?: SortOrder
    Cliente?: ClienteOrderByWithRelationInput
    Tipo_Pagamento?: Tipo_PagamentoOrderByWithRelationInput
    Pedido_item?: Pedido_itemOrderByRelationAggregateInput
  }

  export type PedidoWhereUniqueInput = Prisma.AtLeast<{
    pedido_id?: number
    AND?: PedidoWhereInput | PedidoWhereInput[]
    OR?: PedidoWhereInput[]
    NOT?: PedidoWhereInput | PedidoWhereInput[]
    cliente_id?: IntFilter<"Pedido"> | number
    pedido_status?: StringFilter<"Pedido"> | string
    pedido_valor_total?: FloatFilter<"Pedido"> | number
    pedido_frete_total?: FloatFilter<"Pedido"> | number
    pedido_data?: DateTimeFilter<"Pedido"> | Date | string
    tipo_pagamento_id?: IntFilter<"Pedido"> | number
    Cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
    Tipo_Pagamento?: XOR<Tipo_PagamentoRelationFilter, Tipo_PagamentoWhereInput>
    Pedido_item?: Pedido_itemListRelationFilter
  }, "pedido_id">

  export type PedidoOrderByWithAggregationInput = {
    pedido_id?: SortOrder
    cliente_id?: SortOrder
    pedido_status?: SortOrder
    pedido_valor_total?: SortOrder
    pedido_frete_total?: SortOrder
    pedido_data?: SortOrder
    tipo_pagamento_id?: SortOrder
    _count?: PedidoCountOrderByAggregateInput
    _avg?: PedidoAvgOrderByAggregateInput
    _max?: PedidoMaxOrderByAggregateInput
    _min?: PedidoMinOrderByAggregateInput
    _sum?: PedidoSumOrderByAggregateInput
  }

  export type PedidoScalarWhereWithAggregatesInput = {
    AND?: PedidoScalarWhereWithAggregatesInput | PedidoScalarWhereWithAggregatesInput[]
    OR?: PedidoScalarWhereWithAggregatesInput[]
    NOT?: PedidoScalarWhereWithAggregatesInput | PedidoScalarWhereWithAggregatesInput[]
    pedido_id?: IntWithAggregatesFilter<"Pedido"> | number
    cliente_id?: IntWithAggregatesFilter<"Pedido"> | number
    pedido_status?: StringWithAggregatesFilter<"Pedido"> | string
    pedido_valor_total?: FloatWithAggregatesFilter<"Pedido"> | number
    pedido_frete_total?: FloatWithAggregatesFilter<"Pedido"> | number
    pedido_data?: DateTimeWithAggregatesFilter<"Pedido"> | Date | string
    tipo_pagamento_id?: IntWithAggregatesFilter<"Pedido"> | number
  }

  export type Pedido_itemWhereInput = {
    AND?: Pedido_itemWhereInput | Pedido_itemWhereInput[]
    OR?: Pedido_itemWhereInput[]
    NOT?: Pedido_itemWhereInput | Pedido_itemWhereInput[]
    Pedido_item_id?: IntFilter<"Pedido_item"> | number
    pedido_id?: IntFilter<"Pedido_item"> | number
    product_id?: IntFilter<"Pedido_item"> | number
    Pedido_item_valor?: FloatFilter<"Pedido_item"> | number
    Pedido_item_qtd?: IntFilter<"Pedido_item"> | number
    Pedido?: XOR<PedidoRelationFilter, PedidoWhereInput>
    Product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type Pedido_itemOrderByWithRelationInput = {
    Pedido_item_id?: SortOrder
    pedido_id?: SortOrder
    product_id?: SortOrder
    Pedido_item_valor?: SortOrder
    Pedido_item_qtd?: SortOrder
    Pedido?: PedidoOrderByWithRelationInput
    Product?: ProductOrderByWithRelationInput
  }

  export type Pedido_itemWhereUniqueInput = Prisma.AtLeast<{
    Pedido_item_id?: number
    AND?: Pedido_itemWhereInput | Pedido_itemWhereInput[]
    OR?: Pedido_itemWhereInput[]
    NOT?: Pedido_itemWhereInput | Pedido_itemWhereInput[]
    pedido_id?: IntFilter<"Pedido_item"> | number
    product_id?: IntFilter<"Pedido_item"> | number
    Pedido_item_valor?: FloatFilter<"Pedido_item"> | number
    Pedido_item_qtd?: IntFilter<"Pedido_item"> | number
    Pedido?: XOR<PedidoRelationFilter, PedidoWhereInput>
    Product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "Pedido_item_id">

  export type Pedido_itemOrderByWithAggregationInput = {
    Pedido_item_id?: SortOrder
    pedido_id?: SortOrder
    product_id?: SortOrder
    Pedido_item_valor?: SortOrder
    Pedido_item_qtd?: SortOrder
    _count?: Pedido_itemCountOrderByAggregateInput
    _avg?: Pedido_itemAvgOrderByAggregateInput
    _max?: Pedido_itemMaxOrderByAggregateInput
    _min?: Pedido_itemMinOrderByAggregateInput
    _sum?: Pedido_itemSumOrderByAggregateInput
  }

  export type Pedido_itemScalarWhereWithAggregatesInput = {
    AND?: Pedido_itemScalarWhereWithAggregatesInput | Pedido_itemScalarWhereWithAggregatesInput[]
    OR?: Pedido_itemScalarWhereWithAggregatesInput[]
    NOT?: Pedido_itemScalarWhereWithAggregatesInput | Pedido_itemScalarWhereWithAggregatesInput[]
    Pedido_item_id?: IntWithAggregatesFilter<"Pedido_item"> | number
    pedido_id?: IntWithAggregatesFilter<"Pedido_item"> | number
    product_id?: IntWithAggregatesFilter<"Pedido_item"> | number
    Pedido_item_valor?: FloatWithAggregatesFilter<"Pedido_item"> | number
    Pedido_item_qtd?: IntWithAggregatesFilter<"Pedido_item"> | number
  }

  export type Tipo_PagamentoWhereInput = {
    AND?: Tipo_PagamentoWhereInput | Tipo_PagamentoWhereInput[]
    OR?: Tipo_PagamentoWhereInput[]
    NOT?: Tipo_PagamentoWhereInput | Tipo_PagamentoWhereInput[]
    tipo_pagamento_id?: IntFilter<"Tipo_Pagamento"> | number
    tipo_pagamento_name?: StringFilter<"Tipo_Pagamento"> | string
    tipo_pagamento_createdAt?: DateTimeFilter<"Tipo_Pagamento"> | Date | string
    tipo_pagamento_updatedAt?: DateTimeFilter<"Tipo_Pagamento"> | Date | string
    Pedido?: PedidoListRelationFilter
  }

  export type Tipo_PagamentoOrderByWithRelationInput = {
    tipo_pagamento_id?: SortOrder
    tipo_pagamento_name?: SortOrder
    tipo_pagamento_createdAt?: SortOrder
    tipo_pagamento_updatedAt?: SortOrder
    Pedido?: PedidoOrderByRelationAggregateInput
  }

  export type Tipo_PagamentoWhereUniqueInput = Prisma.AtLeast<{
    tipo_pagamento_id?: number
    AND?: Tipo_PagamentoWhereInput | Tipo_PagamentoWhereInput[]
    OR?: Tipo_PagamentoWhereInput[]
    NOT?: Tipo_PagamentoWhereInput | Tipo_PagamentoWhereInput[]
    tipo_pagamento_name?: StringFilter<"Tipo_Pagamento"> | string
    tipo_pagamento_createdAt?: DateTimeFilter<"Tipo_Pagamento"> | Date | string
    tipo_pagamento_updatedAt?: DateTimeFilter<"Tipo_Pagamento"> | Date | string
    Pedido?: PedidoListRelationFilter
  }, "tipo_pagamento_id">

  export type Tipo_PagamentoOrderByWithAggregationInput = {
    tipo_pagamento_id?: SortOrder
    tipo_pagamento_name?: SortOrder
    tipo_pagamento_createdAt?: SortOrder
    tipo_pagamento_updatedAt?: SortOrder
    _count?: Tipo_PagamentoCountOrderByAggregateInput
    _avg?: Tipo_PagamentoAvgOrderByAggregateInput
    _max?: Tipo_PagamentoMaxOrderByAggregateInput
    _min?: Tipo_PagamentoMinOrderByAggregateInput
    _sum?: Tipo_PagamentoSumOrderByAggregateInput
  }

  export type Tipo_PagamentoScalarWhereWithAggregatesInput = {
    AND?: Tipo_PagamentoScalarWhereWithAggregatesInput | Tipo_PagamentoScalarWhereWithAggregatesInput[]
    OR?: Tipo_PagamentoScalarWhereWithAggregatesInput[]
    NOT?: Tipo_PagamentoScalarWhereWithAggregatesInput | Tipo_PagamentoScalarWhereWithAggregatesInput[]
    tipo_pagamento_id?: IntWithAggregatesFilter<"Tipo_Pagamento"> | number
    tipo_pagamento_name?: StringWithAggregatesFilter<"Tipo_Pagamento"> | string
    tipo_pagamento_createdAt?: DateTimeWithAggregatesFilter<"Tipo_Pagamento"> | Date | string
    tipo_pagamento_updatedAt?: DateTimeWithAggregatesFilter<"Tipo_Pagamento"> | Date | string
  }

  export type UserCreateInput = {
    user_name: string
    user_email: string
    user_cpf: string
    user_password: string
    user_phone: string
    user_typeuser: number
    user_createdAt?: Date | string
    user_updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    user_id?: number
    user_name: string
    user_email: string
    user_cpf: string
    user_password: string
    user_phone: string
    user_typeuser: number
    user_createdAt?: Date | string
    user_updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    user_email?: StringFieldUpdateOperationsInput | string
    user_cpf?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_phone?: StringFieldUpdateOperationsInput | string
    user_typeuser?: IntFieldUpdateOperationsInput | number
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    user_email?: StringFieldUpdateOperationsInput | string
    user_cpf?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_phone?: StringFieldUpdateOperationsInput | string
    user_typeuser?: IntFieldUpdateOperationsInput | number
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    user_id?: number
    user_name: string
    user_email: string
    user_cpf: string
    user_password: string
    user_phone: string
    user_typeuser: number
    user_createdAt?: Date | string
    user_updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    user_email?: StringFieldUpdateOperationsInput | string
    user_cpf?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_phone?: StringFieldUpdateOperationsInput | string
    user_typeuser?: IntFieldUpdateOperationsInput | number
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    user_email?: StringFieldUpdateOperationsInput | string
    user_cpf?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_phone?: StringFieldUpdateOperationsInput | string
    user_typeuser?: IntFieldUpdateOperationsInput | number
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    product_nome: string
    product_valor: number
    product_imagem_id: number
    product_marca: number
    product_descricao: string
    user_createdAt?: Date | string
    user_updatedAt?: Date | string
    sub_categoria: sub_categoriaCreateNestedOneWithoutProdutosInput
    Pedido_item?: Pedido_itemCreateNestedManyWithoutProductInput
    imagem_item?: imagem_itemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    product_id?: number
    product_sub_id: number
    product_nome: string
    product_valor: number
    product_imagem_id: number
    product_marca: number
    product_descricao: string
    user_createdAt?: Date | string
    user_updatedAt?: Date | string
    Pedido_item?: Pedido_itemUncheckedCreateNestedManyWithoutProductInput
    imagem_item?: imagem_itemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    product_nome?: StringFieldUpdateOperationsInput | string
    product_valor?: FloatFieldUpdateOperationsInput | number
    product_imagem_id?: IntFieldUpdateOperationsInput | number
    product_marca?: IntFieldUpdateOperationsInput | number
    product_descricao?: StringFieldUpdateOperationsInput | string
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria?: sub_categoriaUpdateOneRequiredWithoutProdutosNestedInput
    Pedido_item?: Pedido_itemUpdateManyWithoutProductNestedInput
    imagem_item?: imagem_itemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_sub_id?: IntFieldUpdateOperationsInput | number
    product_nome?: StringFieldUpdateOperationsInput | string
    product_valor?: FloatFieldUpdateOperationsInput | number
    product_imagem_id?: IntFieldUpdateOperationsInput | number
    product_marca?: IntFieldUpdateOperationsInput | number
    product_descricao?: StringFieldUpdateOperationsInput | string
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Pedido_item?: Pedido_itemUncheckedUpdateManyWithoutProductNestedInput
    imagem_item?: imagem_itemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    product_id?: number
    product_sub_id: number
    product_nome: string
    product_valor: number
    product_imagem_id: number
    product_marca: number
    product_descricao: string
    user_createdAt?: Date | string
    user_updatedAt?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    product_nome?: StringFieldUpdateOperationsInput | string
    product_valor?: FloatFieldUpdateOperationsInput | number
    product_imagem_id?: IntFieldUpdateOperationsInput | number
    product_marca?: IntFieldUpdateOperationsInput | number
    product_descricao?: StringFieldUpdateOperationsInput | string
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_sub_id?: IntFieldUpdateOperationsInput | number
    product_nome?: StringFieldUpdateOperationsInput | string
    product_valor?: FloatFieldUpdateOperationsInput | number
    product_imagem_id?: IntFieldUpdateOperationsInput | number
    product_marca?: IntFieldUpdateOperationsInput | number
    product_descricao?: StringFieldUpdateOperationsInput | string
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoriaCreateInput = {
    categoria_nome: string
    categoria_createdAt?: Date | string
    categoria_updatedAt?: Date | string
    sub_categorias?: sub_categoriaCreateNestedManyWithoutCategoriaInput
  }

  export type categoriaUncheckedCreateInput = {
    categoria_id?: number
    categoria_nome: string
    categoria_createdAt?: Date | string
    categoria_updatedAt?: Date | string
    sub_categorias?: sub_categoriaUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type categoriaUpdateInput = {
    categoria_nome?: StringFieldUpdateOperationsInput | string
    categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categorias?: sub_categoriaUpdateManyWithoutCategoriaNestedInput
  }

  export type categoriaUncheckedUpdateInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
    categoria_nome?: StringFieldUpdateOperationsInput | string
    categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categorias?: sub_categoriaUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type categoriaCreateManyInput = {
    categoria_id?: number
    categoria_nome: string
    categoria_createdAt?: Date | string
    categoria_updatedAt?: Date | string
  }

  export type categoriaUpdateManyMutationInput = {
    categoria_nome?: StringFieldUpdateOperationsInput | string
    categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoriaUncheckedUpdateManyInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
    categoria_nome?: StringFieldUpdateOperationsInput | string
    categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sub_categoriaCreateInput = {
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
    categoria: categoriaCreateNestedOneWithoutSub_categoriasInput
    produtos?: ProductCreateNestedManyWithoutSub_categoriaInput
  }

  export type sub_categoriaUncheckedCreateInput = {
    sub_categoria_id?: number
    categoria_id: number
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
    produtos?: ProductUncheckedCreateNestedManyWithoutSub_categoriaInput
  }

  export type sub_categoriaUpdateInput = {
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria?: categoriaUpdateOneRequiredWithoutSub_categoriasNestedInput
    produtos?: ProductUpdateManyWithoutSub_categoriaNestedInput
  }

  export type sub_categoriaUncheckedUpdateInput = {
    sub_categoria_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    produtos?: ProductUncheckedUpdateManyWithoutSub_categoriaNestedInput
  }

  export type sub_categoriaCreateManyInput = {
    sub_categoria_id?: number
    categoria_id: number
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
  }

  export type sub_categoriaUpdateManyMutationInput = {
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sub_categoriaUncheckedUpdateManyInput = {
    sub_categoria_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagemCreateInput = {
    imagem_path: string
    categoria_createdAt?: Date | string
    categoria_updatedAt?: Date | string
    imagem_item?: imagem_itemCreateNestedManyWithoutImagemInput
  }

  export type imagemUncheckedCreateInput = {
    imagem_id?: number
    imagem_path: string
    categoria_createdAt?: Date | string
    categoria_updatedAt?: Date | string
    imagem_item?: imagem_itemUncheckedCreateNestedManyWithoutImagemInput
  }

  export type imagemUpdateInput = {
    imagem_path?: StringFieldUpdateOperationsInput | string
    categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imagem_item?: imagem_itemUpdateManyWithoutImagemNestedInput
  }

  export type imagemUncheckedUpdateInput = {
    imagem_id?: IntFieldUpdateOperationsInput | number
    imagem_path?: StringFieldUpdateOperationsInput | string
    categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imagem_item?: imagem_itemUncheckedUpdateManyWithoutImagemNestedInput
  }

  export type imagemCreateManyInput = {
    imagem_id?: number
    imagem_path: string
    categoria_createdAt?: Date | string
    categoria_updatedAt?: Date | string
  }

  export type imagemUpdateManyMutationInput = {
    imagem_path?: StringFieldUpdateOperationsInput | string
    categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagemUncheckedUpdateManyInput = {
    imagem_id?: IntFieldUpdateOperationsInput | number
    imagem_path?: StringFieldUpdateOperationsInput | string
    categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagem_itemCreateInput = {
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
    imagem: imagemCreateNestedOneWithoutImagem_itemInput
    product: ProductCreateNestedOneWithoutImagem_itemInput
  }

  export type imagem_itemUncheckedCreateInput = {
    imagem_item_id?: number
    imagem_id: number
    product_id: number
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
  }

  export type imagem_itemUpdateInput = {
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imagem?: imagemUpdateOneRequiredWithoutImagem_itemNestedInput
    product?: ProductUpdateOneRequiredWithoutImagem_itemNestedInput
  }

  export type imagem_itemUncheckedUpdateInput = {
    imagem_item_id?: IntFieldUpdateOperationsInput | number
    imagem_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagem_itemCreateManyInput = {
    imagem_item_id?: number
    imagem_id: number
    product_id: number
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
  }

  export type imagem_itemUpdateManyMutationInput = {
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagem_itemUncheckedUpdateManyInput = {
    imagem_item_id?: IntFieldUpdateOperationsInput | number
    imagem_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteCreateInput = {
    cliente_name: string
    cliente_email: string
    cliente_cpf: string
    cliente_phone: string
    cliente_createdAt?: Date | string
    cliente_updatedAt?: Date | string
    Pedido?: PedidoCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    cliente_id?: number
    cliente_name: string
    cliente_email: string
    cliente_cpf: string
    cliente_phone: string
    cliente_createdAt?: Date | string
    cliente_updatedAt?: Date | string
    Pedido?: PedidoUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    cliente_name?: StringFieldUpdateOperationsInput | string
    cliente_email?: StringFieldUpdateOperationsInput | string
    cliente_cpf?: StringFieldUpdateOperationsInput | string
    cliente_phone?: StringFieldUpdateOperationsInput | string
    cliente_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Pedido?: PedidoUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    cliente_name?: StringFieldUpdateOperationsInput | string
    cliente_email?: StringFieldUpdateOperationsInput | string
    cliente_cpf?: StringFieldUpdateOperationsInput | string
    cliente_phone?: StringFieldUpdateOperationsInput | string
    cliente_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Pedido?: PedidoUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    cliente_id?: number
    cliente_name: string
    cliente_email: string
    cliente_cpf: string
    cliente_phone: string
    cliente_createdAt?: Date | string
    cliente_updatedAt?: Date | string
  }

  export type ClienteUpdateManyMutationInput = {
    cliente_name?: StringFieldUpdateOperationsInput | string
    cliente_email?: StringFieldUpdateOperationsInput | string
    cliente_cpf?: StringFieldUpdateOperationsInput | string
    cliente_phone?: StringFieldUpdateOperationsInput | string
    cliente_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteUncheckedUpdateManyInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    cliente_name?: StringFieldUpdateOperationsInput | string
    cliente_email?: StringFieldUpdateOperationsInput | string
    cliente_cpf?: StringFieldUpdateOperationsInput | string
    cliente_phone?: StringFieldUpdateOperationsInput | string
    cliente_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidoCreateInput = {
    pedido_status: string
    pedido_valor_total: number
    pedido_frete_total: number
    pedido_data?: Date | string
    Cliente: ClienteCreateNestedOneWithoutPedidoInput
    Tipo_Pagamento: Tipo_PagamentoCreateNestedOneWithoutPedidoInput
    Pedido_item?: Pedido_itemCreateNestedManyWithoutPedidoInput
  }

  export type PedidoUncheckedCreateInput = {
    pedido_id?: number
    cliente_id: number
    pedido_status: string
    pedido_valor_total: number
    pedido_frete_total: number
    pedido_data?: Date | string
    tipo_pagamento_id: number
    Pedido_item?: Pedido_itemUncheckedCreateNestedManyWithoutPedidoInput
  }

  export type PedidoUpdateInput = {
    pedido_status?: StringFieldUpdateOperationsInput | string
    pedido_valor_total?: FloatFieldUpdateOperationsInput | number
    pedido_frete_total?: FloatFieldUpdateOperationsInput | number
    pedido_data?: DateTimeFieldUpdateOperationsInput | Date | string
    Cliente?: ClienteUpdateOneRequiredWithoutPedidoNestedInput
    Tipo_Pagamento?: Tipo_PagamentoUpdateOneRequiredWithoutPedidoNestedInput
    Pedido_item?: Pedido_itemUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateInput = {
    pedido_id?: IntFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    pedido_status?: StringFieldUpdateOperationsInput | string
    pedido_valor_total?: FloatFieldUpdateOperationsInput | number
    pedido_frete_total?: FloatFieldUpdateOperationsInput | number
    pedido_data?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_pagamento_id?: IntFieldUpdateOperationsInput | number
    Pedido_item?: Pedido_itemUncheckedUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoCreateManyInput = {
    pedido_id?: number
    cliente_id: number
    pedido_status: string
    pedido_valor_total: number
    pedido_frete_total: number
    pedido_data?: Date | string
    tipo_pagamento_id: number
  }

  export type PedidoUpdateManyMutationInput = {
    pedido_status?: StringFieldUpdateOperationsInput | string
    pedido_valor_total?: FloatFieldUpdateOperationsInput | number
    pedido_frete_total?: FloatFieldUpdateOperationsInput | number
    pedido_data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidoUncheckedUpdateManyInput = {
    pedido_id?: IntFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    pedido_status?: StringFieldUpdateOperationsInput | string
    pedido_valor_total?: FloatFieldUpdateOperationsInput | number
    pedido_frete_total?: FloatFieldUpdateOperationsInput | number
    pedido_data?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_pagamento_id?: IntFieldUpdateOperationsInput | number
  }

  export type Pedido_itemCreateInput = {
    Pedido_item_valor: number
    Pedido_item_qtd: number
    Pedido: PedidoCreateNestedOneWithoutPedido_itemInput
    Product: ProductCreateNestedOneWithoutPedido_itemInput
  }

  export type Pedido_itemUncheckedCreateInput = {
    Pedido_item_id?: number
    pedido_id: number
    product_id: number
    Pedido_item_valor: number
    Pedido_item_qtd: number
  }

  export type Pedido_itemUpdateInput = {
    Pedido_item_valor?: FloatFieldUpdateOperationsInput | number
    Pedido_item_qtd?: IntFieldUpdateOperationsInput | number
    Pedido?: PedidoUpdateOneRequiredWithoutPedido_itemNestedInput
    Product?: ProductUpdateOneRequiredWithoutPedido_itemNestedInput
  }

  export type Pedido_itemUncheckedUpdateInput = {
    Pedido_item_id?: IntFieldUpdateOperationsInput | number
    pedido_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    Pedido_item_valor?: FloatFieldUpdateOperationsInput | number
    Pedido_item_qtd?: IntFieldUpdateOperationsInput | number
  }

  export type Pedido_itemCreateManyInput = {
    Pedido_item_id?: number
    pedido_id: number
    product_id: number
    Pedido_item_valor: number
    Pedido_item_qtd: number
  }

  export type Pedido_itemUpdateManyMutationInput = {
    Pedido_item_valor?: FloatFieldUpdateOperationsInput | number
    Pedido_item_qtd?: IntFieldUpdateOperationsInput | number
  }

  export type Pedido_itemUncheckedUpdateManyInput = {
    Pedido_item_id?: IntFieldUpdateOperationsInput | number
    pedido_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    Pedido_item_valor?: FloatFieldUpdateOperationsInput | number
    Pedido_item_qtd?: IntFieldUpdateOperationsInput | number
  }

  export type Tipo_PagamentoCreateInput = {
    tipo_pagamento_name: string
    tipo_pagamento_createdAt?: Date | string
    tipo_pagamento_updatedAt?: Date | string
    Pedido?: PedidoCreateNestedManyWithoutTipo_PagamentoInput
  }

  export type Tipo_PagamentoUncheckedCreateInput = {
    tipo_pagamento_id?: number
    tipo_pagamento_name: string
    tipo_pagamento_createdAt?: Date | string
    tipo_pagamento_updatedAt?: Date | string
    Pedido?: PedidoUncheckedCreateNestedManyWithoutTipo_PagamentoInput
  }

  export type Tipo_PagamentoUpdateInput = {
    tipo_pagamento_name?: StringFieldUpdateOperationsInput | string
    tipo_pagamento_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_pagamento_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Pedido?: PedidoUpdateManyWithoutTipo_PagamentoNestedInput
  }

  export type Tipo_PagamentoUncheckedUpdateInput = {
    tipo_pagamento_id?: IntFieldUpdateOperationsInput | number
    tipo_pagamento_name?: StringFieldUpdateOperationsInput | string
    tipo_pagamento_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_pagamento_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Pedido?: PedidoUncheckedUpdateManyWithoutTipo_PagamentoNestedInput
  }

  export type Tipo_PagamentoCreateManyInput = {
    tipo_pagamento_id?: number
    tipo_pagamento_name: string
    tipo_pagamento_createdAt?: Date | string
    tipo_pagamento_updatedAt?: Date | string
  }

  export type Tipo_PagamentoUpdateManyMutationInput = {
    tipo_pagamento_name?: StringFieldUpdateOperationsInput | string
    tipo_pagamento_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_pagamento_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Tipo_PagamentoUncheckedUpdateManyInput = {
    tipo_pagamento_id?: IntFieldUpdateOperationsInput | number
    tipo_pagamento_name?: StringFieldUpdateOperationsInput | string
    tipo_pagamento_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_pagamento_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    user_email?: SortOrder
    user_cpf?: SortOrder
    user_password?: SortOrder
    user_phone?: SortOrder
    user_typeuser?: SortOrder
    user_createdAt?: SortOrder
    user_updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    user_id?: SortOrder
    user_typeuser?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    user_email?: SortOrder
    user_cpf?: SortOrder
    user_password?: SortOrder
    user_phone?: SortOrder
    user_typeuser?: SortOrder
    user_createdAt?: SortOrder
    user_updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    user_email?: SortOrder
    user_cpf?: SortOrder
    user_password?: SortOrder
    user_phone?: SortOrder
    user_typeuser?: SortOrder
    user_createdAt?: SortOrder
    user_updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    user_id?: SortOrder
    user_typeuser?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type Sub_categoriaRelationFilter = {
    is?: sub_categoriaWhereInput
    isNot?: sub_categoriaWhereInput
  }

  export type Pedido_itemListRelationFilter = {
    every?: Pedido_itemWhereInput
    some?: Pedido_itemWhereInput
    none?: Pedido_itemWhereInput
  }

  export type Imagem_itemListRelationFilter = {
    every?: imagem_itemWhereInput
    some?: imagem_itemWhereInput
    none?: imagem_itemWhereInput
  }

  export type Pedido_itemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type imagem_itemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    product_id?: SortOrder
    product_sub_id?: SortOrder
    product_nome?: SortOrder
    product_valor?: SortOrder
    product_imagem_id?: SortOrder
    product_marca?: SortOrder
    product_descricao?: SortOrder
    user_createdAt?: SortOrder
    user_updatedAt?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    product_id?: SortOrder
    product_sub_id?: SortOrder
    product_valor?: SortOrder
    product_imagem_id?: SortOrder
    product_marca?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    product_id?: SortOrder
    product_sub_id?: SortOrder
    product_nome?: SortOrder
    product_valor?: SortOrder
    product_imagem_id?: SortOrder
    product_marca?: SortOrder
    product_descricao?: SortOrder
    user_createdAt?: SortOrder
    user_updatedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    product_id?: SortOrder
    product_sub_id?: SortOrder
    product_nome?: SortOrder
    product_valor?: SortOrder
    product_imagem_id?: SortOrder
    product_marca?: SortOrder
    product_descricao?: SortOrder
    user_createdAt?: SortOrder
    user_updatedAt?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    product_id?: SortOrder
    product_sub_id?: SortOrder
    product_valor?: SortOrder
    product_imagem_id?: SortOrder
    product_marca?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type Sub_categoriaListRelationFilter = {
    every?: sub_categoriaWhereInput
    some?: sub_categoriaWhereInput
    none?: sub_categoriaWhereInput
  }

  export type sub_categoriaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriaCountOrderByAggregateInput = {
    categoria_id?: SortOrder
    categoria_nome?: SortOrder
    categoria_createdAt?: SortOrder
    categoria_updatedAt?: SortOrder
  }

  export type categoriaAvgOrderByAggregateInput = {
    categoria_id?: SortOrder
  }

  export type categoriaMaxOrderByAggregateInput = {
    categoria_id?: SortOrder
    categoria_nome?: SortOrder
    categoria_createdAt?: SortOrder
    categoria_updatedAt?: SortOrder
  }

  export type categoriaMinOrderByAggregateInput = {
    categoria_id?: SortOrder
    categoria_nome?: SortOrder
    categoria_createdAt?: SortOrder
    categoria_updatedAt?: SortOrder
  }

  export type categoriaSumOrderByAggregateInput = {
    categoria_id?: SortOrder
  }

  export type CategoriaRelationFilter = {
    is?: categoriaWhereInput
    isNot?: categoriaWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sub_categoriaCountOrderByAggregateInput = {
    sub_categoria_id?: SortOrder
    categoria_id?: SortOrder
    sub_categoria_nome?: SortOrder
    sub_categoria_createdAt?: SortOrder
    sub_categoria_updatedAt?: SortOrder
  }

  export type sub_categoriaAvgOrderByAggregateInput = {
    sub_categoria_id?: SortOrder
    categoria_id?: SortOrder
  }

  export type sub_categoriaMaxOrderByAggregateInput = {
    sub_categoria_id?: SortOrder
    categoria_id?: SortOrder
    sub_categoria_nome?: SortOrder
    sub_categoria_createdAt?: SortOrder
    sub_categoria_updatedAt?: SortOrder
  }

  export type sub_categoriaMinOrderByAggregateInput = {
    sub_categoria_id?: SortOrder
    categoria_id?: SortOrder
    sub_categoria_nome?: SortOrder
    sub_categoria_createdAt?: SortOrder
    sub_categoria_updatedAt?: SortOrder
  }

  export type sub_categoriaSumOrderByAggregateInput = {
    sub_categoria_id?: SortOrder
    categoria_id?: SortOrder
  }

  export type imagemCountOrderByAggregateInput = {
    imagem_id?: SortOrder
    imagem_path?: SortOrder
    categoria_createdAt?: SortOrder
    categoria_updatedAt?: SortOrder
  }

  export type imagemAvgOrderByAggregateInput = {
    imagem_id?: SortOrder
  }

  export type imagemMaxOrderByAggregateInput = {
    imagem_id?: SortOrder
    imagem_path?: SortOrder
    categoria_createdAt?: SortOrder
    categoria_updatedAt?: SortOrder
  }

  export type imagemMinOrderByAggregateInput = {
    imagem_id?: SortOrder
    imagem_path?: SortOrder
    categoria_createdAt?: SortOrder
    categoria_updatedAt?: SortOrder
  }

  export type imagemSumOrderByAggregateInput = {
    imagem_id?: SortOrder
  }

  export type ImagemRelationFilter = {
    is?: imagemWhereInput
    isNot?: imagemWhereInput
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type imagem_itemCountOrderByAggregateInput = {
    imagem_item_id?: SortOrder
    imagem_id?: SortOrder
    product_id?: SortOrder
    sub_categoria_nome?: SortOrder
    sub_categoria_createdAt?: SortOrder
    sub_categoria_updatedAt?: SortOrder
  }

  export type imagem_itemAvgOrderByAggregateInput = {
    imagem_item_id?: SortOrder
    imagem_id?: SortOrder
    product_id?: SortOrder
  }

  export type imagem_itemMaxOrderByAggregateInput = {
    imagem_item_id?: SortOrder
    imagem_id?: SortOrder
    product_id?: SortOrder
    sub_categoria_nome?: SortOrder
    sub_categoria_createdAt?: SortOrder
    sub_categoria_updatedAt?: SortOrder
  }

  export type imagem_itemMinOrderByAggregateInput = {
    imagem_item_id?: SortOrder
    imagem_id?: SortOrder
    product_id?: SortOrder
    sub_categoria_nome?: SortOrder
    sub_categoria_createdAt?: SortOrder
    sub_categoria_updatedAt?: SortOrder
  }

  export type imagem_itemSumOrderByAggregateInput = {
    imagem_item_id?: SortOrder
    imagem_id?: SortOrder
    product_id?: SortOrder
  }

  export type PedidoListRelationFilter = {
    every?: PedidoWhereInput
    some?: PedidoWhereInput
    none?: PedidoWhereInput
  }

  export type PedidoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteCountOrderByAggregateInput = {
    cliente_id?: SortOrder
    cliente_name?: SortOrder
    cliente_email?: SortOrder
    cliente_cpf?: SortOrder
    cliente_phone?: SortOrder
    cliente_createdAt?: SortOrder
    cliente_updatedAt?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    cliente_id?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    cliente_id?: SortOrder
    cliente_name?: SortOrder
    cliente_email?: SortOrder
    cliente_cpf?: SortOrder
    cliente_phone?: SortOrder
    cliente_createdAt?: SortOrder
    cliente_updatedAt?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    cliente_id?: SortOrder
    cliente_name?: SortOrder
    cliente_email?: SortOrder
    cliente_cpf?: SortOrder
    cliente_phone?: SortOrder
    cliente_createdAt?: SortOrder
    cliente_updatedAt?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    cliente_id?: SortOrder
  }

  export type ClienteRelationFilter = {
    is?: ClienteWhereInput
    isNot?: ClienteWhereInput
  }

  export type Tipo_PagamentoRelationFilter = {
    is?: Tipo_PagamentoWhereInput
    isNot?: Tipo_PagamentoWhereInput
  }

  export type PedidoCountOrderByAggregateInput = {
    pedido_id?: SortOrder
    cliente_id?: SortOrder
    pedido_status?: SortOrder
    pedido_valor_total?: SortOrder
    pedido_frete_total?: SortOrder
    pedido_data?: SortOrder
    tipo_pagamento_id?: SortOrder
  }

  export type PedidoAvgOrderByAggregateInput = {
    pedido_id?: SortOrder
    cliente_id?: SortOrder
    pedido_valor_total?: SortOrder
    pedido_frete_total?: SortOrder
    tipo_pagamento_id?: SortOrder
  }

  export type PedidoMaxOrderByAggregateInput = {
    pedido_id?: SortOrder
    cliente_id?: SortOrder
    pedido_status?: SortOrder
    pedido_valor_total?: SortOrder
    pedido_frete_total?: SortOrder
    pedido_data?: SortOrder
    tipo_pagamento_id?: SortOrder
  }

  export type PedidoMinOrderByAggregateInput = {
    pedido_id?: SortOrder
    cliente_id?: SortOrder
    pedido_status?: SortOrder
    pedido_valor_total?: SortOrder
    pedido_frete_total?: SortOrder
    pedido_data?: SortOrder
    tipo_pagamento_id?: SortOrder
  }

  export type PedidoSumOrderByAggregateInput = {
    pedido_id?: SortOrder
    cliente_id?: SortOrder
    pedido_valor_total?: SortOrder
    pedido_frete_total?: SortOrder
    tipo_pagamento_id?: SortOrder
  }

  export type PedidoRelationFilter = {
    is?: PedidoWhereInput
    isNot?: PedidoWhereInput
  }

  export type Pedido_itemCountOrderByAggregateInput = {
    Pedido_item_id?: SortOrder
    pedido_id?: SortOrder
    product_id?: SortOrder
    Pedido_item_valor?: SortOrder
    Pedido_item_qtd?: SortOrder
  }

  export type Pedido_itemAvgOrderByAggregateInput = {
    Pedido_item_id?: SortOrder
    pedido_id?: SortOrder
    product_id?: SortOrder
    Pedido_item_valor?: SortOrder
    Pedido_item_qtd?: SortOrder
  }

  export type Pedido_itemMaxOrderByAggregateInput = {
    Pedido_item_id?: SortOrder
    pedido_id?: SortOrder
    product_id?: SortOrder
    Pedido_item_valor?: SortOrder
    Pedido_item_qtd?: SortOrder
  }

  export type Pedido_itemMinOrderByAggregateInput = {
    Pedido_item_id?: SortOrder
    pedido_id?: SortOrder
    product_id?: SortOrder
    Pedido_item_valor?: SortOrder
    Pedido_item_qtd?: SortOrder
  }

  export type Pedido_itemSumOrderByAggregateInput = {
    Pedido_item_id?: SortOrder
    pedido_id?: SortOrder
    product_id?: SortOrder
    Pedido_item_valor?: SortOrder
    Pedido_item_qtd?: SortOrder
  }

  export type Tipo_PagamentoCountOrderByAggregateInput = {
    tipo_pagamento_id?: SortOrder
    tipo_pagamento_name?: SortOrder
    tipo_pagamento_createdAt?: SortOrder
    tipo_pagamento_updatedAt?: SortOrder
  }

  export type Tipo_PagamentoAvgOrderByAggregateInput = {
    tipo_pagamento_id?: SortOrder
  }

  export type Tipo_PagamentoMaxOrderByAggregateInput = {
    tipo_pagamento_id?: SortOrder
    tipo_pagamento_name?: SortOrder
    tipo_pagamento_createdAt?: SortOrder
    tipo_pagamento_updatedAt?: SortOrder
  }

  export type Tipo_PagamentoMinOrderByAggregateInput = {
    tipo_pagamento_id?: SortOrder
    tipo_pagamento_name?: SortOrder
    tipo_pagamento_createdAt?: SortOrder
    tipo_pagamento_updatedAt?: SortOrder
  }

  export type Tipo_PagamentoSumOrderByAggregateInput = {
    tipo_pagamento_id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type sub_categoriaCreateNestedOneWithoutProdutosInput = {
    create?: XOR<sub_categoriaCreateWithoutProdutosInput, sub_categoriaUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: sub_categoriaCreateOrConnectWithoutProdutosInput
    connect?: sub_categoriaWhereUniqueInput
  }

  export type Pedido_itemCreateNestedManyWithoutProductInput = {
    create?: XOR<Pedido_itemCreateWithoutProductInput, Pedido_itemUncheckedCreateWithoutProductInput> | Pedido_itemCreateWithoutProductInput[] | Pedido_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Pedido_itemCreateOrConnectWithoutProductInput | Pedido_itemCreateOrConnectWithoutProductInput[]
    createMany?: Pedido_itemCreateManyProductInputEnvelope
    connect?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
  }

  export type imagem_itemCreateNestedManyWithoutProductInput = {
    create?: XOR<imagem_itemCreateWithoutProductInput, imagem_itemUncheckedCreateWithoutProductInput> | imagem_itemCreateWithoutProductInput[] | imagem_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: imagem_itemCreateOrConnectWithoutProductInput | imagem_itemCreateOrConnectWithoutProductInput[]
    createMany?: imagem_itemCreateManyProductInputEnvelope
    connect?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
  }

  export type Pedido_itemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Pedido_itemCreateWithoutProductInput, Pedido_itemUncheckedCreateWithoutProductInput> | Pedido_itemCreateWithoutProductInput[] | Pedido_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Pedido_itemCreateOrConnectWithoutProductInput | Pedido_itemCreateOrConnectWithoutProductInput[]
    createMany?: Pedido_itemCreateManyProductInputEnvelope
    connect?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
  }

  export type imagem_itemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<imagem_itemCreateWithoutProductInput, imagem_itemUncheckedCreateWithoutProductInput> | imagem_itemCreateWithoutProductInput[] | imagem_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: imagem_itemCreateOrConnectWithoutProductInput | imagem_itemCreateOrConnectWithoutProductInput[]
    createMany?: imagem_itemCreateManyProductInputEnvelope
    connect?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type sub_categoriaUpdateOneRequiredWithoutProdutosNestedInput = {
    create?: XOR<sub_categoriaCreateWithoutProdutosInput, sub_categoriaUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: sub_categoriaCreateOrConnectWithoutProdutosInput
    upsert?: sub_categoriaUpsertWithoutProdutosInput
    connect?: sub_categoriaWhereUniqueInput
    update?: XOR<XOR<sub_categoriaUpdateToOneWithWhereWithoutProdutosInput, sub_categoriaUpdateWithoutProdutosInput>, sub_categoriaUncheckedUpdateWithoutProdutosInput>
  }

  export type Pedido_itemUpdateManyWithoutProductNestedInput = {
    create?: XOR<Pedido_itemCreateWithoutProductInput, Pedido_itemUncheckedCreateWithoutProductInput> | Pedido_itemCreateWithoutProductInput[] | Pedido_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Pedido_itemCreateOrConnectWithoutProductInput | Pedido_itemCreateOrConnectWithoutProductInput[]
    upsert?: Pedido_itemUpsertWithWhereUniqueWithoutProductInput | Pedido_itemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: Pedido_itemCreateManyProductInputEnvelope
    set?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    disconnect?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    delete?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    connect?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    update?: Pedido_itemUpdateWithWhereUniqueWithoutProductInput | Pedido_itemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: Pedido_itemUpdateManyWithWhereWithoutProductInput | Pedido_itemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: Pedido_itemScalarWhereInput | Pedido_itemScalarWhereInput[]
  }

  export type imagem_itemUpdateManyWithoutProductNestedInput = {
    create?: XOR<imagem_itemCreateWithoutProductInput, imagem_itemUncheckedCreateWithoutProductInput> | imagem_itemCreateWithoutProductInput[] | imagem_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: imagem_itemCreateOrConnectWithoutProductInput | imagem_itemCreateOrConnectWithoutProductInput[]
    upsert?: imagem_itemUpsertWithWhereUniqueWithoutProductInput | imagem_itemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: imagem_itemCreateManyProductInputEnvelope
    set?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    disconnect?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    delete?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    connect?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    update?: imagem_itemUpdateWithWhereUniqueWithoutProductInput | imagem_itemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: imagem_itemUpdateManyWithWhereWithoutProductInput | imagem_itemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: imagem_itemScalarWhereInput | imagem_itemScalarWhereInput[]
  }

  export type Pedido_itemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Pedido_itemCreateWithoutProductInput, Pedido_itemUncheckedCreateWithoutProductInput> | Pedido_itemCreateWithoutProductInput[] | Pedido_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: Pedido_itemCreateOrConnectWithoutProductInput | Pedido_itemCreateOrConnectWithoutProductInput[]
    upsert?: Pedido_itemUpsertWithWhereUniqueWithoutProductInput | Pedido_itemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: Pedido_itemCreateManyProductInputEnvelope
    set?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    disconnect?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    delete?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    connect?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    update?: Pedido_itemUpdateWithWhereUniqueWithoutProductInput | Pedido_itemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: Pedido_itemUpdateManyWithWhereWithoutProductInput | Pedido_itemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: Pedido_itemScalarWhereInput | Pedido_itemScalarWhereInput[]
  }

  export type imagem_itemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<imagem_itemCreateWithoutProductInput, imagem_itemUncheckedCreateWithoutProductInput> | imagem_itemCreateWithoutProductInput[] | imagem_itemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: imagem_itemCreateOrConnectWithoutProductInput | imagem_itemCreateOrConnectWithoutProductInput[]
    upsert?: imagem_itemUpsertWithWhereUniqueWithoutProductInput | imagem_itemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: imagem_itemCreateManyProductInputEnvelope
    set?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    disconnect?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    delete?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    connect?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    update?: imagem_itemUpdateWithWhereUniqueWithoutProductInput | imagem_itemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: imagem_itemUpdateManyWithWhereWithoutProductInput | imagem_itemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: imagem_itemScalarWhereInput | imagem_itemScalarWhereInput[]
  }

  export type sub_categoriaCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<sub_categoriaCreateWithoutCategoriaInput, sub_categoriaUncheckedCreateWithoutCategoriaInput> | sub_categoriaCreateWithoutCategoriaInput[] | sub_categoriaUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: sub_categoriaCreateOrConnectWithoutCategoriaInput | sub_categoriaCreateOrConnectWithoutCategoriaInput[]
    createMany?: sub_categoriaCreateManyCategoriaInputEnvelope
    connect?: sub_categoriaWhereUniqueInput | sub_categoriaWhereUniqueInput[]
  }

  export type sub_categoriaUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<sub_categoriaCreateWithoutCategoriaInput, sub_categoriaUncheckedCreateWithoutCategoriaInput> | sub_categoriaCreateWithoutCategoriaInput[] | sub_categoriaUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: sub_categoriaCreateOrConnectWithoutCategoriaInput | sub_categoriaCreateOrConnectWithoutCategoriaInput[]
    createMany?: sub_categoriaCreateManyCategoriaInputEnvelope
    connect?: sub_categoriaWhereUniqueInput | sub_categoriaWhereUniqueInput[]
  }

  export type sub_categoriaUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<sub_categoriaCreateWithoutCategoriaInput, sub_categoriaUncheckedCreateWithoutCategoriaInput> | sub_categoriaCreateWithoutCategoriaInput[] | sub_categoriaUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: sub_categoriaCreateOrConnectWithoutCategoriaInput | sub_categoriaCreateOrConnectWithoutCategoriaInput[]
    upsert?: sub_categoriaUpsertWithWhereUniqueWithoutCategoriaInput | sub_categoriaUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: sub_categoriaCreateManyCategoriaInputEnvelope
    set?: sub_categoriaWhereUniqueInput | sub_categoriaWhereUniqueInput[]
    disconnect?: sub_categoriaWhereUniqueInput | sub_categoriaWhereUniqueInput[]
    delete?: sub_categoriaWhereUniqueInput | sub_categoriaWhereUniqueInput[]
    connect?: sub_categoriaWhereUniqueInput | sub_categoriaWhereUniqueInput[]
    update?: sub_categoriaUpdateWithWhereUniqueWithoutCategoriaInput | sub_categoriaUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: sub_categoriaUpdateManyWithWhereWithoutCategoriaInput | sub_categoriaUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: sub_categoriaScalarWhereInput | sub_categoriaScalarWhereInput[]
  }

  export type sub_categoriaUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<sub_categoriaCreateWithoutCategoriaInput, sub_categoriaUncheckedCreateWithoutCategoriaInput> | sub_categoriaCreateWithoutCategoriaInput[] | sub_categoriaUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: sub_categoriaCreateOrConnectWithoutCategoriaInput | sub_categoriaCreateOrConnectWithoutCategoriaInput[]
    upsert?: sub_categoriaUpsertWithWhereUniqueWithoutCategoriaInput | sub_categoriaUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: sub_categoriaCreateManyCategoriaInputEnvelope
    set?: sub_categoriaWhereUniqueInput | sub_categoriaWhereUniqueInput[]
    disconnect?: sub_categoriaWhereUniqueInput | sub_categoriaWhereUniqueInput[]
    delete?: sub_categoriaWhereUniqueInput | sub_categoriaWhereUniqueInput[]
    connect?: sub_categoriaWhereUniqueInput | sub_categoriaWhereUniqueInput[]
    update?: sub_categoriaUpdateWithWhereUniqueWithoutCategoriaInput | sub_categoriaUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: sub_categoriaUpdateManyWithWhereWithoutCategoriaInput | sub_categoriaUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: sub_categoriaScalarWhereInput | sub_categoriaScalarWhereInput[]
  }

  export type categoriaCreateNestedOneWithoutSub_categoriasInput = {
    create?: XOR<categoriaCreateWithoutSub_categoriasInput, categoriaUncheckedCreateWithoutSub_categoriasInput>
    connectOrCreate?: categoriaCreateOrConnectWithoutSub_categoriasInput
    connect?: categoriaWhereUniqueInput
  }

  export type ProductCreateNestedManyWithoutSub_categoriaInput = {
    create?: XOR<ProductCreateWithoutSub_categoriaInput, ProductUncheckedCreateWithoutSub_categoriaInput> | ProductCreateWithoutSub_categoriaInput[] | ProductUncheckedCreateWithoutSub_categoriaInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutSub_categoriaInput | ProductCreateOrConnectWithoutSub_categoriaInput[]
    createMany?: ProductCreateManySub_categoriaInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutSub_categoriaInput = {
    create?: XOR<ProductCreateWithoutSub_categoriaInput, ProductUncheckedCreateWithoutSub_categoriaInput> | ProductCreateWithoutSub_categoriaInput[] | ProductUncheckedCreateWithoutSub_categoriaInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutSub_categoriaInput | ProductCreateOrConnectWithoutSub_categoriaInput[]
    createMany?: ProductCreateManySub_categoriaInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type categoriaUpdateOneRequiredWithoutSub_categoriasNestedInput = {
    create?: XOR<categoriaCreateWithoutSub_categoriasInput, categoriaUncheckedCreateWithoutSub_categoriasInput>
    connectOrCreate?: categoriaCreateOrConnectWithoutSub_categoriasInput
    upsert?: categoriaUpsertWithoutSub_categoriasInput
    connect?: categoriaWhereUniqueInput
    update?: XOR<XOR<categoriaUpdateToOneWithWhereWithoutSub_categoriasInput, categoriaUpdateWithoutSub_categoriasInput>, categoriaUncheckedUpdateWithoutSub_categoriasInput>
  }

  export type ProductUpdateManyWithoutSub_categoriaNestedInput = {
    create?: XOR<ProductCreateWithoutSub_categoriaInput, ProductUncheckedCreateWithoutSub_categoriaInput> | ProductCreateWithoutSub_categoriaInput[] | ProductUncheckedCreateWithoutSub_categoriaInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutSub_categoriaInput | ProductCreateOrConnectWithoutSub_categoriaInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutSub_categoriaInput | ProductUpsertWithWhereUniqueWithoutSub_categoriaInput[]
    createMany?: ProductCreateManySub_categoriaInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutSub_categoriaInput | ProductUpdateWithWhereUniqueWithoutSub_categoriaInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutSub_categoriaInput | ProductUpdateManyWithWhereWithoutSub_categoriaInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutSub_categoriaNestedInput = {
    create?: XOR<ProductCreateWithoutSub_categoriaInput, ProductUncheckedCreateWithoutSub_categoriaInput> | ProductCreateWithoutSub_categoriaInput[] | ProductUncheckedCreateWithoutSub_categoriaInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutSub_categoriaInput | ProductCreateOrConnectWithoutSub_categoriaInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutSub_categoriaInput | ProductUpsertWithWhereUniqueWithoutSub_categoriaInput[]
    createMany?: ProductCreateManySub_categoriaInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutSub_categoriaInput | ProductUpdateWithWhereUniqueWithoutSub_categoriaInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutSub_categoriaInput | ProductUpdateManyWithWhereWithoutSub_categoriaInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type imagem_itemCreateNestedManyWithoutImagemInput = {
    create?: XOR<imagem_itemCreateWithoutImagemInput, imagem_itemUncheckedCreateWithoutImagemInput> | imagem_itemCreateWithoutImagemInput[] | imagem_itemUncheckedCreateWithoutImagemInput[]
    connectOrCreate?: imagem_itemCreateOrConnectWithoutImagemInput | imagem_itemCreateOrConnectWithoutImagemInput[]
    createMany?: imagem_itemCreateManyImagemInputEnvelope
    connect?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
  }

  export type imagem_itemUncheckedCreateNestedManyWithoutImagemInput = {
    create?: XOR<imagem_itemCreateWithoutImagemInput, imagem_itemUncheckedCreateWithoutImagemInput> | imagem_itemCreateWithoutImagemInput[] | imagem_itemUncheckedCreateWithoutImagemInput[]
    connectOrCreate?: imagem_itemCreateOrConnectWithoutImagemInput | imagem_itemCreateOrConnectWithoutImagemInput[]
    createMany?: imagem_itemCreateManyImagemInputEnvelope
    connect?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
  }

  export type imagem_itemUpdateManyWithoutImagemNestedInput = {
    create?: XOR<imagem_itemCreateWithoutImagemInput, imagem_itemUncheckedCreateWithoutImagemInput> | imagem_itemCreateWithoutImagemInput[] | imagem_itemUncheckedCreateWithoutImagemInput[]
    connectOrCreate?: imagem_itemCreateOrConnectWithoutImagemInput | imagem_itemCreateOrConnectWithoutImagemInput[]
    upsert?: imagem_itemUpsertWithWhereUniqueWithoutImagemInput | imagem_itemUpsertWithWhereUniqueWithoutImagemInput[]
    createMany?: imagem_itemCreateManyImagemInputEnvelope
    set?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    disconnect?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    delete?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    connect?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    update?: imagem_itemUpdateWithWhereUniqueWithoutImagemInput | imagem_itemUpdateWithWhereUniqueWithoutImagemInput[]
    updateMany?: imagem_itemUpdateManyWithWhereWithoutImagemInput | imagem_itemUpdateManyWithWhereWithoutImagemInput[]
    deleteMany?: imagem_itemScalarWhereInput | imagem_itemScalarWhereInput[]
  }

  export type imagem_itemUncheckedUpdateManyWithoutImagemNestedInput = {
    create?: XOR<imagem_itemCreateWithoutImagemInput, imagem_itemUncheckedCreateWithoutImagemInput> | imagem_itemCreateWithoutImagemInput[] | imagem_itemUncheckedCreateWithoutImagemInput[]
    connectOrCreate?: imagem_itemCreateOrConnectWithoutImagemInput | imagem_itemCreateOrConnectWithoutImagemInput[]
    upsert?: imagem_itemUpsertWithWhereUniqueWithoutImagemInput | imagem_itemUpsertWithWhereUniqueWithoutImagemInput[]
    createMany?: imagem_itemCreateManyImagemInputEnvelope
    set?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    disconnect?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    delete?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    connect?: imagem_itemWhereUniqueInput | imagem_itemWhereUniqueInput[]
    update?: imagem_itemUpdateWithWhereUniqueWithoutImagemInput | imagem_itemUpdateWithWhereUniqueWithoutImagemInput[]
    updateMany?: imagem_itemUpdateManyWithWhereWithoutImagemInput | imagem_itemUpdateManyWithWhereWithoutImagemInput[]
    deleteMany?: imagem_itemScalarWhereInput | imagem_itemScalarWhereInput[]
  }

  export type imagemCreateNestedOneWithoutImagem_itemInput = {
    create?: XOR<imagemCreateWithoutImagem_itemInput, imagemUncheckedCreateWithoutImagem_itemInput>
    connectOrCreate?: imagemCreateOrConnectWithoutImagem_itemInput
    connect?: imagemWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutImagem_itemInput = {
    create?: XOR<ProductCreateWithoutImagem_itemInput, ProductUncheckedCreateWithoutImagem_itemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutImagem_itemInput
    connect?: ProductWhereUniqueInput
  }

  export type imagemUpdateOneRequiredWithoutImagem_itemNestedInput = {
    create?: XOR<imagemCreateWithoutImagem_itemInput, imagemUncheckedCreateWithoutImagem_itemInput>
    connectOrCreate?: imagemCreateOrConnectWithoutImagem_itemInput
    upsert?: imagemUpsertWithoutImagem_itemInput
    connect?: imagemWhereUniqueInput
    update?: XOR<XOR<imagemUpdateToOneWithWhereWithoutImagem_itemInput, imagemUpdateWithoutImagem_itemInput>, imagemUncheckedUpdateWithoutImagem_itemInput>
  }

  export type ProductUpdateOneRequiredWithoutImagem_itemNestedInput = {
    create?: XOR<ProductCreateWithoutImagem_itemInput, ProductUncheckedCreateWithoutImagem_itemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutImagem_itemInput
    upsert?: ProductUpsertWithoutImagem_itemInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutImagem_itemInput, ProductUpdateWithoutImagem_itemInput>, ProductUncheckedUpdateWithoutImagem_itemInput>
  }

  export type PedidoCreateNestedManyWithoutClienteInput = {
    create?: XOR<PedidoCreateWithoutClienteInput, PedidoUncheckedCreateWithoutClienteInput> | PedidoCreateWithoutClienteInput[] | PedidoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutClienteInput | PedidoCreateOrConnectWithoutClienteInput[]
    createMany?: PedidoCreateManyClienteInputEnvelope
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
  }

  export type PedidoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<PedidoCreateWithoutClienteInput, PedidoUncheckedCreateWithoutClienteInput> | PedidoCreateWithoutClienteInput[] | PedidoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutClienteInput | PedidoCreateOrConnectWithoutClienteInput[]
    createMany?: PedidoCreateManyClienteInputEnvelope
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
  }

  export type PedidoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<PedidoCreateWithoutClienteInput, PedidoUncheckedCreateWithoutClienteInput> | PedidoCreateWithoutClienteInput[] | PedidoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutClienteInput | PedidoCreateOrConnectWithoutClienteInput[]
    upsert?: PedidoUpsertWithWhereUniqueWithoutClienteInput | PedidoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: PedidoCreateManyClienteInputEnvelope
    set?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    disconnect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    delete?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    update?: PedidoUpdateWithWhereUniqueWithoutClienteInput | PedidoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: PedidoUpdateManyWithWhereWithoutClienteInput | PedidoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
  }

  export type PedidoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<PedidoCreateWithoutClienteInput, PedidoUncheckedCreateWithoutClienteInput> | PedidoCreateWithoutClienteInput[] | PedidoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutClienteInput | PedidoCreateOrConnectWithoutClienteInput[]
    upsert?: PedidoUpsertWithWhereUniqueWithoutClienteInput | PedidoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: PedidoCreateManyClienteInputEnvelope
    set?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    disconnect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    delete?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    update?: PedidoUpdateWithWhereUniqueWithoutClienteInput | PedidoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: PedidoUpdateManyWithWhereWithoutClienteInput | PedidoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
  }

  export type ClienteCreateNestedOneWithoutPedidoInput = {
    create?: XOR<ClienteCreateWithoutPedidoInput, ClienteUncheckedCreateWithoutPedidoInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutPedidoInput
    connect?: ClienteWhereUniqueInput
  }

  export type Tipo_PagamentoCreateNestedOneWithoutPedidoInput = {
    create?: XOR<Tipo_PagamentoCreateWithoutPedidoInput, Tipo_PagamentoUncheckedCreateWithoutPedidoInput>
    connectOrCreate?: Tipo_PagamentoCreateOrConnectWithoutPedidoInput
    connect?: Tipo_PagamentoWhereUniqueInput
  }

  export type Pedido_itemCreateNestedManyWithoutPedidoInput = {
    create?: XOR<Pedido_itemCreateWithoutPedidoInput, Pedido_itemUncheckedCreateWithoutPedidoInput> | Pedido_itemCreateWithoutPedidoInput[] | Pedido_itemUncheckedCreateWithoutPedidoInput[]
    connectOrCreate?: Pedido_itemCreateOrConnectWithoutPedidoInput | Pedido_itemCreateOrConnectWithoutPedidoInput[]
    createMany?: Pedido_itemCreateManyPedidoInputEnvelope
    connect?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
  }

  export type Pedido_itemUncheckedCreateNestedManyWithoutPedidoInput = {
    create?: XOR<Pedido_itemCreateWithoutPedidoInput, Pedido_itemUncheckedCreateWithoutPedidoInput> | Pedido_itemCreateWithoutPedidoInput[] | Pedido_itemUncheckedCreateWithoutPedidoInput[]
    connectOrCreate?: Pedido_itemCreateOrConnectWithoutPedidoInput | Pedido_itemCreateOrConnectWithoutPedidoInput[]
    createMany?: Pedido_itemCreateManyPedidoInputEnvelope
    connect?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
  }

  export type ClienteUpdateOneRequiredWithoutPedidoNestedInput = {
    create?: XOR<ClienteCreateWithoutPedidoInput, ClienteUncheckedCreateWithoutPedidoInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutPedidoInput
    upsert?: ClienteUpsertWithoutPedidoInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutPedidoInput, ClienteUpdateWithoutPedidoInput>, ClienteUncheckedUpdateWithoutPedidoInput>
  }

  export type Tipo_PagamentoUpdateOneRequiredWithoutPedidoNestedInput = {
    create?: XOR<Tipo_PagamentoCreateWithoutPedidoInput, Tipo_PagamentoUncheckedCreateWithoutPedidoInput>
    connectOrCreate?: Tipo_PagamentoCreateOrConnectWithoutPedidoInput
    upsert?: Tipo_PagamentoUpsertWithoutPedidoInput
    connect?: Tipo_PagamentoWhereUniqueInput
    update?: XOR<XOR<Tipo_PagamentoUpdateToOneWithWhereWithoutPedidoInput, Tipo_PagamentoUpdateWithoutPedidoInput>, Tipo_PagamentoUncheckedUpdateWithoutPedidoInput>
  }

  export type Pedido_itemUpdateManyWithoutPedidoNestedInput = {
    create?: XOR<Pedido_itemCreateWithoutPedidoInput, Pedido_itemUncheckedCreateWithoutPedidoInput> | Pedido_itemCreateWithoutPedidoInput[] | Pedido_itemUncheckedCreateWithoutPedidoInput[]
    connectOrCreate?: Pedido_itemCreateOrConnectWithoutPedidoInput | Pedido_itemCreateOrConnectWithoutPedidoInput[]
    upsert?: Pedido_itemUpsertWithWhereUniqueWithoutPedidoInput | Pedido_itemUpsertWithWhereUniqueWithoutPedidoInput[]
    createMany?: Pedido_itemCreateManyPedidoInputEnvelope
    set?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    disconnect?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    delete?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    connect?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    update?: Pedido_itemUpdateWithWhereUniqueWithoutPedidoInput | Pedido_itemUpdateWithWhereUniqueWithoutPedidoInput[]
    updateMany?: Pedido_itemUpdateManyWithWhereWithoutPedidoInput | Pedido_itemUpdateManyWithWhereWithoutPedidoInput[]
    deleteMany?: Pedido_itemScalarWhereInput | Pedido_itemScalarWhereInput[]
  }

  export type Pedido_itemUncheckedUpdateManyWithoutPedidoNestedInput = {
    create?: XOR<Pedido_itemCreateWithoutPedidoInput, Pedido_itemUncheckedCreateWithoutPedidoInput> | Pedido_itemCreateWithoutPedidoInput[] | Pedido_itemUncheckedCreateWithoutPedidoInput[]
    connectOrCreate?: Pedido_itemCreateOrConnectWithoutPedidoInput | Pedido_itemCreateOrConnectWithoutPedidoInput[]
    upsert?: Pedido_itemUpsertWithWhereUniqueWithoutPedidoInput | Pedido_itemUpsertWithWhereUniqueWithoutPedidoInput[]
    createMany?: Pedido_itemCreateManyPedidoInputEnvelope
    set?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    disconnect?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    delete?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    connect?: Pedido_itemWhereUniqueInput | Pedido_itemWhereUniqueInput[]
    update?: Pedido_itemUpdateWithWhereUniqueWithoutPedidoInput | Pedido_itemUpdateWithWhereUniqueWithoutPedidoInput[]
    updateMany?: Pedido_itemUpdateManyWithWhereWithoutPedidoInput | Pedido_itemUpdateManyWithWhereWithoutPedidoInput[]
    deleteMany?: Pedido_itemScalarWhereInput | Pedido_itemScalarWhereInput[]
  }

  export type PedidoCreateNestedOneWithoutPedido_itemInput = {
    create?: XOR<PedidoCreateWithoutPedido_itemInput, PedidoUncheckedCreateWithoutPedido_itemInput>
    connectOrCreate?: PedidoCreateOrConnectWithoutPedido_itemInput
    connect?: PedidoWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutPedido_itemInput = {
    create?: XOR<ProductCreateWithoutPedido_itemInput, ProductUncheckedCreateWithoutPedido_itemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPedido_itemInput
    connect?: ProductWhereUniqueInput
  }

  export type PedidoUpdateOneRequiredWithoutPedido_itemNestedInput = {
    create?: XOR<PedidoCreateWithoutPedido_itemInput, PedidoUncheckedCreateWithoutPedido_itemInput>
    connectOrCreate?: PedidoCreateOrConnectWithoutPedido_itemInput
    upsert?: PedidoUpsertWithoutPedido_itemInput
    connect?: PedidoWhereUniqueInput
    update?: XOR<XOR<PedidoUpdateToOneWithWhereWithoutPedido_itemInput, PedidoUpdateWithoutPedido_itemInput>, PedidoUncheckedUpdateWithoutPedido_itemInput>
  }

  export type ProductUpdateOneRequiredWithoutPedido_itemNestedInput = {
    create?: XOR<ProductCreateWithoutPedido_itemInput, ProductUncheckedCreateWithoutPedido_itemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPedido_itemInput
    upsert?: ProductUpsertWithoutPedido_itemInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutPedido_itemInput, ProductUpdateWithoutPedido_itemInput>, ProductUncheckedUpdateWithoutPedido_itemInput>
  }

  export type PedidoCreateNestedManyWithoutTipo_PagamentoInput = {
    create?: XOR<PedidoCreateWithoutTipo_PagamentoInput, PedidoUncheckedCreateWithoutTipo_PagamentoInput> | PedidoCreateWithoutTipo_PagamentoInput[] | PedidoUncheckedCreateWithoutTipo_PagamentoInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutTipo_PagamentoInput | PedidoCreateOrConnectWithoutTipo_PagamentoInput[]
    createMany?: PedidoCreateManyTipo_PagamentoInputEnvelope
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
  }

  export type PedidoUncheckedCreateNestedManyWithoutTipo_PagamentoInput = {
    create?: XOR<PedidoCreateWithoutTipo_PagamentoInput, PedidoUncheckedCreateWithoutTipo_PagamentoInput> | PedidoCreateWithoutTipo_PagamentoInput[] | PedidoUncheckedCreateWithoutTipo_PagamentoInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutTipo_PagamentoInput | PedidoCreateOrConnectWithoutTipo_PagamentoInput[]
    createMany?: PedidoCreateManyTipo_PagamentoInputEnvelope
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
  }

  export type PedidoUpdateManyWithoutTipo_PagamentoNestedInput = {
    create?: XOR<PedidoCreateWithoutTipo_PagamentoInput, PedidoUncheckedCreateWithoutTipo_PagamentoInput> | PedidoCreateWithoutTipo_PagamentoInput[] | PedidoUncheckedCreateWithoutTipo_PagamentoInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutTipo_PagamentoInput | PedidoCreateOrConnectWithoutTipo_PagamentoInput[]
    upsert?: PedidoUpsertWithWhereUniqueWithoutTipo_PagamentoInput | PedidoUpsertWithWhereUniqueWithoutTipo_PagamentoInput[]
    createMany?: PedidoCreateManyTipo_PagamentoInputEnvelope
    set?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    disconnect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    delete?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    update?: PedidoUpdateWithWhereUniqueWithoutTipo_PagamentoInput | PedidoUpdateWithWhereUniqueWithoutTipo_PagamentoInput[]
    updateMany?: PedidoUpdateManyWithWhereWithoutTipo_PagamentoInput | PedidoUpdateManyWithWhereWithoutTipo_PagamentoInput[]
    deleteMany?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
  }

  export type PedidoUncheckedUpdateManyWithoutTipo_PagamentoNestedInput = {
    create?: XOR<PedidoCreateWithoutTipo_PagamentoInput, PedidoUncheckedCreateWithoutTipo_PagamentoInput> | PedidoCreateWithoutTipo_PagamentoInput[] | PedidoUncheckedCreateWithoutTipo_PagamentoInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutTipo_PagamentoInput | PedidoCreateOrConnectWithoutTipo_PagamentoInput[]
    upsert?: PedidoUpsertWithWhereUniqueWithoutTipo_PagamentoInput | PedidoUpsertWithWhereUniqueWithoutTipo_PagamentoInput[]
    createMany?: PedidoCreateManyTipo_PagamentoInputEnvelope
    set?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    disconnect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    delete?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    update?: PedidoUpdateWithWhereUniqueWithoutTipo_PagamentoInput | PedidoUpdateWithWhereUniqueWithoutTipo_PagamentoInput[]
    updateMany?: PedidoUpdateManyWithWhereWithoutTipo_PagamentoInput | PedidoUpdateManyWithWhereWithoutTipo_PagamentoInput[]
    deleteMany?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type sub_categoriaCreateWithoutProdutosInput = {
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
    categoria: categoriaCreateNestedOneWithoutSub_categoriasInput
  }

  export type sub_categoriaUncheckedCreateWithoutProdutosInput = {
    sub_categoria_id?: number
    categoria_id: number
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
  }

  export type sub_categoriaCreateOrConnectWithoutProdutosInput = {
    where: sub_categoriaWhereUniqueInput
    create: XOR<sub_categoriaCreateWithoutProdutosInput, sub_categoriaUncheckedCreateWithoutProdutosInput>
  }

  export type Pedido_itemCreateWithoutProductInput = {
    Pedido_item_valor: number
    Pedido_item_qtd: number
    Pedido: PedidoCreateNestedOneWithoutPedido_itemInput
  }

  export type Pedido_itemUncheckedCreateWithoutProductInput = {
    Pedido_item_id?: number
    pedido_id: number
    Pedido_item_valor: number
    Pedido_item_qtd: number
  }

  export type Pedido_itemCreateOrConnectWithoutProductInput = {
    where: Pedido_itemWhereUniqueInput
    create: XOR<Pedido_itemCreateWithoutProductInput, Pedido_itemUncheckedCreateWithoutProductInput>
  }

  export type Pedido_itemCreateManyProductInputEnvelope = {
    data: Pedido_itemCreateManyProductInput | Pedido_itemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type imagem_itemCreateWithoutProductInput = {
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
    imagem: imagemCreateNestedOneWithoutImagem_itemInput
  }

  export type imagem_itemUncheckedCreateWithoutProductInput = {
    imagem_item_id?: number
    imagem_id: number
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
  }

  export type imagem_itemCreateOrConnectWithoutProductInput = {
    where: imagem_itemWhereUniqueInput
    create: XOR<imagem_itemCreateWithoutProductInput, imagem_itemUncheckedCreateWithoutProductInput>
  }

  export type imagem_itemCreateManyProductInputEnvelope = {
    data: imagem_itemCreateManyProductInput | imagem_itemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type sub_categoriaUpsertWithoutProdutosInput = {
    update: XOR<sub_categoriaUpdateWithoutProdutosInput, sub_categoriaUncheckedUpdateWithoutProdutosInput>
    create: XOR<sub_categoriaCreateWithoutProdutosInput, sub_categoriaUncheckedCreateWithoutProdutosInput>
    where?: sub_categoriaWhereInput
  }

  export type sub_categoriaUpdateToOneWithWhereWithoutProdutosInput = {
    where?: sub_categoriaWhereInput
    data: XOR<sub_categoriaUpdateWithoutProdutosInput, sub_categoriaUncheckedUpdateWithoutProdutosInput>
  }

  export type sub_categoriaUpdateWithoutProdutosInput = {
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria?: categoriaUpdateOneRequiredWithoutSub_categoriasNestedInput
  }

  export type sub_categoriaUncheckedUpdateWithoutProdutosInput = {
    sub_categoria_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Pedido_itemUpsertWithWhereUniqueWithoutProductInput = {
    where: Pedido_itemWhereUniqueInput
    update: XOR<Pedido_itemUpdateWithoutProductInput, Pedido_itemUncheckedUpdateWithoutProductInput>
    create: XOR<Pedido_itemCreateWithoutProductInput, Pedido_itemUncheckedCreateWithoutProductInput>
  }

  export type Pedido_itemUpdateWithWhereUniqueWithoutProductInput = {
    where: Pedido_itemWhereUniqueInput
    data: XOR<Pedido_itemUpdateWithoutProductInput, Pedido_itemUncheckedUpdateWithoutProductInput>
  }

  export type Pedido_itemUpdateManyWithWhereWithoutProductInput = {
    where: Pedido_itemScalarWhereInput
    data: XOR<Pedido_itemUpdateManyMutationInput, Pedido_itemUncheckedUpdateManyWithoutProductInput>
  }

  export type Pedido_itemScalarWhereInput = {
    AND?: Pedido_itemScalarWhereInput | Pedido_itemScalarWhereInput[]
    OR?: Pedido_itemScalarWhereInput[]
    NOT?: Pedido_itemScalarWhereInput | Pedido_itemScalarWhereInput[]
    Pedido_item_id?: IntFilter<"Pedido_item"> | number
    pedido_id?: IntFilter<"Pedido_item"> | number
    product_id?: IntFilter<"Pedido_item"> | number
    Pedido_item_valor?: FloatFilter<"Pedido_item"> | number
    Pedido_item_qtd?: IntFilter<"Pedido_item"> | number
  }

  export type imagem_itemUpsertWithWhereUniqueWithoutProductInput = {
    where: imagem_itemWhereUniqueInput
    update: XOR<imagem_itemUpdateWithoutProductInput, imagem_itemUncheckedUpdateWithoutProductInput>
    create: XOR<imagem_itemCreateWithoutProductInput, imagem_itemUncheckedCreateWithoutProductInput>
  }

  export type imagem_itemUpdateWithWhereUniqueWithoutProductInput = {
    where: imagem_itemWhereUniqueInput
    data: XOR<imagem_itemUpdateWithoutProductInput, imagem_itemUncheckedUpdateWithoutProductInput>
  }

  export type imagem_itemUpdateManyWithWhereWithoutProductInput = {
    where: imagem_itemScalarWhereInput
    data: XOR<imagem_itemUpdateManyMutationInput, imagem_itemUncheckedUpdateManyWithoutProductInput>
  }

  export type imagem_itemScalarWhereInput = {
    AND?: imagem_itemScalarWhereInput | imagem_itemScalarWhereInput[]
    OR?: imagem_itemScalarWhereInput[]
    NOT?: imagem_itemScalarWhereInput | imagem_itemScalarWhereInput[]
    imagem_item_id?: IntFilter<"imagem_item"> | number
    imagem_id?: IntFilter<"imagem_item"> | number
    product_id?: IntFilter<"imagem_item"> | number
    sub_categoria_nome?: StringFilter<"imagem_item"> | string
    sub_categoria_createdAt?: DateTimeFilter<"imagem_item"> | Date | string
    sub_categoria_updatedAt?: DateTimeFilter<"imagem_item"> | Date | string
  }

  export type sub_categoriaCreateWithoutCategoriaInput = {
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
    produtos?: ProductCreateNestedManyWithoutSub_categoriaInput
  }

  export type sub_categoriaUncheckedCreateWithoutCategoriaInput = {
    sub_categoria_id?: number
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
    produtos?: ProductUncheckedCreateNestedManyWithoutSub_categoriaInput
  }

  export type sub_categoriaCreateOrConnectWithoutCategoriaInput = {
    where: sub_categoriaWhereUniqueInput
    create: XOR<sub_categoriaCreateWithoutCategoriaInput, sub_categoriaUncheckedCreateWithoutCategoriaInput>
  }

  export type sub_categoriaCreateManyCategoriaInputEnvelope = {
    data: sub_categoriaCreateManyCategoriaInput | sub_categoriaCreateManyCategoriaInput[]
    skipDuplicates?: boolean
  }

  export type sub_categoriaUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: sub_categoriaWhereUniqueInput
    update: XOR<sub_categoriaUpdateWithoutCategoriaInput, sub_categoriaUncheckedUpdateWithoutCategoriaInput>
    create: XOR<sub_categoriaCreateWithoutCategoriaInput, sub_categoriaUncheckedCreateWithoutCategoriaInput>
  }

  export type sub_categoriaUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: sub_categoriaWhereUniqueInput
    data: XOR<sub_categoriaUpdateWithoutCategoriaInput, sub_categoriaUncheckedUpdateWithoutCategoriaInput>
  }

  export type sub_categoriaUpdateManyWithWhereWithoutCategoriaInput = {
    where: sub_categoriaScalarWhereInput
    data: XOR<sub_categoriaUpdateManyMutationInput, sub_categoriaUncheckedUpdateManyWithoutCategoriaInput>
  }

  export type sub_categoriaScalarWhereInput = {
    AND?: sub_categoriaScalarWhereInput | sub_categoriaScalarWhereInput[]
    OR?: sub_categoriaScalarWhereInput[]
    NOT?: sub_categoriaScalarWhereInput | sub_categoriaScalarWhereInput[]
    sub_categoria_id?: IntFilter<"sub_categoria"> | number
    categoria_id?: IntFilter<"sub_categoria"> | number
    sub_categoria_nome?: StringFilter<"sub_categoria"> | string
    sub_categoria_createdAt?: DateTimeFilter<"sub_categoria"> | Date | string
    sub_categoria_updatedAt?: DateTimeFilter<"sub_categoria"> | Date | string
  }

  export type categoriaCreateWithoutSub_categoriasInput = {
    categoria_nome: string
    categoria_createdAt?: Date | string
    categoria_updatedAt?: Date | string
  }

  export type categoriaUncheckedCreateWithoutSub_categoriasInput = {
    categoria_id?: number
    categoria_nome: string
    categoria_createdAt?: Date | string
    categoria_updatedAt?: Date | string
  }

  export type categoriaCreateOrConnectWithoutSub_categoriasInput = {
    where: categoriaWhereUniqueInput
    create: XOR<categoriaCreateWithoutSub_categoriasInput, categoriaUncheckedCreateWithoutSub_categoriasInput>
  }

  export type ProductCreateWithoutSub_categoriaInput = {
    product_nome: string
    product_valor: number
    product_imagem_id: number
    product_marca: number
    product_descricao: string
    user_createdAt?: Date | string
    user_updatedAt?: Date | string
    Pedido_item?: Pedido_itemCreateNestedManyWithoutProductInput
    imagem_item?: imagem_itemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutSub_categoriaInput = {
    product_id?: number
    product_nome: string
    product_valor: number
    product_imagem_id: number
    product_marca: number
    product_descricao: string
    user_createdAt?: Date | string
    user_updatedAt?: Date | string
    Pedido_item?: Pedido_itemUncheckedCreateNestedManyWithoutProductInput
    imagem_item?: imagem_itemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSub_categoriaInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSub_categoriaInput, ProductUncheckedCreateWithoutSub_categoriaInput>
  }

  export type ProductCreateManySub_categoriaInputEnvelope = {
    data: ProductCreateManySub_categoriaInput | ProductCreateManySub_categoriaInput[]
    skipDuplicates?: boolean
  }

  export type categoriaUpsertWithoutSub_categoriasInput = {
    update: XOR<categoriaUpdateWithoutSub_categoriasInput, categoriaUncheckedUpdateWithoutSub_categoriasInput>
    create: XOR<categoriaCreateWithoutSub_categoriasInput, categoriaUncheckedCreateWithoutSub_categoriasInput>
    where?: categoriaWhereInput
  }

  export type categoriaUpdateToOneWithWhereWithoutSub_categoriasInput = {
    where?: categoriaWhereInput
    data: XOR<categoriaUpdateWithoutSub_categoriasInput, categoriaUncheckedUpdateWithoutSub_categoriasInput>
  }

  export type categoriaUpdateWithoutSub_categoriasInput = {
    categoria_nome?: StringFieldUpdateOperationsInput | string
    categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoriaUncheckedUpdateWithoutSub_categoriasInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
    categoria_nome?: StringFieldUpdateOperationsInput | string
    categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpsertWithWhereUniqueWithoutSub_categoriaInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutSub_categoriaInput, ProductUncheckedUpdateWithoutSub_categoriaInput>
    create: XOR<ProductCreateWithoutSub_categoriaInput, ProductUncheckedCreateWithoutSub_categoriaInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutSub_categoriaInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutSub_categoriaInput, ProductUncheckedUpdateWithoutSub_categoriaInput>
  }

  export type ProductUpdateManyWithWhereWithoutSub_categoriaInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutSub_categoriaInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    product_id?: IntFilter<"Product"> | number
    product_sub_id?: IntFilter<"Product"> | number
    product_nome?: StringFilter<"Product"> | string
    product_valor?: FloatFilter<"Product"> | number
    product_imagem_id?: IntFilter<"Product"> | number
    product_marca?: IntFilter<"Product"> | number
    product_descricao?: StringFilter<"Product"> | string
    user_createdAt?: DateTimeFilter<"Product"> | Date | string
    user_updatedAt?: DateTimeFilter<"Product"> | Date | string
  }

  export type imagem_itemCreateWithoutImagemInput = {
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutImagem_itemInput
  }

  export type imagem_itemUncheckedCreateWithoutImagemInput = {
    imagem_item_id?: number
    product_id: number
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
  }

  export type imagem_itemCreateOrConnectWithoutImagemInput = {
    where: imagem_itemWhereUniqueInput
    create: XOR<imagem_itemCreateWithoutImagemInput, imagem_itemUncheckedCreateWithoutImagemInput>
  }

  export type imagem_itemCreateManyImagemInputEnvelope = {
    data: imagem_itemCreateManyImagemInput | imagem_itemCreateManyImagemInput[]
    skipDuplicates?: boolean
  }

  export type imagem_itemUpsertWithWhereUniqueWithoutImagemInput = {
    where: imagem_itemWhereUniqueInput
    update: XOR<imagem_itemUpdateWithoutImagemInput, imagem_itemUncheckedUpdateWithoutImagemInput>
    create: XOR<imagem_itemCreateWithoutImagemInput, imagem_itemUncheckedCreateWithoutImagemInput>
  }

  export type imagem_itemUpdateWithWhereUniqueWithoutImagemInput = {
    where: imagem_itemWhereUniqueInput
    data: XOR<imagem_itemUpdateWithoutImagemInput, imagem_itemUncheckedUpdateWithoutImagemInput>
  }

  export type imagem_itemUpdateManyWithWhereWithoutImagemInput = {
    where: imagem_itemScalarWhereInput
    data: XOR<imagem_itemUpdateManyMutationInput, imagem_itemUncheckedUpdateManyWithoutImagemInput>
  }

  export type imagemCreateWithoutImagem_itemInput = {
    imagem_path: string
    categoria_createdAt?: Date | string
    categoria_updatedAt?: Date | string
  }

  export type imagemUncheckedCreateWithoutImagem_itemInput = {
    imagem_id?: number
    imagem_path: string
    categoria_createdAt?: Date | string
    categoria_updatedAt?: Date | string
  }

  export type imagemCreateOrConnectWithoutImagem_itemInput = {
    where: imagemWhereUniqueInput
    create: XOR<imagemCreateWithoutImagem_itemInput, imagemUncheckedCreateWithoutImagem_itemInput>
  }

  export type ProductCreateWithoutImagem_itemInput = {
    product_nome: string
    product_valor: number
    product_imagem_id: number
    product_marca: number
    product_descricao: string
    user_createdAt?: Date | string
    user_updatedAt?: Date | string
    sub_categoria: sub_categoriaCreateNestedOneWithoutProdutosInput
    Pedido_item?: Pedido_itemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutImagem_itemInput = {
    product_id?: number
    product_sub_id: number
    product_nome: string
    product_valor: number
    product_imagem_id: number
    product_marca: number
    product_descricao: string
    user_createdAt?: Date | string
    user_updatedAt?: Date | string
    Pedido_item?: Pedido_itemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutImagem_itemInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutImagem_itemInput, ProductUncheckedCreateWithoutImagem_itemInput>
  }

  export type imagemUpsertWithoutImagem_itemInput = {
    update: XOR<imagemUpdateWithoutImagem_itemInput, imagemUncheckedUpdateWithoutImagem_itemInput>
    create: XOR<imagemCreateWithoutImagem_itemInput, imagemUncheckedCreateWithoutImagem_itemInput>
    where?: imagemWhereInput
  }

  export type imagemUpdateToOneWithWhereWithoutImagem_itemInput = {
    where?: imagemWhereInput
    data: XOR<imagemUpdateWithoutImagem_itemInput, imagemUncheckedUpdateWithoutImagem_itemInput>
  }

  export type imagemUpdateWithoutImagem_itemInput = {
    imagem_path?: StringFieldUpdateOperationsInput | string
    categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagemUncheckedUpdateWithoutImagem_itemInput = {
    imagem_id?: IntFieldUpdateOperationsInput | number
    imagem_path?: StringFieldUpdateOperationsInput | string
    categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpsertWithoutImagem_itemInput = {
    update: XOR<ProductUpdateWithoutImagem_itemInput, ProductUncheckedUpdateWithoutImagem_itemInput>
    create: XOR<ProductCreateWithoutImagem_itemInput, ProductUncheckedCreateWithoutImagem_itemInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutImagem_itemInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutImagem_itemInput, ProductUncheckedUpdateWithoutImagem_itemInput>
  }

  export type ProductUpdateWithoutImagem_itemInput = {
    product_nome?: StringFieldUpdateOperationsInput | string
    product_valor?: FloatFieldUpdateOperationsInput | number
    product_imagem_id?: IntFieldUpdateOperationsInput | number
    product_marca?: IntFieldUpdateOperationsInput | number
    product_descricao?: StringFieldUpdateOperationsInput | string
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria?: sub_categoriaUpdateOneRequiredWithoutProdutosNestedInput
    Pedido_item?: Pedido_itemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutImagem_itemInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_sub_id?: IntFieldUpdateOperationsInput | number
    product_nome?: StringFieldUpdateOperationsInput | string
    product_valor?: FloatFieldUpdateOperationsInput | number
    product_imagem_id?: IntFieldUpdateOperationsInput | number
    product_marca?: IntFieldUpdateOperationsInput | number
    product_descricao?: StringFieldUpdateOperationsInput | string
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Pedido_item?: Pedido_itemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type PedidoCreateWithoutClienteInput = {
    pedido_status: string
    pedido_valor_total: number
    pedido_frete_total: number
    pedido_data?: Date | string
    Tipo_Pagamento: Tipo_PagamentoCreateNestedOneWithoutPedidoInput
    Pedido_item?: Pedido_itemCreateNestedManyWithoutPedidoInput
  }

  export type PedidoUncheckedCreateWithoutClienteInput = {
    pedido_id?: number
    pedido_status: string
    pedido_valor_total: number
    pedido_frete_total: number
    pedido_data?: Date | string
    tipo_pagamento_id: number
    Pedido_item?: Pedido_itemUncheckedCreateNestedManyWithoutPedidoInput
  }

  export type PedidoCreateOrConnectWithoutClienteInput = {
    where: PedidoWhereUniqueInput
    create: XOR<PedidoCreateWithoutClienteInput, PedidoUncheckedCreateWithoutClienteInput>
  }

  export type PedidoCreateManyClienteInputEnvelope = {
    data: PedidoCreateManyClienteInput | PedidoCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type PedidoUpsertWithWhereUniqueWithoutClienteInput = {
    where: PedidoWhereUniqueInput
    update: XOR<PedidoUpdateWithoutClienteInput, PedidoUncheckedUpdateWithoutClienteInput>
    create: XOR<PedidoCreateWithoutClienteInput, PedidoUncheckedCreateWithoutClienteInput>
  }

  export type PedidoUpdateWithWhereUniqueWithoutClienteInput = {
    where: PedidoWhereUniqueInput
    data: XOR<PedidoUpdateWithoutClienteInput, PedidoUncheckedUpdateWithoutClienteInput>
  }

  export type PedidoUpdateManyWithWhereWithoutClienteInput = {
    where: PedidoScalarWhereInput
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyWithoutClienteInput>
  }

  export type PedidoScalarWhereInput = {
    AND?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
    OR?: PedidoScalarWhereInput[]
    NOT?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
    pedido_id?: IntFilter<"Pedido"> | number
    cliente_id?: IntFilter<"Pedido"> | number
    pedido_status?: StringFilter<"Pedido"> | string
    pedido_valor_total?: FloatFilter<"Pedido"> | number
    pedido_frete_total?: FloatFilter<"Pedido"> | number
    pedido_data?: DateTimeFilter<"Pedido"> | Date | string
    tipo_pagamento_id?: IntFilter<"Pedido"> | number
  }

  export type ClienteCreateWithoutPedidoInput = {
    cliente_name: string
    cliente_email: string
    cliente_cpf: string
    cliente_phone: string
    cliente_createdAt?: Date | string
    cliente_updatedAt?: Date | string
  }

  export type ClienteUncheckedCreateWithoutPedidoInput = {
    cliente_id?: number
    cliente_name: string
    cliente_email: string
    cliente_cpf: string
    cliente_phone: string
    cliente_createdAt?: Date | string
    cliente_updatedAt?: Date | string
  }

  export type ClienteCreateOrConnectWithoutPedidoInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutPedidoInput, ClienteUncheckedCreateWithoutPedidoInput>
  }

  export type Tipo_PagamentoCreateWithoutPedidoInput = {
    tipo_pagamento_name: string
    tipo_pagamento_createdAt?: Date | string
    tipo_pagamento_updatedAt?: Date | string
  }

  export type Tipo_PagamentoUncheckedCreateWithoutPedidoInput = {
    tipo_pagamento_id?: number
    tipo_pagamento_name: string
    tipo_pagamento_createdAt?: Date | string
    tipo_pagamento_updatedAt?: Date | string
  }

  export type Tipo_PagamentoCreateOrConnectWithoutPedidoInput = {
    where: Tipo_PagamentoWhereUniqueInput
    create: XOR<Tipo_PagamentoCreateWithoutPedidoInput, Tipo_PagamentoUncheckedCreateWithoutPedidoInput>
  }

  export type Pedido_itemCreateWithoutPedidoInput = {
    Pedido_item_valor: number
    Pedido_item_qtd: number
    Product: ProductCreateNestedOneWithoutPedido_itemInput
  }

  export type Pedido_itemUncheckedCreateWithoutPedidoInput = {
    Pedido_item_id?: number
    product_id: number
    Pedido_item_valor: number
    Pedido_item_qtd: number
  }

  export type Pedido_itemCreateOrConnectWithoutPedidoInput = {
    where: Pedido_itemWhereUniqueInput
    create: XOR<Pedido_itemCreateWithoutPedidoInput, Pedido_itemUncheckedCreateWithoutPedidoInput>
  }

  export type Pedido_itemCreateManyPedidoInputEnvelope = {
    data: Pedido_itemCreateManyPedidoInput | Pedido_itemCreateManyPedidoInput[]
    skipDuplicates?: boolean
  }

  export type ClienteUpsertWithoutPedidoInput = {
    update: XOR<ClienteUpdateWithoutPedidoInput, ClienteUncheckedUpdateWithoutPedidoInput>
    create: XOR<ClienteCreateWithoutPedidoInput, ClienteUncheckedCreateWithoutPedidoInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutPedidoInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutPedidoInput, ClienteUncheckedUpdateWithoutPedidoInput>
  }

  export type ClienteUpdateWithoutPedidoInput = {
    cliente_name?: StringFieldUpdateOperationsInput | string
    cliente_email?: StringFieldUpdateOperationsInput | string
    cliente_cpf?: StringFieldUpdateOperationsInput | string
    cliente_phone?: StringFieldUpdateOperationsInput | string
    cliente_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteUncheckedUpdateWithoutPedidoInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    cliente_name?: StringFieldUpdateOperationsInput | string
    cliente_email?: StringFieldUpdateOperationsInput | string
    cliente_cpf?: StringFieldUpdateOperationsInput | string
    cliente_phone?: StringFieldUpdateOperationsInput | string
    cliente_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Tipo_PagamentoUpsertWithoutPedidoInput = {
    update: XOR<Tipo_PagamentoUpdateWithoutPedidoInput, Tipo_PagamentoUncheckedUpdateWithoutPedidoInput>
    create: XOR<Tipo_PagamentoCreateWithoutPedidoInput, Tipo_PagamentoUncheckedCreateWithoutPedidoInput>
    where?: Tipo_PagamentoWhereInput
  }

  export type Tipo_PagamentoUpdateToOneWithWhereWithoutPedidoInput = {
    where?: Tipo_PagamentoWhereInput
    data: XOR<Tipo_PagamentoUpdateWithoutPedidoInput, Tipo_PagamentoUncheckedUpdateWithoutPedidoInput>
  }

  export type Tipo_PagamentoUpdateWithoutPedidoInput = {
    tipo_pagamento_name?: StringFieldUpdateOperationsInput | string
    tipo_pagamento_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_pagamento_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Tipo_PagamentoUncheckedUpdateWithoutPedidoInput = {
    tipo_pagamento_id?: IntFieldUpdateOperationsInput | number
    tipo_pagamento_name?: StringFieldUpdateOperationsInput | string
    tipo_pagamento_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_pagamento_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Pedido_itemUpsertWithWhereUniqueWithoutPedidoInput = {
    where: Pedido_itemWhereUniqueInput
    update: XOR<Pedido_itemUpdateWithoutPedidoInput, Pedido_itemUncheckedUpdateWithoutPedidoInput>
    create: XOR<Pedido_itemCreateWithoutPedidoInput, Pedido_itemUncheckedCreateWithoutPedidoInput>
  }

  export type Pedido_itemUpdateWithWhereUniqueWithoutPedidoInput = {
    where: Pedido_itemWhereUniqueInput
    data: XOR<Pedido_itemUpdateWithoutPedidoInput, Pedido_itemUncheckedUpdateWithoutPedidoInput>
  }

  export type Pedido_itemUpdateManyWithWhereWithoutPedidoInput = {
    where: Pedido_itemScalarWhereInput
    data: XOR<Pedido_itemUpdateManyMutationInput, Pedido_itemUncheckedUpdateManyWithoutPedidoInput>
  }

  export type PedidoCreateWithoutPedido_itemInput = {
    pedido_status: string
    pedido_valor_total: number
    pedido_frete_total: number
    pedido_data?: Date | string
    Cliente: ClienteCreateNestedOneWithoutPedidoInput
    Tipo_Pagamento: Tipo_PagamentoCreateNestedOneWithoutPedidoInput
  }

  export type PedidoUncheckedCreateWithoutPedido_itemInput = {
    pedido_id?: number
    cliente_id: number
    pedido_status: string
    pedido_valor_total: number
    pedido_frete_total: number
    pedido_data?: Date | string
    tipo_pagamento_id: number
  }

  export type PedidoCreateOrConnectWithoutPedido_itemInput = {
    where: PedidoWhereUniqueInput
    create: XOR<PedidoCreateWithoutPedido_itemInput, PedidoUncheckedCreateWithoutPedido_itemInput>
  }

  export type ProductCreateWithoutPedido_itemInput = {
    product_nome: string
    product_valor: number
    product_imagem_id: number
    product_marca: number
    product_descricao: string
    user_createdAt?: Date | string
    user_updatedAt?: Date | string
    sub_categoria: sub_categoriaCreateNestedOneWithoutProdutosInput
    imagem_item?: imagem_itemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutPedido_itemInput = {
    product_id?: number
    product_sub_id: number
    product_nome: string
    product_valor: number
    product_imagem_id: number
    product_marca: number
    product_descricao: string
    user_createdAt?: Date | string
    user_updatedAt?: Date | string
    imagem_item?: imagem_itemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutPedido_itemInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutPedido_itemInput, ProductUncheckedCreateWithoutPedido_itemInput>
  }

  export type PedidoUpsertWithoutPedido_itemInput = {
    update: XOR<PedidoUpdateWithoutPedido_itemInput, PedidoUncheckedUpdateWithoutPedido_itemInput>
    create: XOR<PedidoCreateWithoutPedido_itemInput, PedidoUncheckedCreateWithoutPedido_itemInput>
    where?: PedidoWhereInput
  }

  export type PedidoUpdateToOneWithWhereWithoutPedido_itemInput = {
    where?: PedidoWhereInput
    data: XOR<PedidoUpdateWithoutPedido_itemInput, PedidoUncheckedUpdateWithoutPedido_itemInput>
  }

  export type PedidoUpdateWithoutPedido_itemInput = {
    pedido_status?: StringFieldUpdateOperationsInput | string
    pedido_valor_total?: FloatFieldUpdateOperationsInput | number
    pedido_frete_total?: FloatFieldUpdateOperationsInput | number
    pedido_data?: DateTimeFieldUpdateOperationsInput | Date | string
    Cliente?: ClienteUpdateOneRequiredWithoutPedidoNestedInput
    Tipo_Pagamento?: Tipo_PagamentoUpdateOneRequiredWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateWithoutPedido_itemInput = {
    pedido_id?: IntFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    pedido_status?: StringFieldUpdateOperationsInput | string
    pedido_valor_total?: FloatFieldUpdateOperationsInput | number
    pedido_frete_total?: FloatFieldUpdateOperationsInput | number
    pedido_data?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_pagamento_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProductUpsertWithoutPedido_itemInput = {
    update: XOR<ProductUpdateWithoutPedido_itemInput, ProductUncheckedUpdateWithoutPedido_itemInput>
    create: XOR<ProductCreateWithoutPedido_itemInput, ProductUncheckedCreateWithoutPedido_itemInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutPedido_itemInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutPedido_itemInput, ProductUncheckedUpdateWithoutPedido_itemInput>
  }

  export type ProductUpdateWithoutPedido_itemInput = {
    product_nome?: StringFieldUpdateOperationsInput | string
    product_valor?: FloatFieldUpdateOperationsInput | number
    product_imagem_id?: IntFieldUpdateOperationsInput | number
    product_marca?: IntFieldUpdateOperationsInput | number
    product_descricao?: StringFieldUpdateOperationsInput | string
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria?: sub_categoriaUpdateOneRequiredWithoutProdutosNestedInput
    imagem_item?: imagem_itemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutPedido_itemInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_sub_id?: IntFieldUpdateOperationsInput | number
    product_nome?: StringFieldUpdateOperationsInput | string
    product_valor?: FloatFieldUpdateOperationsInput | number
    product_imagem_id?: IntFieldUpdateOperationsInput | number
    product_marca?: IntFieldUpdateOperationsInput | number
    product_descricao?: StringFieldUpdateOperationsInput | string
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imagem_item?: imagem_itemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type PedidoCreateWithoutTipo_PagamentoInput = {
    pedido_status: string
    pedido_valor_total: number
    pedido_frete_total: number
    pedido_data?: Date | string
    Cliente: ClienteCreateNestedOneWithoutPedidoInput
    Pedido_item?: Pedido_itemCreateNestedManyWithoutPedidoInput
  }

  export type PedidoUncheckedCreateWithoutTipo_PagamentoInput = {
    pedido_id?: number
    cliente_id: number
    pedido_status: string
    pedido_valor_total: number
    pedido_frete_total: number
    pedido_data?: Date | string
    Pedido_item?: Pedido_itemUncheckedCreateNestedManyWithoutPedidoInput
  }

  export type PedidoCreateOrConnectWithoutTipo_PagamentoInput = {
    where: PedidoWhereUniqueInput
    create: XOR<PedidoCreateWithoutTipo_PagamentoInput, PedidoUncheckedCreateWithoutTipo_PagamentoInput>
  }

  export type PedidoCreateManyTipo_PagamentoInputEnvelope = {
    data: PedidoCreateManyTipo_PagamentoInput | PedidoCreateManyTipo_PagamentoInput[]
    skipDuplicates?: boolean
  }

  export type PedidoUpsertWithWhereUniqueWithoutTipo_PagamentoInput = {
    where: PedidoWhereUniqueInput
    update: XOR<PedidoUpdateWithoutTipo_PagamentoInput, PedidoUncheckedUpdateWithoutTipo_PagamentoInput>
    create: XOR<PedidoCreateWithoutTipo_PagamentoInput, PedidoUncheckedCreateWithoutTipo_PagamentoInput>
  }

  export type PedidoUpdateWithWhereUniqueWithoutTipo_PagamentoInput = {
    where: PedidoWhereUniqueInput
    data: XOR<PedidoUpdateWithoutTipo_PagamentoInput, PedidoUncheckedUpdateWithoutTipo_PagamentoInput>
  }

  export type PedidoUpdateManyWithWhereWithoutTipo_PagamentoInput = {
    where: PedidoScalarWhereInput
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyWithoutTipo_PagamentoInput>
  }

  export type Pedido_itemCreateManyProductInput = {
    Pedido_item_id?: number
    pedido_id: number
    Pedido_item_valor: number
    Pedido_item_qtd: number
  }

  export type imagem_itemCreateManyProductInput = {
    imagem_item_id?: number
    imagem_id: number
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
  }

  export type Pedido_itemUpdateWithoutProductInput = {
    Pedido_item_valor?: FloatFieldUpdateOperationsInput | number
    Pedido_item_qtd?: IntFieldUpdateOperationsInput | number
    Pedido?: PedidoUpdateOneRequiredWithoutPedido_itemNestedInput
  }

  export type Pedido_itemUncheckedUpdateWithoutProductInput = {
    Pedido_item_id?: IntFieldUpdateOperationsInput | number
    pedido_id?: IntFieldUpdateOperationsInput | number
    Pedido_item_valor?: FloatFieldUpdateOperationsInput | number
    Pedido_item_qtd?: IntFieldUpdateOperationsInput | number
  }

  export type Pedido_itemUncheckedUpdateManyWithoutProductInput = {
    Pedido_item_id?: IntFieldUpdateOperationsInput | number
    pedido_id?: IntFieldUpdateOperationsInput | number
    Pedido_item_valor?: FloatFieldUpdateOperationsInput | number
    Pedido_item_qtd?: IntFieldUpdateOperationsInput | number
  }

  export type imagem_itemUpdateWithoutProductInput = {
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imagem?: imagemUpdateOneRequiredWithoutImagem_itemNestedInput
  }

  export type imagem_itemUncheckedUpdateWithoutProductInput = {
    imagem_item_id?: IntFieldUpdateOperationsInput | number
    imagem_id?: IntFieldUpdateOperationsInput | number
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagem_itemUncheckedUpdateManyWithoutProductInput = {
    imagem_item_id?: IntFieldUpdateOperationsInput | number
    imagem_id?: IntFieldUpdateOperationsInput | number
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sub_categoriaCreateManyCategoriaInput = {
    sub_categoria_id?: number
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
  }

  export type sub_categoriaUpdateWithoutCategoriaInput = {
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    produtos?: ProductUpdateManyWithoutSub_categoriaNestedInput
  }

  export type sub_categoriaUncheckedUpdateWithoutCategoriaInput = {
    sub_categoria_id?: IntFieldUpdateOperationsInput | number
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    produtos?: ProductUncheckedUpdateManyWithoutSub_categoriaNestedInput
  }

  export type sub_categoriaUncheckedUpdateManyWithoutCategoriaInput = {
    sub_categoria_id?: IntFieldUpdateOperationsInput | number
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateManySub_categoriaInput = {
    product_id?: number
    product_nome: string
    product_valor: number
    product_imagem_id: number
    product_marca: number
    product_descricao: string
    user_createdAt?: Date | string
    user_updatedAt?: Date | string
  }

  export type ProductUpdateWithoutSub_categoriaInput = {
    product_nome?: StringFieldUpdateOperationsInput | string
    product_valor?: FloatFieldUpdateOperationsInput | number
    product_imagem_id?: IntFieldUpdateOperationsInput | number
    product_marca?: IntFieldUpdateOperationsInput | number
    product_descricao?: StringFieldUpdateOperationsInput | string
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Pedido_item?: Pedido_itemUpdateManyWithoutProductNestedInput
    imagem_item?: imagem_itemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutSub_categoriaInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_nome?: StringFieldUpdateOperationsInput | string
    product_valor?: FloatFieldUpdateOperationsInput | number
    product_imagem_id?: IntFieldUpdateOperationsInput | number
    product_marca?: IntFieldUpdateOperationsInput | number
    product_descricao?: StringFieldUpdateOperationsInput | string
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Pedido_item?: Pedido_itemUncheckedUpdateManyWithoutProductNestedInput
    imagem_item?: imagem_itemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutSub_categoriaInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_nome?: StringFieldUpdateOperationsInput | string
    product_valor?: FloatFieldUpdateOperationsInput | number
    product_imagem_id?: IntFieldUpdateOperationsInput | number
    product_marca?: IntFieldUpdateOperationsInput | number
    product_descricao?: StringFieldUpdateOperationsInput | string
    user_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagem_itemCreateManyImagemInput = {
    imagem_item_id?: number
    product_id: number
    sub_categoria_nome: string
    sub_categoria_createdAt?: Date | string
    sub_categoria_updatedAt?: Date | string
  }

  export type imagem_itemUpdateWithoutImagemInput = {
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutImagem_itemNestedInput
  }

  export type imagem_itemUncheckedUpdateWithoutImagemInput = {
    imagem_item_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagem_itemUncheckedUpdateManyWithoutImagemInput = {
    imagem_item_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    sub_categoria_nome?: StringFieldUpdateOperationsInput | string
    sub_categoria_createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sub_categoria_updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidoCreateManyClienteInput = {
    pedido_id?: number
    pedido_status: string
    pedido_valor_total: number
    pedido_frete_total: number
    pedido_data?: Date | string
    tipo_pagamento_id: number
  }

  export type PedidoUpdateWithoutClienteInput = {
    pedido_status?: StringFieldUpdateOperationsInput | string
    pedido_valor_total?: FloatFieldUpdateOperationsInput | number
    pedido_frete_total?: FloatFieldUpdateOperationsInput | number
    pedido_data?: DateTimeFieldUpdateOperationsInput | Date | string
    Tipo_Pagamento?: Tipo_PagamentoUpdateOneRequiredWithoutPedidoNestedInput
    Pedido_item?: Pedido_itemUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateWithoutClienteInput = {
    pedido_id?: IntFieldUpdateOperationsInput | number
    pedido_status?: StringFieldUpdateOperationsInput | string
    pedido_valor_total?: FloatFieldUpdateOperationsInput | number
    pedido_frete_total?: FloatFieldUpdateOperationsInput | number
    pedido_data?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_pagamento_id?: IntFieldUpdateOperationsInput | number
    Pedido_item?: Pedido_itemUncheckedUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateManyWithoutClienteInput = {
    pedido_id?: IntFieldUpdateOperationsInput | number
    pedido_status?: StringFieldUpdateOperationsInput | string
    pedido_valor_total?: FloatFieldUpdateOperationsInput | number
    pedido_frete_total?: FloatFieldUpdateOperationsInput | number
    pedido_data?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_pagamento_id?: IntFieldUpdateOperationsInput | number
  }

  export type Pedido_itemCreateManyPedidoInput = {
    Pedido_item_id?: number
    product_id: number
    Pedido_item_valor: number
    Pedido_item_qtd: number
  }

  export type Pedido_itemUpdateWithoutPedidoInput = {
    Pedido_item_valor?: FloatFieldUpdateOperationsInput | number
    Pedido_item_qtd?: IntFieldUpdateOperationsInput | number
    Product?: ProductUpdateOneRequiredWithoutPedido_itemNestedInput
  }

  export type Pedido_itemUncheckedUpdateWithoutPedidoInput = {
    Pedido_item_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    Pedido_item_valor?: FloatFieldUpdateOperationsInput | number
    Pedido_item_qtd?: IntFieldUpdateOperationsInput | number
  }

  export type Pedido_itemUncheckedUpdateManyWithoutPedidoInput = {
    Pedido_item_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    Pedido_item_valor?: FloatFieldUpdateOperationsInput | number
    Pedido_item_qtd?: IntFieldUpdateOperationsInput | number
  }

  export type PedidoCreateManyTipo_PagamentoInput = {
    pedido_id?: number
    cliente_id: number
    pedido_status: string
    pedido_valor_total: number
    pedido_frete_total: number
    pedido_data?: Date | string
  }

  export type PedidoUpdateWithoutTipo_PagamentoInput = {
    pedido_status?: StringFieldUpdateOperationsInput | string
    pedido_valor_total?: FloatFieldUpdateOperationsInput | number
    pedido_frete_total?: FloatFieldUpdateOperationsInput | number
    pedido_data?: DateTimeFieldUpdateOperationsInput | Date | string
    Cliente?: ClienteUpdateOneRequiredWithoutPedidoNestedInput
    Pedido_item?: Pedido_itemUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateWithoutTipo_PagamentoInput = {
    pedido_id?: IntFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    pedido_status?: StringFieldUpdateOperationsInput | string
    pedido_valor_total?: FloatFieldUpdateOperationsInput | number
    pedido_frete_total?: FloatFieldUpdateOperationsInput | number
    pedido_data?: DateTimeFieldUpdateOperationsInput | Date | string
    Pedido_item?: Pedido_itemUncheckedUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateManyWithoutTipo_PagamentoInput = {
    pedido_id?: IntFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    pedido_status?: StringFieldUpdateOperationsInput | string
    pedido_valor_total?: FloatFieldUpdateOperationsInput | number
    pedido_frete_total?: FloatFieldUpdateOperationsInput | number
    pedido_data?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaCountOutputTypeDefaultArgs instead
     */
    export type CategoriaCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CategoriaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Sub_categoriaCountOutputTypeDefaultArgs instead
     */
    export type Sub_categoriaCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Sub_categoriaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ImagemCountOutputTypeDefaultArgs instead
     */
    export type ImagemCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ImagemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteCountOutputTypeDefaultArgs instead
     */
    export type ClienteCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ClienteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PedidoCountOutputTypeDefaultArgs instead
     */
    export type PedidoCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PedidoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Tipo_PagamentoCountOutputTypeDefaultArgs instead
     */
    export type Tipo_PagamentoCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Tipo_PagamentoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriaDefaultArgs instead
     */
    export type categoriaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = categoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use sub_categoriaDefaultArgs instead
     */
    export type sub_categoriaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = sub_categoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use imagemDefaultArgs instead
     */
    export type imagemArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = imagemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use imagem_itemDefaultArgs instead
     */
    export type imagem_itemArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = imagem_itemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteDefaultArgs instead
     */
    export type ClienteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ClienteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PedidoDefaultArgs instead
     */
    export type PedidoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PedidoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Pedido_itemDefaultArgs instead
     */
    export type Pedido_itemArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Pedido_itemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Tipo_PagamentoDefaultArgs instead
     */
    export type Tipo_PagamentoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Tipo_PagamentoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}